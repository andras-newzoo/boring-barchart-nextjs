{"version":3,"file":"static/webpack/static/development/pages/visualisations.js.d6ce73b5ff4c91d1c552.hot-update.js","sources":["webpack:///./components/IconChart/IconChart.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport _ from \"lodash\";\nimport { select } from \"d3-selection\";\nimport { scaleBand, scaleLinear } from \"d3-scale\";\nimport \"d3-transition\";\n\nconst Wrapper = styled.div`\n  svg {\n    cursor: pointer;\n  }\n`;\n\nclass IconChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: this.props.location,\n      data: [\n        { sortKey: 0, yKey: \"A\", xKey: 250 },\n        { sortKey: 1, yKey: \"B\", xKey: 300 },\n        { sortKey: 2, yKey: \"C\", xKey: 200 }\n      ]\n    };\n  }\n\n  componentDidMount() {\n    this.initVis();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.location !== this.props.location) {\n      this.randomizeData();\n    }\n\n    if (this.props.fill !== prevProps.fill) {\n      this.updateFill();\n    }\n  }\n\n  getColor() {}\n\n  randomizeData() {\n    const randomXKey = () => _.random(50, 300);\n\n    const data = [\n      { sortKey: randomXKey(), yKey: \"A\", xKey: randomXKey() },\n      { sortKey: randomXKey(), yKey: \"B\", xKey: randomXKey() },\n      { sortKey: randomXKey(), yKey: \"C\", xKey: randomXKey() }\n    ];\n\n    this.updateVis(data.sort((a, b) => a.sortKey - b.sortKey), this.getColor());\n  }\n\n  initVis() {\n    const svg = select(this.svg);\n    const { data } = this.state;\n    svg.attr(\"height\", 40).attr(\"width\", 40);\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"chart-area\")\n      .attr(\"transform\", `translate(0,7)`);\n\n    this.yScale = scaleBand()\n      .range([0, 30])\n      .domain(data.map(d => d.yKey))\n      .padding(0.3);\n    this.xScale = scaleLinear()\n      .range([0, 35])\n      .domain([0, 300]);\n    this.chartArea = svg.select(\".chart-area\");\n\n    this.chartArea\n      .append(\"line\")\n      .attr(\"x1\", 0)\n      .attr(\"x2\", 0)\n      .attr(\"y1\", 0)\n      .attr(\"y2\", 30)\n      .attr(\"stroke\", this.props.fill)\n      .attr(\"stroke-width\", 1)\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-linecap\", \"round\");\n\n    const rects = this.chartArea.selectAll(\"rect\").data(data, d => d.yKey);\n\n    rects\n      .enter()\n      .append(\"rect\")\n      .attr(\"x\", this.xScale(0))\n      .attr(\"y\", d => this.yScale(d.yKey))\n      .attr(\"height\", this.yScale.bandwidth())\n      .attr(\"width\", this.xScale(0))\n      .attr(\"fill\", this.props.fill)\n      .merge(rects)\n      .transition(\"in\")\n      .duration(1000)\n      .delay((_, i) => i * 250)\n      .attr(\"width\", d => this.xScale(d.xKey));\n  }\n\n  updateVis(data) {\n    this.yScale.domain(data.map(d => d.yKey));\n\n    this.chartArea\n      .selectAll(\"rect\")\n      .data(data, d => d.yKey)\n      .transition(\"update-width\")\n      .delay(d => d.sortKey)\n      .duration(1000)\n      .attr(\"width\", d => this.xScale(d.xKey))\n      .attr(\"fill\", this.props.fill);\n  }\n\n  updateFill() {\n    this.chartArea.selectAll(\"rect\").attr(\"fill\", this.props.fill);\n\n    this.chartArea.select(\"line\").attr(\"stroke\", this.props.fill);\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <svg\n          ref={svg => (this.svg = svg)}\n          onClick={() => this.randomizeData()}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nexport default IconChart;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAKA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AALA;AAFA;AAUA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AADA;AAGA;AACA;AAKA;AAEA;AAAA;AAEA;AAGA;AAEA;AAWA;AAAA;AAAA;AAEA;AAIA;AAAA;AAOA;AAAA;AACA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;;;AAEA;AACA;AAEA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AAnHA;AACA;AAqHA;;;;A","sourceRoot":""}