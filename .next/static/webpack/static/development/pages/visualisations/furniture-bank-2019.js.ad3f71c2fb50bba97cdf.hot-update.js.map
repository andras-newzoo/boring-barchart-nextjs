{"version":3,"file":"static/webpack/static/development/pages/visualisations/furniture-bank-2019.js.ad3f71c2fb50bba97cdf.hot-update.js","sources":["webpack:///./components/AutoComplete/helperFunctions.js","webpack:///./components/AutoComplete/index.jsx"],"sourcesContent":["import Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\n\nconst escapeRegexCharacters = str => str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n\nexport const getSuggestionValue = suggestion => `${suggestion.first} ${suggestion.last}`\n\nexport const getSuggestions = (data, key, value) => {\n  const escapedValue = escapeRegexCharacters(value.trim());\n  if (escapedValue === '') {\n    return [];\n  }\n  const regex = new RegExp('\\\\b' + escapedValue, 'i');\n  return data.filter(el => regex.test(getSuggestionValue(el[key])));\n}\n\n\n// function renderSuggestion(suggestion, { query }) {\n//   const suggestionText = `${suggestion.first} ${suggestion.last}`;\n//   const matches = AutosuggestHighlightMatch(suggestionText, query);\n//   const parts = AutosuggestHighlightParse(suggestionText, matches);\n\n//   return (\n//     <span className={'suggestion-content ' + suggestion.twitter}>\n//       <span className=\"name\">\n//         {\n//           parts.map((part, index) => {\n//             const className = part.highlight ? 'highlight' : null;\n\n//             return (\n//               <span className={className} key={index}>{part.text}</span>\n//             );\n//           })\n//         }\n//       </span>\n//     </span>\n//   );\n// }\n\n// class App extends React.Component {\n//   constructor() {\n//     super();\n\n//     this.state = {\n//       value: '',\n//       suggestions: []\n//     };    \n//   }\n\n//   onChange = (event, { newValue, method }) => {\n//     this.setState({\n//       value: newValue\n//     });\n//   };\n  \n//   onSuggestionsFetchRequested = ({ value }) => {\n//     this.setState({\n//       suggestions: getSuggestions(value)\n//     });\n//   };\n\n//   onSuggestionsClearRequested = () => {\n//     this.setState({\n//       suggestions: []\n//     });\n//   };\n\n//   render() {\n//     const { value, suggestions } = this.state;\n//     const inputProps = {\n//       placeholder: \"Type 'c'\",\n//       value,\n//       onChange: this.onChange\n//     };\n\n//     return (\n//       <Autosuggest \n//         suggestions={suggestions}\n//         onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n//         onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n//         getSuggestionValue={getSuggestionValue}\n//         renderSuggestion={renderSuggestion}\n//         inputProps={inputProps} />\n//     );\n//   }\n// }\n","import React, { useState } from \"react\";\nimport deburr from \"lodash/deburr\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { fontWeightS, fontWeightL } from \"../../styles/sharedStyles\";\nimport { Grid } from \"@material-ui/core\";\nimport { useStyles, AddIcon } from \"./styles\";\nimport { getSuggestions, getSuggestionValue } from './helperFunctions'\n \nfunction renderInputComponent(inputProps) {\n  const { classes, inputRef = () => {}, ref, ...other } = inputProps;\n  \n  return (\n    <Grid \n      container \n      spacing={1} \n      alignItems=\"center\"\n      justify=\"center\"\n      className={classes.grid}\n    >\n      <Grid item>\n        <AddIcon color=\"\"/>\n      </Grid>\n      <Grid item>\n        <TextField\n          fullWidth\n          InputProps={{\n            inputRef: node => {\n              ref(node);\n              inputRef(node);\n            },\n            classes: {\n              input: classes.input\n            }\n          }}\n          {...other}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n\n\n// function getSuggestions(data, itemKey, value) {\n//   const inputValue = deburr(value.trim()).toLowerCase();\n//   const inputLength = inputValue.length;\n//   let count = 0;\n\n//   return inputLength === 0\n//     ? []\n//     : data.filter(item => {\n//         const keep =\n//           count < 5 &&\n//           item[itemKey].slice(0, inputLength).toLowerCase() === inputValue;\n//         if (keep) {\n//           count += 1;\n//         }\n//         return keep;\n//       });\n// }\n\nfunction AutoComplete({ data, itemKey, iconFill }) {\n  const classes = useStyles();\n\n  const [single, setSingle] = React.useState(\"\");\n\n  const [stateSuggestions, setSuggestions] = useState([]);\n\n  // const getSuggestionValue = item => item[itemKey];\n\n  const handleSuggestionsFetchRequested = ({ value }) =>\n    setSuggestions(getSuggestions(data, itemKey, value));\n\n  const handleSuggestionsClearRequested = () => setSuggestions([]);\n\n  const handleChange = (_, { newValue }) => setSingle(newValue);\n\n  const renderSuggestion = (data, { query, isHighlighted }) => {\n    const matches = match(data[itemKey], query);\n    const parts = parse(data[itemKey], matches);\n    \n    return (\n      <MenuItem selected={isHighlighted} component=\"div\">\n        <div>\n          {parts.map(part => (\n            <span\n              key={part.text}\n              style={{ fontWeight: part.highlight ? fontWeightL : fontWeightS }}\n            >\n              {part.text}\n            </span>\n          ))}\n        </div>\n      </MenuItem>\n    );\n  };\n\n  const autosuggestProps = {\n    suggestions: stateSuggestions,\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\n    getSuggestionValue,\n    renderSuggestion\n  };\n\n  return (\n    <div className={classes.root}>\n      <Autosuggest\n        {...autosuggestProps}\n        inputProps={{\n          classes,\n          id: \"react-autosuggest-simple\",\n          placeholder: \"Add a new item\",\n          value: single,\n          onChange: handleChange\n        }}\n        theme={{\n          container: classes.container,\n          suggestionsContainerOpen: classes.suggestionsContainerOpen,\n          suggestionsList: classes.suggestionsList,\n          suggestion: classes.suggestion\n        }}\n        renderInputComponent={inputProps => (\n          renderInputComponent(inputProps, iconFill)\n        )}\n        renderSuggestionsContainer={options => (\n          <Paper {...options.containerProps} square>\n            {options.children}\n          </Paper>\n        )}\n      />\n    </div>\n  );\n}\n\nexport default AutoComplete;"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AALA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}