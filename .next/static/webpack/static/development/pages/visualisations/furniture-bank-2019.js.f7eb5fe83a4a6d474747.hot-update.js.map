{"version":3,"file":"static/webpack/static/development/pages/visualisations/furniture-bank-2019.js.f7eb5fe83a4a6d474747.hot-update.js","sources":["webpack:///./components/AutoComplete/index.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport { Container } from \"./styles\";\nimport AddIcon from '@material-ui/icons/Add';\n\nconst escapeRegexCharacters = str => str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\nconst getSuggestionValue = (suggestion, key) => suggestion[key]\n\nconst getSuggestions = (data, key, value) => {\n  const escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === \"\") {\n    return [];\n  }\n\n  const regex = new RegExp(\"\\\\b\" + escapedValue, \"i\");\n  \n  return data.filter(el => regex.test(el[key]));\n}\n\nconst renderSuggestion = (suggestion, { query }, key) => {\n  \n  const suggestionText = suggestion[key]\n  const matches = match(suggestionText, query);\n  const parts = parse(suggestionText, matches);\n\n  return (\n    <span className={\"suggestion-content \" + suggestion.twitter}>\n      <span className=\"name\">\n        {parts.map((part, index) => {\n          const className = part.highlight ? \"highlight\" : null;\n          return (\n            <span className={className} key={index}>\n              {part.text}\n            </span>\n          );\n        })}\n      </span>\n    </span>\n  );\n}\n\nconst AutoComplete = ({\n  data, itemKey, style, handleSelected\n}) => {\n  const [value, setValue] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n\n  const handleOnChange = (_, { newValue }) => setValue(newValue);\n  const onSuggestionsFetchRequested = ({ value }) => setSuggestions(getSuggestions(data, itemKey, value));\n  const onSuggestionsClearRequested = () => setSuggestions([]);\n\n  const inputProps = {\n    placeholder: \"Add new item\",\n    value,\n    onChange: handleOnChange\n  };\n  \n  return (\n    <Container\n      {...style}\n      searched={value.length}\n    >\n      <AddIcon className={\"icon\"} fontSize=\"medium\"/>\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={onSuggestionsClearRequested}\n        onSuggestionSelected={(_, { suggestionValue}) => {\n          setValue('')\n          handleSelected(suggestionValue)\n        }}\n        getSuggestionValue={suggestion => getSuggestionValue(suggestion, itemKey)}\n        renderSuggestion={(suggestion, query) => renderSuggestion(suggestion, query, itemKey)}\n        inputProps={inputProps}\n      />  \n    </Container>\n  );\n};\n\nexport default AutoComplete;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAGA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;;;;A","sourceRoot":""}