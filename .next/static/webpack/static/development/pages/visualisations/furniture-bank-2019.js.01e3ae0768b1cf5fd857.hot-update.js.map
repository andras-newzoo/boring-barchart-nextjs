{"version":3,"file":"static/webpack/static/development/pages/visualisations/furniture-bank-2019.js.01e3ae0768b1cf5fd857.hot-update.js","sources":["webpack:///./containers/FurnitureBank2019/components/PercentageChart.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyDark } from \"../styles\";\nimport { easeCubicInOut } from \"d3-ease\";\nimport \"d3-transition\";\nimport { createUpdateSvg } from \"../../../utils\";\n\nconst ChartWrapper = styled.div`\n  position: relative;\n  height: 70%;\n  width: 90%;\n\n  border: 1px solid ${colorGreyDark};\n\n  border-radius: 20px;\n  overflow: hidden;\n\n  svg {\n    position: absolute;\n\n    rect {\n      fill: ${colorGreen};\n    }\n  }\n`;\n\nconst PercentageChart = ({\n  data,\n  fullCount,\n  updateDuration = 1000,\n  resetDelay = 500\n}) => {\n  const divRef = useRef();\n  const storedValues = useRef();\n  const prevData = usePrevious(data);\n  const prevCount = usePrevious(fullCount);\n  const [init, setInit] = useState(false);\n  let initVis, resetChart, updateRect\n\n  const dims = useSvgResize(divRef);\n\n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n\n  useEffect(() => {\n    //console.log('dims', dims)\n  }, [dims]);\n\n  useEffect(() => {\n    if (init && prevData !== data) {\n      prevCount < fullCount && resetChart('end');\n      fullCount < prevCount && resetChart('start');\n      fullCount === prevCount && updateRect();\n    }\n  }, [data, init, prevData, fullCount, prevCount, resetChart, updateDuration, resetDelay, updateRect, dims.width]);\n\n  initVis = () => {\n    const area = select(divRef.current);\n    const { chartArea } = createUpdateSvg({\n      area,\n      dims: { ...dims, height: dims.height },\n      append: true\n    });\n\n    chartArea\n      .append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"height\", dims.height)\n      .attr(\"width\", 0);\n\n    storedValues.current = {\n      area,\n      chartArea\n    };\n\n    updateRect();\n  };\n\n  resetChart = resetPoint => {\n    const { chartArea } = storedValues.current;\n    const toEnd = resetPoint === 'end'\n    chartArea\n      .select(\"rect\")\n      .transition()\n      .duration(updateDuration/2)\n      .ease(easeCubicInOut)\n      .attr(\"width\", toEnd ? dims.width : 0 )\n      .transition()\n      .delay(resetDelay)\n      .duration(0)\n      .attr(\"width\", toEnd ? 0 : 1)\n      .transition()\n      .delay(updateDuration/2)\n      .duration(updateDuration/2)\n      .ease(easeCubicInOut)\n      .attr(\"width\",  dims.width * (data - fullCount));\n  };\n\n  updateRect = useCallback(() => {\n    const { chartArea } = storedValues.current;\n    chartArea\n      .select(\"rect\")\n      .transition(\"update\")\n      .duration(updateDuration)\n      .ease(easeCubicInOut)\n      .attr(\"width\", dims.width * (data - fullCount));\n  }, [data, dims.width, fullCount, updateDuration]);\n\n  return <ChartWrapper ref={divRef} />;\n};\n\nexport default PercentageChart;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAkBA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AACA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAGA;AACA;AAAA;AAAA;AACA;AAHA;AAFA;AACA;AAOA;AAOA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAeA;AACA;AACA;AAAA;AAEA;AAMA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}