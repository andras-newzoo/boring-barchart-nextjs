{"version":3,"file":"static/webpack/static/development/pages/visualisations/furniture-bank-2019.js.10d27ade8102211bd3cb.hot-update.js","sources":["webpack:///./containers/FurnitureBank2019/components/BarChart.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport _ from 'lodash'\nimport { scaleBand, scaleLinear } from 'd3-scale'\nimport { select } from \"d3-selection\";\nimport { max } from 'd3-array'\n\nimport { colorGreen } from \"../styles\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { createUpdateSvg } from \"../../../utils\";\nimport { colorGrey } from \"../../../styles\";\nimport { easeCubicInOut } from \"d3-ease\";\n\nconst ChartWrapper = styled.div`\n  height: 100%;\n  width: 100%;\n\n  border-left: 1px solid ${colorGrey};\n\n  rect {\n    fill: ${colorGreen};\n  }\n`;\n\nconst BarChart = ({\n  data,\n  updateDuration = 1000,\n}) => {\n  const divRef = useRef()\n  const storedValues = useRef()\n  const prevData = usePrevious(data)\n  const [ init, setInit ] = useState(false)\n  let initVis, updateData, updateDims\n\n  const dims = useSvgResize(divRef)\n  const prevDims = usePrevious(dims)\n\n  useEffect(() => {\n    if(data && dims.height && dims.width && !init){\n      initVis()\n      setInit(true)\n    }\n    if(init && !_.isEqual(data, prevData)){\n      updateData()\n    }\n  }, [data, dims, init, initVis, prevData, updateData])\n\n  useEffect(() => {\n\n  }, [dims])\n\n  initVis = () => {\n    const area = select(divRef.current)\n    const { chartArea } = createUpdateSvg({\n      area,\n      dims,\n      append: true\n    });\n\n    const yScale = scaleBand().range([0, dims.height])\n      .paddingOuter(.2)\n      .paddingInner(.3)\n\n    const xScale = scaleLinear().range([0, dims.width])\n    \n    storedValues.current = {\n      chartArea,\n      yScale,\n      xScale\n    }\n    updateData()\n  }\n\n  updateData = () => {\n    const { yScale, xScale } = storedValues.current\n    yScale.domain(data.map(d => d.group))\n    xScale.domain([0, max(data, d => d.share)])\n    storedValues.current = { ...storedValues.current, yScale, xScale }\n    createUpdateRects()\n    createUpdateValueText()\n    createUpdateVariableText()\n  }\n\n  const createUpdateRects = () => {\n    const { chartArea, yScale, xScale } = storedValues.current\n\n    const rects = chartArea.selectAll('rect').data(data, d => d.group)\n    \n    rects.exit()\n      .transition()\n      .duration(updateDuration)\n      .ease(easeCubicInOut)\n      .attr('y', dims.height * 2)\n      .remove()\n\n    rects.enter()\n      .append('rect')\n      .attr('x', 0)\n      .attr('y', d => yScale(d.group))\n      .attr('height', yScale.bandwidth())\n      .attr('width', 0)\n        .merge(rects)\n        .transition()\n        .duration(updateDuration)\n        .ease(easeCubicInOut)\n        .attr('width', d => xScale(d.share))\n\n  }\n\n  const createUpdateValueText = () => {\n\n  }\n\n  const createUpdateVariableText = () => {\n    \n  }\n\n\n  return <ChartWrapper ref={divRef} />;\n};\n\nexport default BarChart;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAUA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAFA;AAGA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AAIA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAEA;AAOA;AAGA;AAAA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}