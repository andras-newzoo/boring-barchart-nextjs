{"version":3,"file":"static/webpack/static/development/pages/visualisations/furniture-bank-2019.js.098f4ded36f2269c9c48.hot-update.js","sources":["webpack:///./containers/FurnitureBank2019/index.jsx","webpack:///./store/furnitureBankReducer/selectors.js"],"sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { Button } from \"@material-ui/core\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport {\n  MainContainer,\n  DashboardContainer,\n  ControlsContainer,\n  ChartsContainer,\n  LogoContainer,\n  MainTitle,\n  SocChartsContainer,\n  EnvChartsContainer,\n  LandFillContainer,\n  EmissionContainer,\n  ReqContainer,\n  ChartPaper,\n  colorRed,\n  ChartTitle\n} from \"./styles\";\nimport {\n  ValueContainer,\n  MapContainer,\n  ControlContainer,\n  FamiliesContainer\n} from \"./containers\";\nimport { Message } from \"./components\";\nimport { fontSizeM, FlexContainer } from \"../../styles\";\nimport { LandFillSubContainer } from \"./styles/styledContainers\";\nimport { useSelector } from \"react-redux\";\nimport { selectAllSelectedItems } from \"../../store/furnitureBankReducer/selectors\";\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n    background: colorRed,\n    color: \"white\",\n    fontSize: fontSizeM,\n    boxShadow: \"none\",\n    \"&:hover\": {\n      background: colorRed,\n      color: \"white\"\n    }\n  }\n}));\n\nconst Dashboard = () => {\n  const classes = useStyles();\n\n  const items = useSelector(selectAllSelectedItems)\n\n  console.log(items);\n  \n\n  return (\n    <>\n      <Helmet>\n        <title>Furniture Bank 2019</title>\n      </Helmet>\n      <MainContainer>\n        <DashboardContainer>\n          <ControlsContainer>\n            <LogoContainer>\n              <img\n                src=\"/static/logos/furnitureBank.svg\"\n                alt=\"furniture bank icon\"\n              />\n            </LogoContainer>\n            <ControlContainer />\n          </ControlsContainer>\n          <ChartsContainer>\n            <SocChartsContainer>\n              <MainTitle gridArea=\"title\">\n                What is the estimated social impact of your donation?\n              </MainTitle>\n              <MapContainer />\n              <FamiliesContainer />\n              <ValueContainer />\n            </SocChartsContainer>\n            <EnvChartsContainer>\n              <MainTitle gridArea=\"title\">\n                What is the estimated environmental impact of your donation?\n              </MainTitle>\n                <ChartPaper gridArea=\"landfill\">\n                  <LandFillContainer>\n                      <ChartTitle>What will be the estimated amount of waste saved?</ChartTitle>\n                      <Message />\n                      <LandFillSubContainer gridArea=\"weight\" >\n                          <FlexContainer area=\"num\" >\n                              Number\n                          </FlexContainer>\n                          <FlexContainer area=\"icon\" >\n                              Icons\n                          </FlexContainer>\n                          <FlexContainer area=\"text\" >\n                              Equivalent to 15.5 days of avg. Canadian household waste\n                          </FlexContainer>\n                      </LandFillSubContainer>\n                      <LandFillSubContainer gridArea=\"volume\" >\n                        <FlexContainer area=\"num\" >\n                                Number\n                            </FlexContainer>\n                            <FlexContainer area=\"icon\" >\n                                Icons\n                            </FlexContainer>\n                            <FlexContainer area=\"text\" >\n                                Equivalent to 20% of an avg. cargo container\n                            </FlexContainer>\n                        </LandFillSubContainer>\n                  </LandFillContainer>\n                </ChartPaper>\n              <EmissionContainer>\n                <ChartPaper>\n                  <Message />\n                </ChartPaper>\n              </EmissionContainer>\n            </EnvChartsContainer>\n            <ReqContainer>\n              <Button\n                className={classes.button}\n                variant=\"contained\"\n                disableRipple\n              >\n                Request a Pickup\n              </Button>\n            </ReqContainer>\n          </ChartsContainer>\n        </DashboardContainer>\n      </MainContainer>\n    </>\n  );\n};\nexport default Dashboard;\n","import { createSelector } from \"reselect\";\nimport _ from \"lodash\";\n\nconst selectGroupList = state => state.furnitureBankReducer.groups;\nconst selectFurnitureList = state => state.furnitureBankReducer.productList;\nconst selectedAllSelected = state => state.furnitureBankReducer.selectedItems;\nconst selectAllDonation = state => state.furnitureBankReducer.donationsData;\nconst selectAllFamily = state => state.furnitureBankReducer.familyData;\nconst selectAllCoordinates = state =>\n  state.furnitureBankReducer.coordinatesData;\n\n//* Array of all selected items\nexport const selectAllSelected = createSelector(\n  selectedAllSelected,\n  selectedList => selectedList.map(el => el.name)\n);\n\nexport const selectTotalQuantity = createSelector(\n  selectedAllSelected,\n  selectedList => selectedList.reduce((acc, curr) => acc + curr.quantity, 0)\n);\n\nexport const selectAllUnselected = createSelector(\n  selectFurnitureList,\n  selectAllSelected,\n  (totalList, allSelected) =>\n    totalList.filter(\n      el =>\n        !allSelected\n          .map(el => el.toLowerCase())\n          .includes(el.product_name.toLowerCase())\n    )\n);\n\nexport const selectAllSelectedItems = createSelector(\n  selectFurnitureList,\n  selectedAllSelected,\n  (furnitureList, selectedItems) =>\n  selectedItems\n  .map(\n    el =>\n    furnitureList.find(d => d.product_name === el.name)\n  )\n);\n\nexport const selectAllSelectedPrice = createSelector(\n  selectAllSelectedItems,\n  selectedAllSelected,\n  ( selectedItems, selectedQuantities ) =>\n  selectedItems\n    .reduce((acc, curr) => acc + selectedQuantities\n      .find(el => curr.product_name === el.name ).quantity * curr.value, 0 )\n      // .map(\n      //   el =>\n      //     +furnitureList.find(d => d.product_name === el.name).value *\n      //     el.quantity\n      // )\n      // .reduce((acc, curr) => acc + curr, 0)\n);\n\n//* Get relevant postal code list\nexport const selectFilteredDonationPostalCode = createSelector(\n  selectAllDonation,\n  selectAllSelected,\n  (donations, selectedItems) =>\n    donations.filter(el => selectedItems.includes(el.product_name))\n);\n\n//* Get family data for postal codes\nexport const selectFilteredFamilies = createSelector(\n  selectAllFamily,\n  selectFilteredDonationPostalCode,\n  (families, selectedPostalCodes) =>\n    families.filter(el => selectedPostalCodes.includes(el.postal_code))\n);\n\n//* Get coordinates for filtere items\nexport const selectFilteredCoordinates = createSelector(\n  selectAllCoordinates,\n  selectFilteredDonationPostalCode,\n  (coordinates, selectedPostalCodes) =>\n    selectedPostalCodes.map(el => ({\n      ...el,\n      coors: coordinates.find(d => d.postal_code === el.postal_code)\n    }))\n);\n\n//* Get unique list of postal codes\nexport const selectUniqueCoordinates = createSelector(\n  selectFilteredDonationPostalCode,\n  filteredPostalCodes => [\n    ...new Set(filteredPostalCodes.map(el => el.postal_code))\n  ]\n);\n\n//* Get families from filtered postal codes\nexport const selectPostalCodeFamilies = createSelector(\n  selectUniqueCoordinates,\n  selectAllFamily,\n  (postalCodes, families) =>\n    families.filter(el => postalCodes.includes(el.postal_code))\n);\n\n//* Top Groups\nexport const selectGroups = createSelector(\n  selectPostalCodeFamilies,\n  families => _.groupBy(families, \"segment\")\n);\nexport const selectTopGroups = createSelector(\n  selectGroups,\n  selectGroupList,\n  selectPostalCodeFamilies,\n  (groups, groupList, total) =>\n    groupList.map(el =>\n      groups[el]\n        ? { group: el, share: groups[el].length / total.length }\n        : { group: el, share: 0 }\n    ).sort((a,b) => b.share - a.share).slice(0,3)\n);\n\n//* Persons\nexport const selectAdults = createSelector(\n  selectPostalCodeFamilies,\n  families => _.mean(families.map(el => parseInt(el.adults) || 0))\n);\nexport const selectChildren = createSelector(\n  selectPostalCodeFamilies,\n  families => _.mean(families.map(el => parseInt(el.children) || 0))\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAgBA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AALA;AADA;AAAA;AACA;AAYA;AACA;AAEA;AAEA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AAGA;AAGA;AAEA;AAEA;AAAA;AAFA;AAFA;AASA;AAGA;AAGA;AACA;AAAA;AADA;AAHA;AAQA;AAGA;AAEA;AACA;AAAA;AADA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAZA;AACA;AAeA;AAGA;AACA;AAAA;AADA;AACA;AAIA;AAGA;AACA;AAAA;AADA;AACA;AAIA;AAGA;AACA;AAEA;AAAA;AAAA;AAFA;AAAA;AADA;AACA;AAOA;AAEA;AACA;AAAA;AADA;AACA;AAKA;AAGA;AACA;AAAA;AADA;AACA;AAIA;AAEA;AAAA;AAEA;AAIA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAIA;AAAA;AALA;AACA;AAQA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}