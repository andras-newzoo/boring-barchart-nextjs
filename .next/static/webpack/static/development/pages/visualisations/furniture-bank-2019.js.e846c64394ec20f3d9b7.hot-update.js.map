{"version":3,"file":"static/webpack/static/development/pages/visualisations/furniture-bank-2019.js.e846c64394ec20f3d9b7.hot-update.js","sources":["webpack:///./containers/FurnitureBank2019/components/BarChart.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport _ from 'lodash'\nimport { scaleBand, scaleLinear } from 'd3-scale'\nimport { select } from \"d3-selection\";\nimport { max } from 'd3-array'\n\nimport { colorGreen } from \"../styles\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { createUpdateSvg, numberTween } from \"../../../utils\";\nimport { colorGrey, fontSizeM, fontWeightL } from \"../../../styles\";\nimport { easeCubicInOut } from \"d3-ease\";\n\nconst ChartWrapper = styled.div`\n  height: 100%;\n  width: 100%;\n\n  border-left: 1px solid ${colorGrey};\n\n  rect {\n    fill: ${colorGreen};\n  }\n\n  .variable {\n    fill: ${colorGrey};\n    font-size: 1rem;\n  }\n\n  .value {\n    fill: #fff;\n    font-size: ${fontSizeM};\n    font-weight: ${fontWeightL};\n    text-anchor: end;\n  }\n`;\n\nconst BarChart = ({\n  data,\n  updateDuration = 1000,\n}) => {\n  const divRef = useRef()\n  const storedValues = useRef()\n  const prevData = usePrevious(data)\n  const [ init, setInit ] = useState(false)\n  let initVis, updateData, updateDims\n\n  const dims = useSvgResize(divRef)\n  const prevDims = usePrevious(dims)\n\n  useEffect(() => {\n    if(data && dims.height && dims.width && !init){\n      initVis()\n      setInit(true)\n    }\n    if(init && !_.isEqual(data, prevData)){\n      updateData()\n    }\n  }, [data, dims, init, initVis, prevData, updateData])\n\n  useEffect(() => {\n    if(init){\n      !_.isEqual(dims, prevDims) && updateDims();\n    }\n  }, [dims, init, prevDims, updateDims])\n\n  initVis = () => {\n    const area = select(divRef.current)\n    const { chartArea } = createUpdateSvg({\n      area,\n      dims,\n      append: true\n    });\n\n    const yScale = scaleBand().range([0, dims.height])\n      .paddingOuter(.3)\n      .paddingInner(.4)\n\n    const xScale = scaleLinear().range([0, dims.width])\n    \n    storedValues.current = {\n      area,\n      chartArea,\n      yScale,\n      xScale\n    }\n    updateData()\n  }\n\n  updateData = () => {\n    const { yScale, xScale } = storedValues.current\n    yScale.domain(data.map(d => d.group))\n    xScale.domain([0, max(data, d => d.share)])\n    storedValues.current = { ...storedValues.current, yScale, xScale }\n    createUpdateRects()\n    createUpdateValueText()\n    createUpdateVariableText()\n  }\n\n  const createUpdateRects = () => {\n    const { chartArea, yScale, xScale } = storedValues.current\n\n    const rects = chartArea.selectAll('rect').data(data, d => d.group)\n    \n    removeElement(rects)\n\n    rects.enter()\n      .append('rect')\n      .attr('x', 0)\n      .attr('y', d => yScale(d.group))\n      .attr('height', yScale.bandwidth())\n      .attr('width', 0)\n        .merge(rects)\n        .transition()\n        .duration(updateDuration)\n        .ease(easeCubicInOut)\n        .attr('width', d => xScale(d.share))\n\n  }\n\n  updateDims = () => {\n    const { area, chartArea, yScale, xScale, centerText, yPos } = storedValues.current\n    yScale.range([0, dims.height])\n    xScale.range([0, dims.width])\n    createUpdateSvg({ area, dims, update: true })\n    chartArea.selectAll('rect')\n      .attr('width', d => xScale(d.share))\n      .attr('y', d => yScale(d.group))\n      .attr('height', yScale.bandwidth())\n    chartArea.selectAll('.value')\n      .attr('x', d => xScale(d.share) - 2)\n      .attr('y', centerText)\n    chartArea.selectAll('.variable')\n      .attr('y', yPos)\n    storedValues.current = { ...storedValues.current, yScale, xScale }\n  }\n\n  const createUpdateValueText = () => {\n    const { chartArea, yScale, xScale } = storedValues.current\n\n    const texts = chartArea.selectAll('.value').data(data, d => d.group)\n    const centerText = d => yScale(d.group) + yScale.bandwidth()/2 + 4\n\n    removeElement(texts)\n\n    texts.enter()\n      .append('text')\n      .attr('class', 'value')\n      .attr('x', 0)\n      .attr('y', centerText)\n      .attr('opacity', 0)\n      .text(0)\n        .merge(texts)\n        .transition()\n        .duration(updateDuration)\n        .ease(easeCubicInOut)\n        .attr('x', d => xScale(d.share) - 3)\n        .tween('text', (d, i, n) => numberTween(d, i, n, 'share', '.1%'))\n        .attr('opacity', 1)\n    storedValues.current = { ...storedValues.current, centerText }\n  }\n\n  const createUpdateVariableText = () => {\n    const { chartArea, yScale } = storedValues.current\n\n    const texts = chartArea.selectAll('.variable').data(data, d => d.group)\n    const yPos = d => yScale(d.group) - 3\n\n    removeElement(texts)\n\n    texts.enter()\n      .append('text')\n      .attr('class', 'variable')\n      .attr('x', 1)\n      .attr('y', yPos)\n      .attr('opacity', 0)\n      .text(d => d.group)\n        .merge(texts)\n        .transition()\n        .duration(updateDuration)\n        .ease(easeCubicInOut)\n        .attr('y', yPos)\n        .attr('opacity', 1)\n    storedValues.current = { ...storedValues.current, yPos }\n  }\n\n  const removeElement = el => \n    el.exit()\n      .transition()\n      .duration(updateDuration)\n      .ease(easeCubicInOut)\n      .attr('y', dims.height * 2)\n      .remove()\n\n\n  return <ChartWrapper ref={divRef} />;\n};\n\nexport default BarChart;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAsBA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAGA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAEA;AAEA;AAGA;AAAA;AAOA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAWA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAMA;AAAA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}