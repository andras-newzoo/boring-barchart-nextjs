{"version":3,"file":"static/webpack/static/development/pages/visualisations/furniture-bank-2019.js.bcf8b74e24e65d7d65fc.hot-update.js","sources":["webpack:///./containers/FurnitureBank2019/components/PercentageChart.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyDark } from \"../styles\";\nimport { easeCubicInOut } from 'd3-ease'\nimport 'd3-transition'\n\nconst ChartWrapper = styled.div`\n  position: relative;\n  height: 70%;\n  width: 90%;\n\n  border: 1px solid ${colorGreyDark};\n\n  border-radius: 20px;\n  overflow: hidden;\n\n  svg {\n    position: absolute;\n\n    rect {\n      fill: ${colorGreen};\n    }\n  }\n`;\n\nconst PercentageChart = ({ \n  data\n}) => {\n  // const svgRef = useRef();\n  const divRef = useRef();\n  const storedValues = useRef();\n  const prevData = usePrevious(data);\n  const [init, setInit] = useState(false);\n  let initVis, updateData\n\n  const dims = useSvgResize(divRef);\n  \n  useEffect(() => {\n    console.log(data);\n    console.log(dims.width );\n    console.log(dims.height );\n    console.log(!init);\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init,   initVis]);\n\n  useEffect(() => {\n    //console.log('dims', dims)\n  }, [dims]);\n\n  useEffect(() => {\n    if(init && (prevData !== data)){\n      if(data > 1){\n\n      } else {   \n        // updateData()\n      }\n    }\n  }, [data, init, prevData, updateData]);\n\n  initVis = () => {\n    select(divRef.current)\n      .append('svg')\n      .select('svg')\n      .attr('width', dims.width)\n      .attr('height', dims.height)\n      .append(\"g\")\n      .attr(\"class\", \"chart-area\")\n    const chartArea = select(\".chart-area\");\n    chartArea\n      .append('rect')\n      .attr('x', 0)\n      .attr('y', 0)\n      .attr('height', dims.height + 1)\n      .attr('width', dims.width * data)\n\n    storedValues.current = {\n      chartArea\n    };\n  };\n\n  updateData = () => {\n    const { chartArea } = storedValues.current\n    chartArea.select('rect')\n      .transition()\n      .duration(1000)\n      .ease(easeCubicInOut)\n      .attr('width', dims.width * data)\n  };\n\n  const resetChart = () => {\n    const { chartArea } = storedValues.current\n    chartArea.select('rect')\n      .attr('width', 0)\n  };\n\n  const updateDims = () => {};\n\n  return <ChartWrapper ref={divRef}/>\n};\n\nexport default PercentageChart;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAkBA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AACA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAOA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAEA;AAKA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}