{"version":3,"file":"static/webpack/static/development/pages/visualisations/furniture-bank-2019.js.23127d7786187ee86236.hot-update.js","sources":["webpack:///./containers/FurnitureBank2019/components/PercentageChart.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyDark } from \"../styles\";\nimport { easeCubicInOut } from \"d3-ease\";\nimport \"d3-transition\";\nimport { createUpdateSvg } from \"../../../utils\";\n\nconst ChartWrapper = styled.div`\n  position: relative;\n  height: 70%;\n  width: 90%;\n\n  border: 1px solid ${colorGreyDark};\n\n  border-radius: 20px;\n  overflow: hidden;\n\n  svg {\n    position: absolute;\n\n    rect {\n      fill: ${colorGreen};\n    }\n  }\n`;\n\nconst PercentageChart = ({\n  data,\n  fullCount,\n  updateDuration = 1000,\n  resetDelay = 500\n}) => {\n  const divRef = useRef();\n  const storedValues = useRef();\n  const prevData = usePrevious(data);\n  const prevCount = usePrevious(fullCount);\n  const [init, setInit] = useState(false);\n  let initVis, resetChart;\n\n  const dims = useSvgResize(divRef);\n\n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n\n  useEffect(() => {\n    //console.log('dims', dims)\n  }, [dims]);\n\n  useEffect(() => {\n    if (init && prevData !== data) {\n      if (prevCount !== fullCount) {\n        resetChart();\n        updateRect({ delay: resetDelay });\n      } else {\n        updateRect();\n      }\n    }\n  }, [\n    data,\n    init,\n    prevData,\n    fullCount,\n    prevCount,\n    resetChart,\n    updateDuration,\n    resetDelay,\n    updateRect\n  ]);\n\n  initVis = () => {\n    const area = select(divRef.current);\n    const { chartArea } = createUpdateSvg({\n      area,\n      dims: { ...dims, height: dims.height },\n      append: true\n    });\n\n    chartArea\n      .append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"height\", dims.height)\n      .attr(\"width\", 0);\n\n    storedValues.current = {\n      area,\n      chartArea\n    };\n\n    updateRect({\n      duration: updateDuration\n    });\n  };\n\n  resetChart = () => {\n    const { chartArea } = storedValues.current;\n    chartArea\n      .select(\"rect\")\n      .transition(\"toFull\")\n      .duration(resetDelay)\n      .ease(easeCubicInOut)\n      .attr(\"width\", dims.width)\n      .transition(\"toZero\")\n      .delay(resetDelay)\n      .duration(0)\n      .attr(\"width\", 0);\n  };\n\n  const updateDims = () => {};\n\n  const updateRect = useCallback(({ duration = updateDuration, delay = 0 }) => {\n    const { chartArea } = storedValues.current;\n    console.log(duration);\n    chartArea\n      .select(\"rect\")\n      .transition(\"update\")\n      .duration(duration)\n      .ease(easeCubicInOut)\n      .delay(delay)\n      .attr(\"width\", dims.width * (data - fullCount));\n  });\n\n  return <ChartWrapper ref={divRef} />;\n};\n\nexport default PercentageChart;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAkBA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AACA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AAFA;AAGA;AACA;AAAA;AAAA;AACA;AAHA;AAFA;AACA;AAOA;AAOA;AACA;AACA;AAFA;AAKA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAEA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAOA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}