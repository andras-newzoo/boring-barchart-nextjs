{"version":3,"file":"static/webpack/static/development/pages/visualisations/furniture-bank-2019.js.f7745b6465c3b12191a5.hot-update.js","sources":["webpack:///./store/furnitureBankReducer/selectors.js"],"sourcesContent":["import { createSelector } from \"reselect\";\nimport _ from \"lodash\";\n\nconst selectGroupList = state => state.furnitureBankReducer.groups;\nconst selectFurnitureList = state => state.furnitureBankReducer.productList;\nconst selectedAllSelected = state => state.furnitureBankReducer.selectedItems;\nconst selectAllDonation = state => state.furnitureBankReducer.donationsData;\nconst selectAllEmission = state => state.furnitureBankReducer.emissionData;\nconst selectAllFamily = state => state.furnitureBankReducer.familyData;\nconst selectAllCoordinates = state =>\n  state.furnitureBankReducer.coordinatesData;\n\n//* Array of all selected items\nexport const selectAllSelected = createSelector(\n  selectedAllSelected,\n  selectedList => selectedList.map(el => el.name)\n);\n\nexport const selectTotalQuantity = createSelector(\n  selectedAllSelected,\n  selectedList => selectedList.reduce((acc, curr) => acc + curr.quantity, 0)\n);\n\nexport const selectAllUnselected = createSelector(\n  selectFurnitureList,\n  selectAllSelected,\n  (totalList, allSelected) =>\n    totalList.filter(\n      el =>\n        !allSelected\n          .map(el => el.toLowerCase())\n          .includes(el.product_name.toLowerCase())\n    )\n);\n\nexport const selectAllSelectedItems = createSelector(\n  selectFurnitureList,\n  selectedAllSelected,\n  (furnitureList, selectedItems) =>\n  selectedItems\n  .map(\n    el =>\n    furnitureList.find(d => d.product_name === el.name)\n  )\n);\n\nexport const selectAllSelectedPrice = createSelector(\n  selectAllSelectedItems,\n  selectedAllSelected,\n  ( selectedItems, selectedQuantities ) =>\n  selectedItems\n    .reduce((acc, curr) => acc + selectedQuantities\n      .find(el => curr.product_name === el.name ).quantity * curr.value, 0 )\n);\n\nexport const selectAllSelectedWeight = createSelector(\n  selectAllSelectedItems,\n  selectedAllSelected,\n  ( selectedItems, selectedQuantities ) =>\n  selectedItems\n    .reduce((acc, curr) => acc + selectedQuantities\n      .find(el => curr.product_name === el.name ).quantity * curr.weight_lbs, 0 )\n);\n\nexport const selectAllSelectedVolume = createSelector(\n  selectAllSelectedItems,\n  selectedAllSelected,\n  ( selectedItems, selectedQuantities ) =>\n  selectedItems\n    .reduce((acc, curr) => acc + selectedQuantities\n      .find(el => curr.product_name === el.name ).quantity * curr.volume_ft, 0 )\n);\n\nexport const selectAllSelectedEmission = createSelector(\n  selectedAllSelected,\n  selectAllEmission,\n  ( selectedItems, emissionList ) =>\n  selectedItems.reduce((acc, curr) => {\n    const result = emissionList.find(el => el.product_name === curr.name)\n    return result ? acc + result.kg_co2_per_unit * curr.quantity : acc\n  }, 0)\n);\n\n//* Get relevant postal code list\nexport const selectFilteredDonationPostalCode = createSelector(\n  selectAllDonation,\n  selectAllSelected,\n  (donations, selectedItems) =>\n    donations.filter(el => selectedItems.includes(el.product_name))\n);\n\n//* Get family data for postal codes\nexport const selectFilteredFamilies = createSelector(\n  selectAllFamily,\n  selectFilteredDonationPostalCode,\n  (families, selectedPostalCodes) =>\n    families.filter(el => selectedPostalCodes.includes(el.postal_code))\n);\n\n//* Get coordinates for filtere items\nexport const selectFilteredCoordinates = createSelector(\n  selectAllCoordinates,\n  selectFilteredDonationPostalCode,\n  (coordinates, selectedPostalCodes) =>\n    selectedPostalCodes.map(el => ({\n      ...el,\n      coors: coordinates.find(d => d.postal_code === el.postal_code)\n    }))\n);\n\n//* Get unique list of postal codes\nexport const selectUniqueCoordinates = createSelector(\n  selectFilteredDonationPostalCode,\n  filteredPostalCodes => [\n    ...new Set(filteredPostalCodes.map(el => el.postal_code))\n  ]\n);\n\n//* Get families from filtered postal codes\nexport const selectPostalCodeFamilies = createSelector(\n  selectUniqueCoordinates,\n  selectAllFamily,\n  (postalCodes, families) =>\n    families.filter(el => postalCodes.includes(el.postal_code))\n);\n\n//* Top Groups\nexport const selectGroups = createSelector(\n  selectPostalCodeFamilies,\n  families => _.groupBy(families, \"segment\")\n);\nexport const selectTopGroups = createSelector(\n  selectGroups,\n  selectGroupList,\n  selectPostalCodeFamilies,\n  (groups, groupList, total) =>\n    groupList.map(el =>\n      groups[el]\n        ? { group: el, share: groups[el].length / total.length }\n        : { group: el, share: 0 }\n    ).sort((a,b) => b.share - a.share).slice(0,3)\n);\n\n//* Persons\nexport const selectAdults = createSelector(\n  selectPostalCodeFamilies,\n  families => _.mean(families.map(el => parseInt(el.adults) || 0))\n);\nexport const selectChildren = createSelector(\n  selectPostalCodeFamilies,\n  families => _.mean(families.map(el => parseInt(el.children) || 0))\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AAGA;AAGA;AAEA;AAEA;AAAA;AAFA;AAFA;AASA;AAGA;AAGA;AACA;AAAA;AADA;AAHA;AAQA;AAGA;AAEA;AACA;AAAA;AADA;AAFA;AAMA;AAGA;AAEA;AACA;AAAA;AADA;AAFA;AAMA;AAGA;AAEA;AACA;AAAA;AADA;AAFA;AAMA;AAGA;AAEA;AAAA;AAAA;AACA;AACA;AAJA;AACA;AAOA;AAGA;AACA;AAAA;AADA;AACA;AAIA;AAGA;AACA;AAAA;AADA;AACA;AAIA;AAGA;AACA;AAEA;AAAA;AAAA;AAFA;AAAA;AADA;AACA;AAOA;AAEA;AACA;AAAA;AADA;AACA;AAKA;AAGA;AACA;AAAA;AADA;AACA;AAIA;AAEA;AAAA;AAEA;AAIA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AAIA;AAAA;AALA;AACA;AAQA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}