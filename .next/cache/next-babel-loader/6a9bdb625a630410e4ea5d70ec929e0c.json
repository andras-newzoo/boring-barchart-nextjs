{"ast":null,"code":"import { select } from \"d3-selection\";\nimport { interpolateNumber } from \"d3-interpolate\";\nimport numeral from \"numeral\";\nimport { format } from 'd3-format';\nexport const numberTween = (d, i, n, key, numFormat) => {\n  const that = select(n[i]);\n  const num = +that.text().substring(0, that.text().length - 1) * 0.01;\n  const newNum = d[key];\n  const index = interpolateNumber(num, newNum);\n  return function (t) {\n    that.text(`${format(numFormat)(index(t))}`);\n  };\n};\nexport const createUpdateSvg = ({\n  area,\n  dims,\n  margin = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  },\n  append,\n  update\n}) => {\n  let chartArea;\n\n  const setDims = svg => svg.attr(\"width\", dims.width).attr(\"height\", dims.height);\n\n  const chartWidth = dims.width - margin.left - margin.right;\n  const chartHeight = dims.height - margin.top - margin.bottom;\n\n  if (append) {\n    area.append(\"svg\");\n    const svg = area.select(\"svg\");\n    setDims(svg);\n    svg.append(\"g\").attr(\"class\", \"chart-area\").attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n    chartArea = area.select(\".chart-area\");\n  }\n\n  ;\n\n  if (update) {\n    setDims(area.select(\"svg\"));\n  }\n\n  return {\n    chartArea,\n    chartWidth,\n    chartHeight\n  };\n};","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/utils/chartHelpers.js"],"names":["select","interpolateNumber","numeral","format","numberTween","d","i","n","key","numFormat","that","num","text","substring","length","newNum","index","t","createUpdateSvg","area","dims","margin","top","right","bottom","left","append","update","chartArea","setDims","svg","attr","width","height","chartWidth","chartHeight"],"mappings":"AAAA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,iBAAT,QAAkC,gBAAlC;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAAQC,MAAR,QAAqB,WAArB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,GAAV,EAAeC,SAAf,KAA6B;AACtD,QAAMC,IAAI,GAAGV,MAAM,CAACO,CAAC,CAACD,CAAD,CAAF,CAAnB;AACA,QAAMK,GAAG,GAAG,CAACD,IAAI,CAACE,IAAL,GAAYC,SAAZ,CAAsB,CAAtB,EAAyBH,IAAI,CAACE,IAAL,GAAYE,MAAZ,GAAqB,CAA9C,CAAD,GAAoD,IAAhE;AACA,QAAMC,MAAM,GAAGV,CAAC,CAACG,GAAD,CAAhB;AACA,QAAMQ,KAAK,GAAGf,iBAAiB,CAACU,GAAD,EAAMI,MAAN,CAA/B;AACA,SAAO,UAASE,CAAT,EAAY;AACjBP,IAAAA,IAAI,CAACE,IAAL,CAAW,GAAET,MAAM,CAACM,SAAD,CAAN,CAAkBO,KAAK,CAACC,CAAD,CAAvB,CAA4B,EAAzC;AACD,GAFD;AAGD,CARM;AAUP,OAAO,MAAMC,eAAe,GAAG,CAAC;AAC9BC,EAAAA,IAD8B;AAE9BC,EAAAA,IAF8B;AAG9BC,EAAAA,MAAM,GAAG;AAAEC,IAAAA,GAAG,EAAE,CAAP;AAAUC,IAAAA,KAAK,EAAE,CAAjB;AAAoBC,IAAAA,MAAM,EAAE,CAA5B;AAA+BC,IAAAA,IAAI,EAAE;AAArC,GAHqB;AAI9BC,EAAAA,MAJ8B;AAK9BC,EAAAA;AAL8B,CAAD,KAMzB;AACJ,MAAIC,SAAJ;;AACA,QAAMC,OAAO,GAAGC,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAAS,OAAT,EAAkBX,IAAI,CAACY,KAAvB,EAA8BD,IAA9B,CAAmC,QAAnC,EAA6CX,IAAI,CAACa,MAAlD,CAAvB;;AACA,QAAMC,UAAU,GAAGd,IAAI,CAACY,KAAL,GAAaX,MAAM,CAACI,IAApB,GAA2BJ,MAAM,CAACE,KAArD;AACA,QAAMY,WAAW,GAAGf,IAAI,CAACa,MAAL,GAAcZ,MAAM,CAACC,GAArB,GAA2BD,MAAM,CAACG,MAAtD;;AACA,MAAGE,MAAH,EAAU;AACRP,IAAAA,IAAI,CAACO,MAAL,CAAY,KAAZ;AACA,UAAMI,GAAG,GAAGX,IAAI,CAACnB,MAAL,CAAY,KAAZ,CAAZ;AACA6B,IAAAA,OAAO,CAACC,GAAD,CAAP;AACAA,IAAAA,GAAG,CACAJ,MADH,CACU,GADV,EAEGK,IAFH,CAEQ,OAFR,EAEiB,YAFjB,EAGGA,IAHH,CAGQ,WAHR,EAGsB,aAAYV,MAAM,CAACI,IAAK,KAAIJ,MAAM,CAACC,GAAI,GAH7D;AAIAM,IAAAA,SAAS,GAAGT,IAAI,CAACnB,MAAL,CAAY,aAAZ,CAAZ;AACD;;AAAA;;AACD,MAAG2B,MAAH,EAAU;AACRE,IAAAA,OAAO,CAACV,IAAI,CAACnB,MAAL,CAAY,KAAZ,CAAD,CAAP;AACD;;AACD,SAAO;AAAE4B,IAAAA,SAAF;AAAaM,IAAAA,UAAb;AAAyBC,IAAAA;AAAzB,GAAP;AACC,CAzBI","sourcesContent":["import { select } from \"d3-selection\";\nimport { interpolateNumber } from \"d3-interpolate\";\nimport numeral from \"numeral\";\nimport {format} from 'd3-format'\n\nexport const numberTween = (d, i, n, key, numFormat) => {\n  const that = select(n[i])\n  const num = +that.text().substring(0, that.text().length - 1) * 0.01\n  const newNum = d[key]\n  const index = interpolateNumber(num, newNum);\n  return function(t) {\n    that.text(`${format(numFormat)(index(t))}`);\n  };\n};\n\nexport const createUpdateSvg = ({\n  area,\n  dims,\n  margin = { top: 0, right: 0, bottom: 0, left: 0 },\n  append,\n  update\n}) => {\n  let chartArea\n  const setDims = svg => svg.attr(\"width\", dims.width).attr(\"height\", dims.height);\n  const chartWidth = dims.width - margin.left - margin.right\n  const chartHeight = dims.height - margin.top - margin.bottom\n  if(append){\n    area.append(\"svg\");\n    const svg = area.select(\"svg\")\n    setDims(svg)\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"chart-area\")\n      .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n    chartArea = area.select(\".chart-area\");\n  };\n  if(update){\n    setDims(area.select(\"svg\"))\n  }\n  return { chartArea, chartWidth, chartHeight }\n  }\n"]},"metadata":{},"sourceType":"module"}