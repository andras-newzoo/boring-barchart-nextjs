{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyDark } from \"../styles\";\nimport { easeCubicInOut } from 'd3-ease';\nimport 'd3-transition';\nimport { createUpdateSvg } from \"../../../utils\";\nvar ChartWrapper = styled.div.withConfig({\n  displayName: \"PercentageChart__ChartWrapper\",\n  componentId: \"sc-18c8aar-0\"\n})([\"position:relative;height:70%;width:90%;border:1px solid \", \";border-radius:20px;overflow:hidden;svg{position:absolute;rect{fill:\", \";}}\"], colorGreyDark, colorGreen);\n\nvar PercentageChart = function PercentageChart(_ref) {\n  var data = _ref.data,\n      fullCounter = _ref.fullCounter,\n      _ref$updateDuration = _ref.updateDuration,\n      updateDuration = _ref$updateDuration === void 0 ? 1000 : _ref$updateDuration;\n  // const svgRef = useRef();\n  var divRef = useRef();\n  var storedValues = useRef();\n  var prevData = usePrevious(data);\n\n  var _useState = useState(false),\n      init = _useState[0],\n      setInit = _useState[1];\n\n  var initVis, updateData;\n  var dims = useSvgResize(divRef);\n  console.log(data);\n  console.log(fullCounter);\n  useEffect(function () {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n  useEffect(function () {//console.log('dims', dims)\n  }, [dims]);\n  useEffect(function () {\n    if (init && prevData !== data) {\n      updateData();\n    }\n  }, [data, init, prevData, updateData]);\n\n  initVis = function initVis() {\n    var area = select(divRef.current);\n\n    var _createUpdateSvg = createUpdateSvg({\n      area: area,\n      dims: _objectSpread({}, dims, {\n        height: dims.height\n      }),\n      append: true\n    }),\n        chartArea = _createUpdateSvg.chartArea;\n\n    chartArea.append('rect').attr('x', 0).attr('y', 0).attr('height', dims.height).attr('width', 0);\n    storedValues.current = {\n      area: area,\n      chartArea: chartArea\n    };\n    updateRect(updateDuration);\n  };\n\n  updateData = function updateData() {\n    updateRect(updateDuration);\n  };\n\n  var resetChart = function resetChart() {\n    var chartArea = storedValues.current.chartArea;\n    chartArea.select('rect').attr('width', 0);\n  };\n\n  var updateDims = function updateDims() {};\n\n  var updateRect = function updateRect(duration) {\n    var chartArea = storedValues.current.chartArea;\n    chartArea.select('rect').transition().duration(duration).ease(easeCubicInOut).attr('width', dims.width * data);\n  };\n\n  return __jsx(ChartWrapper, {\n    ref: divRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  });\n};\n\nexport default PercentageChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx"],"names":["React","useRef","useEffect","useState","styled","useSvgResize","usePrevious","select","colorGreen","colorGreyDark","easeCubicInOut","createUpdateSvg","ChartWrapper","div","PercentageChart","data","fullCounter","updateDuration","divRef","storedValues","prevData","init","setInit","initVis","updateData","dims","console","log","width","height","area","current","append","chartArea","attr","updateRect","resetChart","updateDims","duration","transition","ease"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyDark } from \"../styles\";\nimport { easeCubicInOut } from 'd3-ease'\nimport 'd3-transition'\nimport { createUpdateSvg } from \"../../../utils\";\n\nconst ChartWrapper = styled.div`\n  position: relative;\n  height: 70%;\n  width: 90%;\n\n  border: 1px solid ${colorGreyDark};\n\n  border-radius: 20px;\n  overflow: hidden;\n\n  svg {\n    position: absolute;\n\n    rect {\n      fill: ${colorGreen};\n    }\n  }\n`;\n\nconst PercentageChart = ({ \n  data,\n  fullCounter,\n  updateDuration=1000\n}) => {\n  // const svgRef = useRef();\n  const divRef = useRef();\n  const storedValues = useRef();\n  const prevData = usePrevious(data);\n  const [init, setInit] = useState(false);\n  let initVis, updateData\n\n  const dims = useSvgResize(divRef);\n  \n  console.log(data);\n  console.log(fullCounter);\n\n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n\n  useEffect(() => {\n    //console.log('dims', dims)\n  }, [dims]);\n\n  useEffect(() => {\n    if(init && (prevData !== data)){\n      updateData()\n    }\n  }, [data, init, prevData, updateData]);\n\n  initVis = () => {\n    const area = select(divRef.current)\n    const { chartArea } = createUpdateSvg({\n      area,\n      dims: {...dims, height: dims.height},\n      append: true\n    })\n\n    chartArea\n      .append('rect')\n      .attr('x', 0)\n      .attr('y', 0)\n      .attr('height', dims.height)\n      .attr('width', 0)\n\n    storedValues.current = {\n      area,\n      chartArea\n    };\n\n    updateRect(updateDuration)\n\n  };\n\n  updateData = () => {\n    updateRect(updateDuration)\n  };\n\n  const resetChart = () => {\n    const { chartArea } = storedValues.current\n    chartArea.select('rect')\n      .attr('width', 0)\n  };\n\n  const updateDims = () => {};\n\n  const updateRect = duration => {\n    const { chartArea } = storedValues.current\n\n    chartArea.select('rect')\n      .transition()\n      .duration(duration)\n      .ease(easeCubicInOut)\n      .attr('width', dims.width * data)\n  }\n\n  return <ChartWrapper ref={divRef}/>\n};\n\nexport default PercentageChart;\n"]},"metadata":{},"sourceType":"module"}