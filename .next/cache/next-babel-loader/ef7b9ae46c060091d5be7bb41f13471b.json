{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport deburr from \"lodash/deburr\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { fontWeightS, fontWeightL } from \"../../styles/sharedStyles\";\nimport { Grid } from \"@material-ui/core\";\n\nfunction renderInputComponent(inputProps) {\n  const {\n    classes,\n    inputRef = () => {},\n    ref\n  } = inputProps,\n        other = _objectWithoutProperties(inputProps, [\"classes\", \"inputRef\", \"ref\"]);\n\n  const useStyles = makeStyles(theme => ({\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1)\n    },\n    dense: {\n      marginTop: theme.spacing(2)\n    },\n    menu: {\n      width: 200\n    }\n  }));\n  const styles = useStyles();\n  return __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, __jsx(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, __jsx(AccountCircle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), __jsx(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(TextField, _extends({\n    id: \"outlined-search\",\n    type: \"search\",\n    className: styles.textField,\n    margin: \"normal\",\n    variant: \"outlined\",\n    fullWidth: true,\n    InputProps: {\n      inputRef: node => {\n        ref(node);\n        inputRef(node);\n      },\n      classes: {\n        input: classes.input\n      }\n    }\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }))));\n}\n\nfunction getSuggestions(data, itemKey, value) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n  return inputLength === 0 ? [] : data.filter(item => {\n    const keep = count < 5 && item[itemKey].slice(0, inputLength).toLowerCase() === inputValue;\n\n    if (keep) {\n      count += 1;\n    }\n\n    return keep;\n  });\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: 250,\n    flexGrow: 1\n  },\n  container: {\n    position: \"relative\"\n  },\n  suggestionsContainerOpen: {\n    position: \"absolute\",\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0\n  },\n  suggestion: {\n    display: \"block\"\n  },\n  suggestionsList: {\n    margin: 0,\n    padding: 0,\n    listStyleType: \"none\"\n  },\n  divider: {\n    height: theme.spacing(2)\n  }\n}));\n\nfunction AutoComplete({\n  data,\n  itemKey\n}) {\n  const classes = useStyles();\n  const [single, setSingle] = React.useState(\"\");\n  const {\n    0: stateSuggestions,\n    1: setSuggestions\n  } = useState([]);\n\n  const getSuggestionValue = item => item[itemKey];\n\n  const handleSuggestionsFetchRequested = ({\n    value\n  }) => setSuggestions(getSuggestions(data, itemKey, value));\n\n  const handleSuggestionsClearRequested = () => setSuggestions([]);\n\n  const handleChange = (_, {\n    newValue\n  }) => setSingle(newValue);\n\n  const renderSuggestion = (data, {\n    query,\n    isHighlighted\n  }) => {\n    const matches = match(data[itemKey], query);\n    const parts = parse(data[itemKey], matches);\n    return __jsx(MenuItem, {\n      selected: isHighlighted,\n      component: \"div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, parts.map(part => __jsx(\"span\", {\n      key: part.text,\n      style: {\n        fontWeight: part.highlight ? fontWeightL : fontWeightS\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, part.text))));\n  };\n\n  const autosuggestProps = {\n    renderInputComponent,\n    suggestions: stateSuggestions,\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\n    getSuggestionValue,\n    renderSuggestion\n  };\n  return __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, __jsx(Autosuggest, _extends({}, autosuggestProps, {\n    inputProps: {\n      classes,\n      id: \"react-autosuggest-simple\",\n      placeholder: \"Add a new item\",\n      value: single,\n      onChange: handleChange\n    },\n    theme: {\n      container: classes.container,\n      suggestionsContainerOpen: classes.suggestionsContainerOpen,\n      suggestionsList: classes.suggestionsList,\n      suggestion: classes.suggestion\n    },\n    renderSuggestionsContainer: options => __jsx(Paper, _extends({}, options.containerProps, {\n      square: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), options.children),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  })));\n}\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx"],"names":["React","useState","deburr","Autosuggest","match","parse","TextField","Paper","MenuItem","AccountCircle","makeStyles","fontWeightS","fontWeightL","Grid","renderInputComponent","inputProps","classes","inputRef","ref","other","useStyles","theme","container","display","flexWrap","textField","marginLeft","spacing","marginRight","dense","marginTop","menu","width","styles","node","input","getSuggestions","data","itemKey","value","inputValue","trim","toLowerCase","inputLength","length","count","filter","item","keep","slice","root","height","flexGrow","position","suggestionsContainerOpen","zIndex","left","right","suggestion","suggestionsList","margin","padding","listStyleType","divider","AutoComplete","single","setSingle","stateSuggestions","setSuggestions","getSuggestionValue","handleSuggestionsFetchRequested","handleSuggestionsClearRequested","handleChange","_","newValue","renderSuggestion","query","isHighlighted","matches","parts","map","part","text","fontWeight","highlight","autosuggestProps","suggestions","onSuggestionsFetchRequested","onSuggestionsClearRequested","id","placeholder","onChange","options","containerProps","children"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport deburr from \"lodash/deburr\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { fontWeightS, fontWeightL } from \"../../styles/sharedStyles\";\nimport { Grid } from \"@material-ui/core\";\n\nfunction renderInputComponent(inputProps) {\n  const { classes, inputRef = () => {}, ref, ...other } = inputProps;\n  const useStyles = makeStyles(theme => ({\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n    },\n    dense: {\n      marginTop: theme.spacing(2),\n    },\n    menu: {\n      width: 200,\n    },\n  }));\n  const styles = useStyles();\n  return (\n    <Grid \n      container \n      spacing={1} \n      alignItems=\"flex-end\"\n    >\n      <Grid item>\n        <AccountCircle />\n      </Grid>\n      <Grid item>\n        <TextField\n          id=\"outlined-search\"\n          type=\"search\"\n          className={styles.textField}\n          margin=\"normal\"\n          variant=\"outlined\"\n          fullWidth\n          InputProps={{\n            inputRef: node => {\n              ref(node);\n              inputRef(node);\n            },\n            classes: {\n              input: classes.input\n            }\n          }}\n          {...other}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n\nfunction getSuggestions(data, itemKey, value) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n\n  return inputLength === 0\n    ? []\n    : data.filter(item => {\n        const keep =\n          count < 5 &&\n          item[itemKey].slice(0, inputLength).toLowerCase() === inputValue;\n\n        if (keep) {\n          count += 1;\n        }\n\n        return keep;\n      });\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: 250,\n    flexGrow: 1\n  },\n  container: {\n    position: \"relative\"\n  },\n  suggestionsContainerOpen: {\n    position: \"absolute\",\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0\n  },\n  suggestion: {\n    display: \"block\"\n  },\n  suggestionsList: {\n    margin: 0,\n    padding: 0,\n    listStyleType: \"none\"\n  },\n  divider: {\n    height: theme.spacing(2)\n  }\n}));\n\nfunction AutoComplete({ data, itemKey }) {\n  const classes = useStyles();\n\n  const [single, setSingle] = React.useState(\"\");\n\n  const [stateSuggestions, setSuggestions] = useState([]);\n\n  const getSuggestionValue = item => item[itemKey];\n\n  const handleSuggestionsFetchRequested = ({ value }) =>\n    setSuggestions(getSuggestions(data, itemKey, value));\n\n  const handleSuggestionsClearRequested = () => setSuggestions([]);\n\n  const handleChange = (_, { newValue }) => setSingle(newValue);\n\n  const renderSuggestion = (data, { query, isHighlighted }) => {\n    const matches = match(data[itemKey], query);\n    const parts = parse(data[itemKey], matches);\n\n    return (\n      <MenuItem selected={isHighlighted} component=\"div\">\n        <div>\n          {parts.map(part => (\n            <span\n              key={part.text}\n              style={{ fontWeight: part.highlight ? fontWeightL : fontWeightS }}\n            >\n              {part.text}\n            </span>\n          ))}\n        </div>\n      </MenuItem>\n    );\n  };\n\n  const autosuggestProps = {\n    renderInputComponent,\n    suggestions: stateSuggestions,\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\n    getSuggestionValue,\n    renderSuggestion\n  };\n\n  return (\n    <div className={classes.root}>\n      <Autosuggest\n        {...autosuggestProps}\n        inputProps={{\n          classes,\n          id: \"react-autosuggest-simple\",\n          placeholder: \"Add a new item\",\n          value: single,\n          onChange: handleChange\n        }}\n        theme={{\n          container: classes.container,\n          suggestionsContainerOpen: classes.suggestionsContainerOpen,\n          suggestionsList: classes.suggestionsList,\n          suggestion: classes.suggestion\n        }}\n        renderSuggestionsContainer={options => (\n          <Paper {...options.containerProps} square>\n            {options.children}\n          </Paper>\n        )}\n      />\n    </div>\n  );\n}\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}