{"ast":null,"code":"var _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { fontWeightS, fontWeightL } from \"../../styles/sharedStyles\";\nimport { Grid } from \"@material-ui/core\";\nimport { useStyles, AddIcon } from \"./styles\";\n\nvar escapeRegexCharacters = function escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n};\n\nvar getSuggestionValue = function getSuggestionValue(suggestion) {\n  return console.log(suggestion);\n}; //`${suggestion.first} ${suggestion.last}`\n\n\nvar getSuggestions = function getSuggestions(data, key, value) {\n  var escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === \"\") {\n    return [];\n  }\n\n  var regex = new RegExp(\"\\\\b\" + escapedValue, \"i\");\n  console.log(data, key);\n  return data.filter(function (el) {\n    return regex.test(getSuggestionValue(el[key]));\n  });\n};\n\nvar renderSuggestion = function renderSuggestion(suggestion, _ref) {\n  var query = _ref.query;\n  console.log(suggestion); // const suggestionText = `${suggestion.first} ${suggestion.last}`;\n  // const matches = match(suggestionText, query);\n  // const parts = parse(suggestionText, matches);\n  // return (\n  //   <span className={\"suggestion-content \" + suggestion.twitter}>\n  //     <span className=\"name\">\n  //       {parts.map((part, index) => {\n  //         const className = part.highlight ? \"highlight\" : null;\n  //         return (\n  //           <span className={className} key={index}>\n  //             {part.text}\n  //           </span>\n  //         );\n  //       })}\n  //     </span>\n  //   </span>\n  // );\n};\n\nvar AutoComplete = function AutoComplete(_ref2) {\n  var data = _ref2.data,\n      key = _ref2.key;\n\n  var _useState = useState(\"\"),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _useState2 = useState([]),\n      suggestions = _useState2[0],\n      setSuggestions = _useState2[1];\n\n  console.log('key', key);\n\n  var handleOnChange = function handleOnChange(_, _ref3) {\n    var newValue = _ref3.newValue;\n    return setValue(newValue);\n  };\n\n  var onSuggestionsFetchRequested = function onSuggestionsFetchRequested(_ref4) {\n    var value = _ref4.value;\n    return setSuggestions(getSuggestions(data, key, value));\n  };\n\n  var onSuggestionsClearRequested = function onSuggestionsClearRequested() {\n    return setSuggestions([]);\n  };\n\n  var inputProps = {\n    placeholder: \"Add new item\",\n    value: value,\n    onChange: handleOnChange\n  };\n  return __jsx(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n    onSuggestionsClearRequested: onSuggestionsClearRequested,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    inputProps: inputProps,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  });\n};\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx"],"names":["React","useState","Autosuggest","match","parse","TextField","Paper","MenuItem","fontWeightS","fontWeightL","Grid","useStyles","AddIcon","escapeRegexCharacters","str","replace","getSuggestionValue","suggestion","console","log","getSuggestions","data","key","value","escapedValue","trim","regex","RegExp","filter","el","test","renderSuggestion","query","AutoComplete","setValue","suggestions","setSuggestions","handleOnChange","_","newValue","onSuggestionsFetchRequested","onSuggestionsClearRequested","inputProps","placeholder","onChange"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { fontWeightS, fontWeightL } from \"../../styles/sharedStyles\";\nimport { Grid } from \"@material-ui/core\";\nimport { useStyles, AddIcon } from \"./styles\";\n\n\nconst escapeRegexCharacters = str => str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\nconst getSuggestionValue = suggestion => console.log(suggestion);\n\n//`${suggestion.first} ${suggestion.last}`\n\nconst getSuggestions = (data, key, value) => {\n  const escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === \"\") {\n    return [];\n  }\n\n  const regex = new RegExp(\"\\\\b\" + escapedValue, \"i\");\n  console.log(data, key);\n  \n  return data.filter(el => regex.test(getSuggestionValue(el[key])));\n}\n\n\nconst renderSuggestion = (suggestion, { query }) => {\n  console.log(suggestion);\n  \n  // const suggestionText = `${suggestion.first} ${suggestion.last}`;\n  // const matches = match(suggestionText, query);\n  // const parts = parse(suggestionText, matches);\n\n  // return (\n  //   <span className={\"suggestion-content \" + suggestion.twitter}>\n  //     <span className=\"name\">\n  //       {parts.map((part, index) => {\n  //         const className = part.highlight ? \"highlight\" : null;\n  //         return (\n  //           <span className={className} key={index}>\n  //             {part.text}\n  //           </span>\n  //         );\n  //       })}\n  //     </span>\n  //   </span>\n  // );\n}\n\nconst AutoComplete = ({\n  data, key\n}) => {\n  const [value, setValue] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n  console.log('key',key);\n  \n\n  const handleOnChange = (_, { newValue }) => setValue(newValue);\n  const onSuggestionsFetchRequested = ({ value }) => setSuggestions(getSuggestions(data, key, value));\n  const onSuggestionsClearRequested = () => setSuggestions([]);\n\n  const inputProps = {\n    placeholder: \"Add new item\",\n    value,\n    onChange: handleOnChange\n  };\n  return (\n    <Autosuggest\n      suggestions={suggestions}\n      onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n      onSuggestionsClearRequested={onSuggestionsClearRequested}\n      getSuggestionValue={getSuggestionValue}\n      renderSuggestion={renderSuggestion}\n      inputProps={inputProps}\n    />\n  );\n};\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}