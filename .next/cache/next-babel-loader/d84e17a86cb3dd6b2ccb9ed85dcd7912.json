{"ast":null,"code":"import Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\n\nconst escapeRegexCharacters = str => str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n\nexport const getSuggestionValue = suggestion => `${suggestion.first} ${suggestion.last}`;\nexport const getSuggestions = (data, key, value) => {\n  const escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === '') {\n    return [];\n  }\n\n  const regex = new RegExp('\\\\b' + escapedValue, 'i');\n  console.log(data.filter(el => regex.test(getSuggestionValue(el[key]))));\n  return data.filter(el => regex.test(getSuggestionValue(el[key])));\n}; // function renderSuggestion(suggestion, { query }) {\n//   const suggestionText = `${suggestion.first} ${suggestion.last}`;\n//   const matches = AutosuggestHighlightMatch(suggestionText, query);\n//   const parts = AutosuggestHighlightParse(suggestionText, matches);\n//   return (\n//     <span className={'suggestion-content ' + suggestion.twitter}>\n//       <span className=\"name\">\n//         {\n//           parts.map((part, index) => {\n//             const className = part.highlight ? 'highlight' : null;\n//             return (\n//               <span className={className} key={index}>{part.text}</span>\n//             );\n//           })\n//         }\n//       </span>\n//     </span>\n//   );\n// }\n// class App extends React.Component {\n//   constructor() {\n//     super();\n//     this.state = {\n//       value: '',\n//       suggestions: []\n//     };    \n//   }\n//   onChange = (event, { newValue, method }) => {\n//     this.setState({\n//       value: newValue\n//     });\n//   };\n//   onSuggestionsFetchRequested = ({ value }) => {\n//     this.setState({\n//       suggestions: getSuggestions(value)\n//     });\n//   };\n//   onSuggestionsClearRequested = () => {\n//     this.setState({\n//       suggestions: []\n//     });\n//   };\n//   render() {\n//     const { value, suggestions } = this.state;\n//     const inputProps = {\n//       placeholder: \"Type 'c'\",\n//       value,\n//       onChange: this.onChange\n//     };\n//     return (\n//       <Autosuggest \n//         suggestions={suggestions}\n//         onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n//         onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n//         getSuggestionValue={getSuggestionValue}\n//         renderSuggestion={renderSuggestion}\n//         inputProps={inputProps} />\n//     );\n//   }\n// }","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/helperFunctions.js"],"names":["Autosuggest","match","parse","escapeRegexCharacters","str","replace","getSuggestionValue","suggestion","first","last","getSuggestions","data","key","value","escapedValue","trim","regex","RegExp","console","log","filter","el","test"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;;AAEA,MAAMC,qBAAqB,GAAGC,GAAG,IAAIA,GAAG,CAACC,OAAJ,CAAY,qBAAZ,EAAmC,MAAnC,CAArC;;AAEA,OAAO,MAAMC,kBAAkB,GAAGC,UAAU,IAAK,GAAEA,UAAU,CAACC,KAAM,IAAGD,UAAU,CAACE,IAAK,EAAhF;AAEP,OAAO,MAAMC,cAAc,GAAG,CAACC,IAAD,EAAOC,GAAP,EAAYC,KAAZ,KAAsB;AAClD,QAAMC,YAAY,GAAGX,qBAAqB,CAACU,KAAK,CAACE,IAAN,EAAD,CAA1C;;AACA,MAAID,YAAY,KAAK,EAArB,EAAyB;AACvB,WAAO,EAAP;AACD;;AACD,QAAME,KAAK,GAAG,IAAIC,MAAJ,CAAW,QAAQH,YAAnB,EAAiC,GAAjC,CAAd;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYR,IAAI,CAACS,MAAL,CAAYC,EAAE,IAAIL,KAAK,CAACM,IAAN,CAAWhB,kBAAkB,CAACe,EAAE,CAACT,GAAD,CAAH,CAA7B,CAAlB,CAAZ;AAEA,SAAOD,IAAI,CAACS,MAAL,CAAYC,EAAE,IAAIL,KAAK,CAACM,IAAN,CAAWhB,kBAAkB,CAACe,EAAE,CAACT,GAAD,CAAH,CAA7B,CAAlB,CAAP;AACD,CATM,C,CAYP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\n\nconst escapeRegexCharacters = str => str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n\nexport const getSuggestionValue = suggestion => `${suggestion.first} ${suggestion.last}`\n\nexport const getSuggestions = (data, key, value) => {\n  const escapedValue = escapeRegexCharacters(value.trim());\n  if (escapedValue === '') {\n    return [];\n  }\n  const regex = new RegExp('\\\\b' + escapedValue, 'i');\n  console.log(data.filter(el => regex.test(getSuggestionValue(el[key]))));\n  \n  return data.filter(el => regex.test(getSuggestionValue(el[key])));\n}\n\n\n// function renderSuggestion(suggestion, { query }) {\n//   const suggestionText = `${suggestion.first} ${suggestion.last}`;\n//   const matches = AutosuggestHighlightMatch(suggestionText, query);\n//   const parts = AutosuggestHighlightParse(suggestionText, matches);\n\n//   return (\n//     <span className={'suggestion-content ' + suggestion.twitter}>\n//       <span className=\"name\">\n//         {\n//           parts.map((part, index) => {\n//             const className = part.highlight ? 'highlight' : null;\n\n//             return (\n//               <span className={className} key={index}>{part.text}</span>\n//             );\n//           })\n//         }\n//       </span>\n//     </span>\n//   );\n// }\n\n// class App extends React.Component {\n//   constructor() {\n//     super();\n\n//     this.state = {\n//       value: '',\n//       suggestions: []\n//     };    \n//   }\n\n//   onChange = (event, { newValue, method }) => {\n//     this.setState({\n//       value: newValue\n//     });\n//   };\n  \n//   onSuggestionsFetchRequested = ({ value }) => {\n//     this.setState({\n//       suggestions: getSuggestions(value)\n//     });\n//   };\n\n//   onSuggestionsClearRequested = () => {\n//     this.setState({\n//       suggestions: []\n//     });\n//   };\n\n//   render() {\n//     const { value, suggestions } = this.state;\n//     const inputProps = {\n//       placeholder: \"Type 'c'\",\n//       value,\n//       onChange: this.onChange\n//     };\n\n//     return (\n//       <Autosuggest \n//         suggestions={suggestions}\n//         onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n//         onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n//         getSuggestionValue={getSuggestionValue}\n//         renderSuggestion={renderSuggestion}\n//         inputProps={inputProps} />\n//     );\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}