{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { AutosuggestHighlightMatch, AutosuggestHighlightParse } from 'autosuggest-highlight';\nvar people = [{\n  first: 'Charlie',\n  last: 'Brown',\n  twitter: 'dancounsell'\n}, {\n  first: 'Charlotte',\n  last: 'White',\n  twitter: 'mtnmissy'\n}, {\n  first: 'Chloe',\n  last: 'Jones',\n  twitter: 'ladylexy'\n}, {\n  first: 'Cooper',\n  last: 'King',\n  twitter: 'steveodom'\n}]; // https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction getSuggestions(value) {\n  var escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === '') {\n    return [];\n  }\n\n  var regex = new RegExp('\\\\b' + escapedValue, 'i');\n  return people.filter(function (person) {\n    return regex.test(getSuggestionValue(person));\n  });\n}\n\nfunction getSuggestionValue(suggestion) {\n  return \"\".concat(suggestion.first, \" \").concat(suggestion.last);\n}\n\nfunction renderSuggestion(suggestion, _ref) {\n  var query = _ref.query;\n  var suggestionText = \"\".concat(suggestion.first, \" \").concat(suggestion.last);\n  var matches = AutosuggestHighlightMatch(suggestionText, query);\n  var parts = AutosuggestHighlightParse(suggestionText, matches);\n  return __jsx(\"span\", {\n    className: 'suggestion-content ' + suggestion.twitter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    className: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, parts.map(function (part, index) {\n    var className = part.highlight ? 'highlight' : null;\n    return __jsx(\"span\", {\n      className: className,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, part.text);\n  })));\n}\n\nvar AutoComplete =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AutoComplete, _React$Component);\n\n  function AutoComplete() {\n    var _this;\n\n    _classCallCheck(this, AutoComplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AutoComplete).call(this));\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (event, _ref2) {\n      var newValue = _ref2.newValue,\n          method = _ref2.method;\n\n      _this.setState({\n        value: newValue\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSuggestionsFetchRequested\", function (_ref3) {\n      var value = _ref3.value;\n\n      _this.setState({\n        suggestions: getSuggestions(value)\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSuggestionsClearRequested\", function () {\n      _this.setState({\n        suggestions: []\n      });\n    });\n\n    _this.state = {\n      value: '',\n      suggestions: []\n    };\n    return _this;\n  }\n\n  _createClass(AutoComplete, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions;\n      var inputProps = {\n        placeholder: \"Type 'c'\",\n        value: value,\n        onChange: this.onChange\n      };\n      return __jsx(Autosuggest, {\n        suggestions: suggestions,\n        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n        getSuggestionValue: getSuggestionValue,\n        renderSuggestion: renderSuggestion,\n        inputProps: inputProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return AutoComplete;\n}(React.Component);\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx"],"names":["React","Autosuggest","AutosuggestHighlightMatch","AutosuggestHighlightParse","people","first","last","twitter","escapeRegexCharacters","str","replace","getSuggestions","value","escapedValue","trim","regex","RegExp","filter","person","test","getSuggestionValue","suggestion","renderSuggestion","query","suggestionText","matches","parts","map","part","index","className","highlight","text","AutoComplete","event","newValue","method","setState","suggestions","state","inputProps","placeholder","onChange","onSuggestionsFetchRequested","onSuggestionsClearRequested","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { AutosuggestHighlightMatch, AutosuggestHighlightParse } from 'autosuggest-highlight'\n\nconst people = [\n  {\n    first: 'Charlie',\n    last: 'Brown',\n    twitter: 'dancounsell'\n  },\n  {\n    first: 'Charlotte',\n    last: 'White',\n    twitter: 'mtnmissy'\n  },\n  {\n    first: 'Chloe',\n    last: 'Jones',\n    twitter: 'ladylexy'\n  },\n  {\n    first: 'Cooper',\n    last: 'King',\n    twitter: 'steveodom'\n  }\n];\n\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction getSuggestions(value) {\n  const escapedValue = escapeRegexCharacters(value.trim());\n  \n  if (escapedValue === '') {\n    return [];\n  }\n\n  const regex = new RegExp('\\\\b' + escapedValue, 'i');\n  \n  return people.filter(person => regex.test(getSuggestionValue(person)));\n}\n\nfunction getSuggestionValue(suggestion) {\n  return `${suggestion.first} ${suggestion.last}`;\n}\n\nfunction renderSuggestion(suggestion, { query }) {\n  const suggestionText = `${suggestion.first} ${suggestion.last}`;\n  const matches = AutosuggestHighlightMatch(suggestionText, query);\n  const parts = AutosuggestHighlightParse(suggestionText, matches);\n\n  return (\n    <span className={'suggestion-content ' + suggestion.twitter}>\n      <span className=\"name\">\n        {\n          parts.map((part, index) => {\n            const className = part.highlight ? 'highlight' : null;\n            return (\n              <span className={className} key={index}>{part.text}</span>\n            );\n          })\n        }\n      </span>\n    </span>\n  );\n}\n\nclass AutoComplete extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };    \n  }\n\n  onChange = (event, { newValue, method }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n  \n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n    const inputProps = {\n      placeholder: \"Type 'c'\",\n      value,\n      onChange: this.onChange\n    };\n\n    return (\n      <Autosuggest \n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps} />\n    );\n  }\n}\n\nexport default AutoComplete"]},"metadata":{},"sourceType":"module"}