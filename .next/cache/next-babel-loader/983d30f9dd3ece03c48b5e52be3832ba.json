{"ast":null,"code":"var _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/BarChart.jsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport _ from 'lodash';\nimport { scaleBand, scaleLinear } from 'd3-scale';\nimport { select } from \"d3-selection\";\nimport { max } from 'd3-array';\nimport { colorGreen } from \"../styles\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { createUpdateSvg } from \"../../../utils\";\nimport { colorGrey } from \"../../../styles\";\nconst ChartWrapper = styled.div.withConfig({\n  displayName: \"BarChart__ChartWrapper\",\n  componentId: \"sc-1lmwodk-0\"\n})([\"height:100%;width:100%;border-left:1px solid \", \";rect{fill:\", \";}\"], colorGrey, colorGreen);\n\nconst BarChart = ({\n  data\n}) => {\n  const divRef = useRef();\n  const storedValues = useRef();\n  const prevData = usePrevious(data);\n  const {\n    0: init,\n    1: setInit\n  } = useState(false);\n  let initVis, updateData, updateDims;\n  const dims = useSvgResize(divRef);\n  const prevDims = usePrevious(dims);\n  useEffect(() => {\n    if (data && dims.height && dims.width && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims, init, initVis, prevData]);\n  useEffect(() => {}, [dims]);\n\n  initVis = () => {\n    const area = select(divRef.current);\n    const {\n      chartArea\n    } = createUpdateSvg({\n      area,\n      dims,\n      append: true\n    });\n    const yScale = scaleBand().domain(data.map(d => d.group)).range([0, dims.height]).paddingOuter(.2).paddingInner(.3);\n    const xScale = scaleLinear().domain([0, max(data, d => d.share)]).range([0, dims.width]);\n    storedValues.current = {\n      chartArea,\n      yScale,\n      xScale\n    };\n    updateData();\n  };\n\n  updateData = () => {\n    createUpdateRects();\n    createUpdateValueText();\n    createUpdateVariableText();\n  };\n\n  const createUpdateRects = () => {\n    const {\n      chartArea,\n      yScale,\n      xScale\n    } = storedValues.current;\n    console.log(yScale.domain());\n    console.log(xScale.domain());\n    console.log(data);\n    const rects = chartArea.selectAll('rect').data(data);\n    rects.enter().append('rect').attr('x', 0).attr('y', d => yScale(d.group)).attr('height', yScale.bandwidth()).attr('width', d => xScale(d.share));\n  };\n\n  const createUpdateValueText = () => {};\n\n  const createUpdateVariableText = () => {};\n\n  return __jsx(ChartWrapper, {\n    ref: divRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  });\n};\n\nexport default BarChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/BarChart.jsx"],"names":["React","useRef","useState","useEffect","styled","_","scaleBand","scaleLinear","select","max","colorGreen","useSvgResize","usePrevious","createUpdateSvg","colorGrey","ChartWrapper","div","BarChart","data","divRef","storedValues","prevData","init","setInit","initVis","updateData","updateDims","dims","prevDims","height","width","area","current","chartArea","append","yScale","domain","map","d","group","range","paddingOuter","paddingInner","xScale","share","createUpdateRects","createUpdateValueText","createUpdateVariableText","console","log","rects","selectAll","enter","attr","bandwidth"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport _ from 'lodash'\nimport { scaleBand, scaleLinear } from 'd3-scale'\nimport { select } from \"d3-selection\";\nimport { max } from 'd3-array'\n\nimport { colorGreen } from \"../styles\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { createUpdateSvg } from \"../../../utils\";\nimport { colorGrey } from \"../../../styles\";\n\nconst ChartWrapper = styled.div`\n  height: 100%;\n  width: 100%;\n\n  border-left: 1px solid ${colorGrey};\n\n  rect {\n    fill: ${colorGreen};\n  }\n`;\n\nconst BarChart = ({\n  data\n}) => {\n  const divRef = useRef()\n  const storedValues = useRef()\n  const prevData = usePrevious(data)\n  const [ init, setInit ] = useState(false)\n  let initVis, updateData, updateDims\n\n  const dims = useSvgResize(divRef)\n  const prevDims = usePrevious(dims)\n\n  useEffect(() => {\n    if(data && dims.height && dims.width && !init){\n      initVis()\n      setInit(true)\n    }\n  }, [data, dims, init, initVis, prevData])\n\n  useEffect(() => {\n\n  }, [dims])\n\n  initVis = () => {\n    const area = select(divRef.current)\n    const { chartArea } = createUpdateSvg({\n      area,\n      dims,\n      append: true\n    });\n\n    const yScale = scaleBand()\n      .domain(data.map(d => d.group))\n      .range([0, dims.height])\n      .paddingOuter(.2)\n      .paddingInner(.3)\n\n    const xScale = scaleLinear()\n      .domain([0, max(data, d => d.share)])\n      .range([0, dims.width])\n    \n    storedValues.current = {\n      chartArea,\n      yScale,\n      xScale\n    }\n    updateData()\n  }\n\n  updateData = () => {\n    createUpdateRects()\n    createUpdateValueText()\n    createUpdateVariableText()\n  }\n\n  const createUpdateRects = () => {\n    const { chartArea, yScale, xScale } = storedValues.current\n\n    console.log(yScale.domain());\n    console.log(xScale.domain());\n    console.log(data);\n\n    const rects = chartArea.selectAll('rect').data(data)\n\n    rects.enter()\n      .append('rect')\n      .attr('x', 0)\n      .attr('y', d => yScale(d.group))\n      .attr('height', yScale.bandwidth())\n      .attr('width', d => xScale(d.share))\n\n  }\n\n  const createUpdateValueText = () => {\n\n  }\n\n  const createUpdateVariableText = () => {\n    \n  }\n\n\n  return <ChartWrapper ref={divRef} />;\n};\n\nexport default BarChart;\n"]},"metadata":{},"sourceType":"module"}