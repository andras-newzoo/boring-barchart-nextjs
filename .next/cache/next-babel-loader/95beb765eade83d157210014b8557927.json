{"ast":null,"code":"var _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useSvgResize } from '../../../hooks';\nimport { testBorder } from '../../../styles';\nimport { select } from 'd3-selection';\nconst ChartWrapper = styled.div`\n  position: relative;\n  ${testBorder};\n  height: 100%;\n  width: 100%;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst PercentageChart = ({\n  data\n}) => {\n  const svgRef = useRef();\n  const {\n    0: init,\n    1: setInit\n  } = useState(false);\n  const dims = useSvgResize(svgRef);\n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init]);\n  useEffect(() => {//console.log('dims', dims)\n  }, [dims]);\n  useEffect(() => {//console.log('data', data)\n  }, [data]);\n\n  const initVis = () => {\n    const svg = select(svgRef.current);\n    console.log(svg);\n  };\n\n  const updateData = () => {};\n\n  const resetChart = () => {};\n\n  const updateDims = () => {};\n\n  return __jsx(ChartWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }));\n};\n\nexport default PercentageChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx"],"names":["React","useRef","useEffect","useState","styled","useSvgResize","testBorder","select","ChartWrapper","div","PercentageChart","data","svgRef","init","setInit","dims","width","height","initVis","svg","current","console","log","updateData","resetChart","updateDims"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA,MAAMC,YAAY,GAAGJ,MAAM,CAACK,GAAI;;IAE5BH,UAAW;;;;;;;;;CAFf;;AAaA,MAAMI,eAAe,GAAG,CAAC;AACvBC,EAAAA;AADuB,CAAD,KAElB;AACJ,QAAMC,MAAM,GAAGX,MAAM,EAArB;AACA,QAAM;AAAA,OAAEY,IAAF;AAAA,OAAQC;AAAR,MAAoBX,QAAQ,CAAC,KAAD,CAAlC;AAEA,QAAMY,IAAI,GAAGV,YAAY,CAACO,MAAD,CAAzB;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGa,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACE,MAAnB,IAA6BN,IAA7B,IAAqC,CAACE,IAAzC,EAA+C;AAC7CK,MAAAA,OAAO;AACPJ,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,GALQ,EAKP,CAACH,IAAD,EAAOI,IAAI,CAACE,MAAZ,EAAoBF,IAAI,CAACC,KAAzB,EAAgCH,IAAhC,CALO,CAAT;AAOAX,EAAAA,SAAS,CAAC,MAAM,CACd;AACD,GAFQ,EAEN,CAACa,IAAD,CAFM,CAAT;AAKAb,EAAAA,SAAS,CAAC,MAAM,CACd;AACD,GAFQ,EAEN,CAACS,IAAD,CAFM,CAAT;;AAIA,QAAMO,OAAO,GAAG,MAAM;AAEpB,UAAMC,GAAG,GAAGZ,MAAM,CAACK,MAAM,CAACQ,OAAR,CAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AAGD,GAND;;AAQA,QAAMI,UAAU,GAAG,MAAM,CAExB,CAFD;;AAIA,QAAMC,UAAU,GAAG,MAAM,CAExB,CAFD;;AAIA,QAAMC,UAAU,GAAG,MAAM,CAExB,CAFD;;AAMA,SACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,EAAEb,MADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAOD,CArDD;;AAuDA,eAAeF,eAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport styled from 'styled-components'\nimport { useSvgResize } from '../../../hooks';\nimport { testBorder } from '../../../styles';\nimport { select } from 'd3-selection'\n\nconst ChartWrapper = styled.div`\n  position: relative;\n  ${testBorder};\n  height: 100%;\n  width: 100%;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n`\n\nconst PercentageChart = ({\n  data\n}) => {\n  const svgRef = useRef() \n  const [ init, setInit ] = useState(false)\n\n  const dims = useSvgResize(svgRef)\n\n  useEffect(() => {\n    if(dims.width && dims.height && data && !init ){\n      initVis()\n      setInit(true)\n    }\n  },[data, dims.height, dims.width, init])\n\n  useEffect(() => {\n    //console.log('dims', dims)\n  }, [dims])\n\n\n  useEffect(() => {\n    //console.log('data', data)\n  }, [data])\n\n  const initVis = () => {\n\n    const svg = select(svgRef.current)\n    console.log(svg);\n    \n\n  }\n\n  const updateData = () => {\n\n  }\n\n  const resetChart = () => {\n\n  }\n\n  const updateDims = () => {\n\n  }\n\n\n  \n  return (\n    <ChartWrapper>\n      <svg\n        ref={svgRef}\n      />\n    </ChartWrapper>\n  )\n}\n\nexport default PercentageChart"]},"metadata":{},"sourceType":"module"}