{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyDark } from \"../styles\";\nimport { easeCubicInOut } from \"d3-ease\";\nimport \"d3-transition\";\nimport { createUpdateSvg } from \"../../../utils\";\nvar ChartWrapper = styled.div.withConfig({\n  displayName: \"PercentageChart__ChartWrapper\",\n  componentId: \"sc-18c8aar-0\"\n})([\"position:relative;height:70%;width:90%;border:1px solid \", \";border-radius:20px;overflow:hidden;svg{position:absolute;rect{fill:\", \";}}\"], colorGreyDark, colorGreen);\n\nvar PercentageChart = function PercentageChart(_ref) {\n  var data = _ref.data,\n      fullCount = _ref.fullCount,\n      _ref$updateDuration = _ref.updateDuration,\n      updateDuration = _ref$updateDuration === void 0 ? 1000 : _ref$updateDuration,\n      _ref$resetDelay = _ref.resetDelay,\n      resetDelay = _ref$resetDelay === void 0 ? 500 : _ref$resetDelay;\n  var divRef = useRef();\n  var storedValues = useRef();\n  var prevData = usePrevious(data);\n  var prevCount = usePrevious(fullCount);\n\n  var _useState = useState(false),\n      init = _useState[0],\n      setInit = _useState[1];\n\n  var initVis, resetChart, updateRect;\n  var dims = useSvgResize(divRef);\n  useEffect(function () {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n  useEffect(function () {//console.log('dims', dims)\n  }, [dims]);\n  useEffect(function () {\n    if (init && prevData !== data) {\n      if (prevCount !== fullCount) {\n        resetChart();\n        updateRect(resetDelay * 2);\n      } else {\n        updateRect();\n      }\n    }\n  }, [data, init, prevData, fullCount, prevCount, resetChart, updateDuration, resetDelay, updateRect]);\n\n  initVis = function initVis() {\n    var area = select(divRef.current);\n\n    var _createUpdateSvg = createUpdateSvg({\n      area: area,\n      dims: _objectSpread({}, dims, {\n        height: dims.height\n      }),\n      append: true\n    }),\n        chartArea = _createUpdateSvg.chartArea;\n\n    chartArea.append(\"rect\").attr(\"x\", 0).attr(\"y\", 0).attr(\"height\", dims.height).attr(\"width\", 0);\n    storedValues.current = {\n      area: area,\n      chartArea: chartArea\n    };\n    updateRect();\n  };\n\n  resetChart = function resetChart() {\n    var chartArea = storedValues.current.chartArea;\n    chartArea.select(\"rect\").transition().duration(resetDelay).ease(easeCubicInOut).attr(\"width\", dims.width).transition().delay(resetDelay).duration(0).attr(\"width\", 0);\n  };\n\n  var updateDims = function updateDims() {};\n\n  updateRect = useCallback(function () {\n    var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var chartArea = storedValues.current.chartArea;\n    console.log(delay);\n    chartArea.select(\"rect\").transition(\"update\").delay(delay).duration(updateDuration).ease(easeCubicInOut).attr(\"width\", dims.width * (data - fullCount));\n  }, [data, dims.width, fullCount, updateDuration]);\n  return __jsx(ChartWrapper, {\n    ref: divRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  });\n};\n\nexport default PercentageChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx"],"names":["React","useRef","useEffect","useState","useCallback","styled","useSvgResize","usePrevious","select","colorGreen","colorGreyDark","easeCubicInOut","createUpdateSvg","ChartWrapper","div","PercentageChart","data","fullCount","updateDuration","resetDelay","divRef","storedValues","prevData","prevCount","init","setInit","initVis","resetChart","updateRect","dims","width","height","area","current","append","chartArea","attr","transition","duration","ease","delay","updateDims","console","log"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyDark } from \"../styles\";\nimport { easeCubicInOut } from \"d3-ease\";\nimport \"d3-transition\";\nimport { createUpdateSvg } from \"../../../utils\";\n\nconst ChartWrapper = styled.div`\n  position: relative;\n  height: 70%;\n  width: 90%;\n\n  border: 1px solid ${colorGreyDark};\n\n  border-radius: 20px;\n  overflow: hidden;\n\n  svg {\n    position: absolute;\n\n    rect {\n      fill: ${colorGreen};\n    }\n  }\n`;\n\nconst PercentageChart = ({\n  data,\n  fullCount,\n  updateDuration = 1000,\n  resetDelay = 500\n}) => {\n  const divRef = useRef();\n  const storedValues = useRef();\n  const prevData = usePrevious(data);\n  const prevCount = usePrevious(fullCount);\n  const [init, setInit] = useState(false);\n  let initVis, resetChart, updateRect\n\n  const dims = useSvgResize(divRef);\n\n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n\n  useEffect(() => {\n    //console.log('dims', dims)\n  }, [dims]);\n\n  useEffect(() => {\n    if (init && prevData !== data) {\n      if (prevCount !== fullCount) {\n        resetChart();\n        updateRect(resetDelay * 2);\n      } else {\n        updateRect();\n      }\n    }\n  }, [data, init, prevData, fullCount, prevCount, resetChart, updateDuration, resetDelay, updateRect]);\n\n  initVis = () => {\n    const area = select(divRef.current);\n    const { chartArea } = createUpdateSvg({\n      area,\n      dims: { ...dims, height: dims.height },\n      append: true\n    });\n\n    chartArea\n      .append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"height\", dims.height)\n      .attr(\"width\", 0);\n\n    storedValues.current = {\n      area,\n      chartArea\n    };\n\n    updateRect();\n  };\n\n  resetChart = () => {\n    const { chartArea } = storedValues.current;\n    chartArea\n      .select(\"rect\")\n      .transition()\n      .duration(resetDelay)\n      .ease(easeCubicInOut)\n      .attr(\"width\", dims.width)\n      .transition()\n      .delay(resetDelay)\n      .duration(0)\n      .attr(\"width\", 0);\n  };\n\n  const updateDims = () => {};\n\n  updateRect = useCallback((delay = 0) => {\n    const { chartArea } = storedValues.current;\n    console.log(delay);\n    \n    chartArea\n      .select(\"rect\")\n      .transition(\"update\")\n      .delay(delay)\n      .duration(updateDuration)\n      .ease(easeCubicInOut)\n      .attr(\"width\", dims.width * (data - fullCount));\n  }, [data, dims.width, fullCount, updateDuration]);\n\n  return <ChartWrapper ref={divRef} />;\n};\n\nexport default PercentageChart;\n"]},"metadata":{},"sourceType":"module"}