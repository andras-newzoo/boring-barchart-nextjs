{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Set from \"@babel/runtime-corejs2/core-js/set\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { createSelector } from \"reselect\";\nimport _ from \"lodash\";\n\nvar selectGroupList = function selectGroupList(state) {\n  return state.furnitureBankReducer.groups;\n};\n\nvar selectFurnitureList = function selectFurnitureList(state) {\n  return state.furnitureBankReducer.productList;\n};\n\nvar selectedAllSelected = function selectedAllSelected(state) {\n  return state.furnitureBankReducer.selectedItems;\n};\n\nvar selectAllDonation = function selectAllDonation(state) {\n  return state.furnitureBankReducer.donationsData;\n};\n\nvar selectAllFamily = function selectAllFamily(state) {\n  return state.furnitureBankReducer.familyData;\n};\n\nvar selectAllCoordinates = function selectAllCoordinates(state) {\n  return state.furnitureBankReducer.coordinatesData;\n}; //* Array of all selected items\n\n\nexport var selectAllSelected = createSelector(selectedAllSelected, function (selectedList) {\n  return selectedList.map(function (el) {\n    return el.name;\n  });\n});\nexport var selectTotalQuantity = createSelector(selectedAllSelected, function (selectedList) {\n  return selectedList.reduce(function (acc, curr) {\n    return acc + curr.quantity;\n  }, 0);\n});\nexport var selectAllUnselected = createSelector(selectFurnitureList, selectAllSelected, function (totalList, allSelected) {\n  return totalList.filter(function (el) {\n    return !allSelected.map(function (el) {\n      return el.toLowerCase();\n    }).includes(el.product_name.toLowerCase());\n  });\n}); //* Get relevant postal code list\n\nexport var selectFilteredDonationPostalCode = createSelector(selectAllDonation, selectAllSelected, function (donations, selectedItems) {\n  return donations.filter(function (el) {\n    return selectedItems.includes(el.product_name);\n  });\n}); //* Get family data for postal codes\n\nexport var selectFilteredFamilies = createSelector(selectAllFamily, selectFilteredDonationPostalCode, function (families, selectedPostalCodes) {\n  return families.filter(function (el) {\n    return selectedPostalCodes.includes(el.postal_code);\n  });\n}); //* Get coordinates for filtere items\n\nexport var selectFilteredCoordinates = createSelector(selectAllCoordinates, selectFilteredDonationPostalCode, function (coordinates, selectedPostalCodes) {\n  return selectedPostalCodes.map(function (el) {\n    return _objectSpread({}, el, {\n      coors: coordinates.find(function (d) {\n        return d.postal_code === el.postal_code;\n      })\n    });\n  });\n}); //* Get unique list of postal codes\n\nexport var selectUniqueCoordinates = createSelector(selectFilteredDonationPostalCode, function (filteredPostalCodes) {\n  return _toConsumableArray(new _Set(filteredPostalCodes.map(function (el) {\n    return el.postal_code;\n  })));\n}); //* Get families from filtered postal codes\n\nexport var selectPostalCodeFamilies = createSelector(selectUniqueCoordinates, selectAllFamily, function (postalCodes, families) {\n  return families.filter(function (el) {\n    return postalCodes.includes(el.postal_code);\n  });\n}); //* Top Groups\n\nexport var selectGroups = createSelector(selectPostalCodeFamilies, function (families) {\n  return _.groupBy(families, \"segment\");\n});\nexport var selectTopGroups = createSelector(selectGroups, selectGroupList, selectPostalCodeFamilies, function (groups, groupList, total) {\n  return groupList.map(function (el) {\n    return groups[el] ? {\n      group: el,\n      share: groups[el].length / total.length\n    } : {\n      group: el,\n      share: 0\n    };\n  });\n}); //* Persons\n\nexport var selectAdults = createSelector(selectPostalCodeFamilies, function (families) {\n  return _.mean(families.map(function (el) {\n    return _parseInt(el.adults) || 0;\n  }));\n});\nexport var selectChildren = createSelector(selectPostalCodeFamilies, function (families) {\n  return _.mean(families.map(function (el) {\n    return _parseInt(el.children) || 0;\n  }));\n});","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/store/furnitureBankReducer/selectors.js"],"names":["createSelector","_","selectGroupList","state","furnitureBankReducer","groups","selectFurnitureList","productList","selectedAllSelected","selectedItems","selectAllDonation","donationsData","selectAllFamily","familyData","selectAllCoordinates","coordinatesData","selectAllSelected","selectedList","map","el","name","selectTotalQuantity","reduce","acc","curr","quantity","selectAllUnselected","totalList","allSelected","filter","toLowerCase","includes","product_name","selectFilteredDonationPostalCode","donations","selectFilteredFamilies","families","selectedPostalCodes","postal_code","selectFilteredCoordinates","coordinates","coors","find","d","selectUniqueCoordinates","filteredPostalCodes","selectPostalCodeFamilies","postalCodes","selectGroups","groupBy","selectTopGroups","groupList","total","group","share","length","selectAdults","mean","adults","selectChildren","children"],"mappings":"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","sourcesContent":["import { createSelector } from \"reselect\";\nimport _ from \"lodash\";\n\nconst selectGroupList = state => state.furnitureBankReducer.groups;\nconst selectFurnitureList = state => state.furnitureBankReducer.productList;\nconst selectedAllSelected = state => state.furnitureBankReducer.selectedItems;\nconst selectAllDonation = state => state.furnitureBankReducer.donationsData;\nconst selectAllFamily = state => state.furnitureBankReducer.familyData;\nconst selectAllCoordinates = state =>\n  state.furnitureBankReducer.coordinatesData;\n\n//* Array of all selected items\nexport const selectAllSelected = createSelector(\n  selectedAllSelected,\n  selectedList => selectedList.map(el => el.name)\n);\n\nexport const selectTotalQuantity = createSelector(\n  selectedAllSelected,\n  selectedList => selectedList.reduce((acc, curr) => acc + curr.quantity, 0)\n);\n\nexport const selectAllUnselected = createSelector(\n  selectFurnitureList,\n  selectAllSelected,\n  (totalList, allSelected) =>\n    totalList.filter(\n      el =>\n        !allSelected\n          .map(el => el.toLowerCase())\n          .includes(el.product_name.toLowerCase())\n    )\n);\n\n//* Get relevant postal code list\nexport const selectFilteredDonationPostalCode = createSelector(\n  selectAllDonation,\n  selectAllSelected,\n  (donations, selectedItems) =>\n    donations.filter(el => selectedItems.includes(el.product_name))\n);\n\n//* Get family data for postal codes\nexport const selectFilteredFamilies = createSelector(\n  selectAllFamily,\n  selectFilteredDonationPostalCode,\n  (families, selectedPostalCodes) =>\n    families.filter(el => selectedPostalCodes.includes(el.postal_code))\n);\n\n//* Get coordinates for filtere items\nexport const selectFilteredCoordinates = createSelector(\n  selectAllCoordinates,\n  selectFilteredDonationPostalCode,\n  (coordinates, selectedPostalCodes) =>\n    selectedPostalCodes.map(el => ({\n      ...el,\n      coors: coordinates.find(d => d.postal_code === el.postal_code)\n    }))\n);\n\n//* Get unique list of postal codes\nexport const selectUniqueCoordinates = createSelector(\n  selectFilteredDonationPostalCode,\n  filteredPostalCodes => [\n    ...new Set(filteredPostalCodes.map(el => el.postal_code))\n  ]\n);\n\n//* Get families from filtered postal codes\nexport const selectPostalCodeFamilies = createSelector(\n  selectUniqueCoordinates,\n  selectAllFamily,\n  (postalCodes, families) =>\n    families.filter(el => postalCodes.includes(el.postal_code))\n);\n\n//* Top Groups\nexport const selectGroups = createSelector(\n  selectPostalCodeFamilies,\n  families => _.groupBy(families, \"segment\")\n);\nexport const selectTopGroups = createSelector(\n  selectGroups,\n  selectGroupList,\n  selectPostalCodeFamilies,\n  (groups, groupList, total) =>\n    groupList.map(el =>\n      groups[el]\n        ? { group: el, share: groups[el].length / total.length }\n        : { group: el, share: 0 }\n    )\n);\n\n//* Persons\nexport const selectAdults = createSelector(\n  selectPostalCodeFamilies,\n  families => _.mean(families.map(el => parseInt(el.adults) || 0 ))\n)\nexport const selectChildren = createSelector(\n  selectPostalCodeFamilies,\n  families => _.mean(families.map(el => parseInt(el.children) || 0 ))\n)\n"]},"metadata":{},"sourceType":"module"}