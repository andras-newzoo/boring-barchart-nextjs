{"ast":null,"code":"var _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyLight } from \"../styles\";\nconst ChartWrapper = styled.div`\n  position: relative;\n  height: 80%;\n  width: 90%;\n\n  border: 1px solid ${colorGreyLight};\n\n  border-radius: 20px;\n  overflow: hidden;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n\n    rect {\n      fill: ${colorGreen};\n    }\n  }\n`;\n\nconst PercentageChart = ({\n  data\n}) => {\n  const svgRef = useRef();\n  const storedValues = useRef();\n  const {\n    0: init,\n    1: setInit\n  } = useState(false);\n  let initVis;\n  const dims = useSvgResize(svgRef);\n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n  useEffect(() => {//console.log('dims', dims)\n  }, [dims]);\n  useEffect(() => {\n    if (initVis) {\n      updateData();\n    }\n  }, [data, initVis]);\n\n  initVis = () => {\n    const svg = select(svgRef.current);\n    svg.append(\"g\").attr(\"class\", \"chart-area\");\n    const chartArea = select(\".chart-area\");\n    chartArea.append('rect').attr('x', 0).attr('y', 0).attr('height', dims.height).attr('width', dims.width * data);\n    storedValues.current = {\n      chartArea\n    };\n  };\n\n  const updateData = () => {};\n\n  const resetChart = () => {};\n\n  const updateDims = () => {};\n\n  const createUpdateRect = () => {\n    const {\n      chartArea\n    } = storedValues.current;\n    chartArea.select('rect').transition('update').duration(1000).attr('width', dims.width * data);\n  };\n\n  return __jsx(ChartWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, __jsx(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }));\n};\n\nexport default PercentageChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx"],"names":["React","useRef","useEffect","useState","styled","useSvgResize","select","colorGreen","colorGreyLight","ChartWrapper","div","PercentageChart","data","svgRef","storedValues","init","setInit","initVis","dims","width","height","updateData","svg","current","append","attr","chartArea","resetChart","updateDims","createUpdateRect","transition","duration"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,WAA3C;AAEA,MAAMC,YAAY,GAAGL,MAAM,CAACM,GAAI;;;;;sBAKVF,cAAe;;;;;;;;;;;cAWvBD,UAAW;;;CAhBzB;;AAqBA,MAAMI,eAAe,GAAG,CAAC;AACvBC,EAAAA;AADuB,CAAD,KAElB;AACJ,QAAMC,MAAM,GAAGZ,MAAM,EAArB;AACA,QAAMa,YAAY,GAAGb,MAAM,EAA3B;AACA,QAAM;AAAA,OAACc,IAAD;AAAA,OAAOC;AAAP,MAAkBb,QAAQ,CAAC,KAAD,CAAhC;AACA,MAAIc,OAAJ;AAEA,QAAMC,IAAI,GAAGb,YAAY,CAACQ,MAAD,CAAzB;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACE,MAAnB,IAA6BR,IAA7B,IAAqC,CAACG,IAA1C,EAAgD;AAC9CE,MAAAA,OAAO;AACPD,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,GALQ,EAKN,CAACJ,IAAD,EAAOM,IAAI,CAACE,MAAZ,EAAoBF,IAAI,CAACC,KAAzB,EAAgCJ,IAAhC,EAAsCE,OAAtC,CALM,CAAT;AAOAf,EAAAA,SAAS,CAAC,MAAM,CACd;AACD,GAFQ,EAEN,CAACgB,IAAD,CAFM,CAAT;AAIAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGe,OAAH,EAAW;AACTI,MAAAA,UAAU;AACX;AACF,GAJQ,EAIN,CAACT,IAAD,EAAOK,OAAP,CAJM,CAAT;;AAMAA,EAAAA,OAAO,GAAG,MAAM;AACd,UAAMK,GAAG,GAAGhB,MAAM,CAACO,MAAM,CAACU,OAAR,CAAlB;AACAD,IAAAA,GAAG,CACAE,MADH,CACU,GADV,EAEGC,IAFH,CAEQ,OAFR,EAEiB,YAFjB;AAGA,UAAMC,SAAS,GAAGpB,MAAM,CAAC,aAAD,CAAxB;AACAoB,IAAAA,SAAS,CACNF,MADH,CACU,MADV,EAEGC,IAFH,CAEQ,GAFR,EAEa,CAFb,EAGGA,IAHH,CAGQ,GAHR,EAGa,CAHb,EAIGA,IAJH,CAIQ,QAJR,EAIkBP,IAAI,CAACE,MAJvB,EAKGK,IALH,CAKQ,OALR,EAKiBP,IAAI,CAACC,KAAL,GAAaP,IAL9B;AAOAE,IAAAA,YAAY,CAACS,OAAb,GAAuB;AACrBG,MAAAA;AADqB,KAAvB;AAGD,GAhBD;;AAkBA,QAAML,UAAU,GAAG,MAAM,CAAE,CAA3B;;AAEA,QAAMM,UAAU,GAAG,MAAM,CAAE,CAA3B;;AAEA,QAAMC,UAAU,GAAG,MAAM,CAAE,CAA3B;;AAEA,QAAMC,gBAAgB,GAAG,MAAM;AAC7B,UAAM;AAAEH,MAAAA;AAAF,QAAgBZ,YAAY,CAACS,OAAnC;AACAG,IAAAA,SAAS,CAACpB,MAAV,CAAiB,MAAjB,EACGwB,UADH,CACc,QADd,EAEGC,QAFH,CAEY,IAFZ,EAGGN,IAHH,CAGQ,OAHR,EAGiBP,IAAI,CAACC,KAAL,GAAaP,IAH9B;AAID,GAND;;AAQA,SACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAEC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAhED;;AAkEA,eAAeF,eAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyLight } from \"../styles\";\n\nconst ChartWrapper = styled.div`\n  position: relative;\n  height: 80%;\n  width: 90%;\n\n  border: 1px solid ${colorGreyLight};\n\n  border-radius: 20px;\n  overflow: hidden;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n\n    rect {\n      fill: ${colorGreen};\n    }\n  }\n`;\n\nconst PercentageChart = ({ \n  data\n}) => {\n  const svgRef = useRef();\n  const storedValues = useRef();\n  const [init, setInit] = useState(false);\n  let initVis\n\n  const dims = useSvgResize(svgRef);\n\n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n\n  useEffect(() => {\n    //console.log('dims', dims)\n  }, [dims]);\n\n  useEffect(() => {\n    if(initVis){\n      updateData()\n    }\n  }, [data, initVis]);\n\n  initVis = () => {\n    const svg = select(svgRef.current);\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"chart-area\")\n    const chartArea = select(\".chart-area\");\n    chartArea\n      .append('rect')\n      .attr('x', 0)\n      .attr('y', 0)\n      .attr('height', dims.height)\n      .attr('width', dims.width * data)\n\n    storedValues.current = {\n      chartArea\n    };\n  };\n\n  const updateData = () => {};\n\n  const resetChart = () => {};\n\n  const updateDims = () => {};\n\n  const createUpdateRect = () => {\n    const { chartArea } = storedValues.current\n    chartArea.select('rect')\n      .transition('update')\n      .duration(1000)\n      .attr('width', dims.width * data)\n  }\n\n  return (\n    <ChartWrapper>\n      <svg ref={svgRef} />\n    </ChartWrapper>\n  );\n};\n\nexport default PercentageChart;\n"]},"metadata":{},"sourceType":"module"}