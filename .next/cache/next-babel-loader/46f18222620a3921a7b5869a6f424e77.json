{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyDark } from \"../styles\";\nimport { easeCubicInOut } from \"d3-ease\";\nimport \"d3-transition\";\nimport { createUpdateSvg } from \"../../../utils\";\nconst ChartWrapper = styled.div.withConfig({\n  displayName: \"PercentageChart__ChartWrapper\",\n  componentId: \"sc-18c8aar-0\"\n})([\"position:relative;height:70%;width:90%;border:1px solid \", \";border-radius:20px;overflow:hidden;svg{position:absolute;rect{fill:\", \";}}\"], colorGreyDark, colorGreen);\n\nconst PercentageChart = ({\n  data,\n  fullCount,\n  updateDuration = 1000,\n  resetDelay = 500\n}) => {\n  const divRef = useRef();\n  const storedValues = useRef();\n  const prevData = usePrevious(data);\n  const prevCount = usePrevious(fullCount);\n  const {\n    0: init,\n    1: setInit\n  } = useState(false);\n  let initVis, resetChart, updateRect;\n  const dims = useSvgResize(divRef);\n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n  useEffect(() => {//console.log('dims', dims)\n  }, [dims]);\n  useEffect(() => {\n    if (init && prevData !== data) {\n      if (prevCount !== fullCount) {\n        resetChart();\n        updateRect({\n          delay: resetDelay\n        });\n      } else {\n        updateRect();\n      }\n    }\n  }, [data, init, prevData, fullCount, prevCount, resetChart, updateDuration, resetDelay, updateRect]);\n\n  initVis = () => {\n    const area = select(divRef.current);\n    const {\n      chartArea\n    } = createUpdateSvg({\n      area,\n      dims: _objectSpread({}, dims, {\n        height: dims.height\n      }),\n      append: true\n    });\n    chartArea.append(\"rect\").attr(\"x\", 0).attr(\"y\", 0).attr(\"height\", dims.height).attr(\"width\", 0);\n    storedValues.current = {\n      area,\n      chartArea\n    };\n    updateRect();\n  };\n\n  resetChart = () => {\n    const {\n      chartArea\n    } = storedValues.current;\n    chartArea.select(\"rect\").transition(\"toFull\").duration(resetDelay).ease(easeCubicInOut).attr(\"width\", dims.width).transition(\"toZero\").delay(resetDelay).duration(0).attr(\"width\", 0);\n  };\n\n  const updateDims = () => {};\n\n  updateRect = ({\n    duration = 1000,\n    delay = 0\n  }) => {\n    const {\n      chartArea\n    } = storedValues.current;\n    console.log(duration);\n    chartArea.select(\"rect\").transition(\"update\").duration(duration).ease(easeCubicInOut).delay(delay).attr(\"width\", dims.width * (data - fullCount));\n  };\n\n  return __jsx(ChartWrapper, {\n    ref: divRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  });\n};\n\nexport default PercentageChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx"],"names":["React","useRef","useEffect","useState","styled","useSvgResize","usePrevious","select","colorGreen","colorGreyDark","easeCubicInOut","createUpdateSvg","ChartWrapper","div","PercentageChart","data","fullCount","updateDuration","resetDelay","divRef","storedValues","prevData","prevCount","init","setInit","initVis","resetChart","updateRect","dims","width","height","delay","area","current","chartArea","append","attr","transition","duration","ease","updateDims","console","log"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyDark } from \"../styles\";\nimport { easeCubicInOut } from \"d3-ease\";\nimport \"d3-transition\";\nimport { createUpdateSvg } from \"../../../utils\";\n\nconst ChartWrapper = styled.div`\n  position: relative;\n  height: 70%;\n  width: 90%;\n\n  border: 1px solid ${colorGreyDark};\n\n  border-radius: 20px;\n  overflow: hidden;\n\n  svg {\n    position: absolute;\n\n    rect {\n      fill: ${colorGreen};\n    }\n  }\n`;\n\nconst PercentageChart = ({\n  data,\n  fullCount,\n  updateDuration = 1000,\n  resetDelay = 500\n}) => {\n  const divRef = useRef();\n  const storedValues = useRef();\n  const prevData = usePrevious(data);\n  const prevCount = usePrevious(fullCount);\n  const [init, setInit] = useState(false);\n  let initVis, resetChart, updateRect;\n\n  const dims = useSvgResize(divRef);\n\n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n\n  useEffect(() => {\n    //console.log('dims', dims)\n  }, [dims]);\n\n  useEffect(() => {\n    if (init && prevData !== data) {\n      if (prevCount !== fullCount) {\n        resetChart();\n        updateRect({ delay: resetDelay });\n      } else {\n        updateRect();\n      }\n    }\n  }, [data, init, prevData, fullCount, prevCount, resetChart, updateDuration, resetDelay, updateRect]);\n\n  initVis = () => {\n    const area = select(divRef.current);\n    const { chartArea } = createUpdateSvg({\n      area,\n      dims: { ...dims, height: dims.height },\n      append: true\n    });\n\n    chartArea\n      .append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"height\", dims.height)\n      .attr(\"width\", 0);\n\n    storedValues.current = {\n      area,\n      chartArea\n    };\n\n    updateRect();\n  };\n\n  resetChart = () => {\n    const { chartArea } = storedValues.current;\n    chartArea\n      .select(\"rect\")\n      .transition(\"toFull\")\n      .duration(resetDelay)\n      .ease(easeCubicInOut)\n      .attr(\"width\", dims.width)\n      .transition(\"toZero\")\n      .delay(resetDelay)\n      .duration(0)\n      .attr(\"width\", 0);\n  };\n\n  const updateDims = () => {};\n\n  updateRect = ({ duration = 1000, delay = 0 }) => {\n    const { chartArea } = storedValues.current;\n    console.log(duration);\n    chartArea\n      .select(\"rect\")\n      .transition(\"update\")\n      .duration(duration)\n      .ease(easeCubicInOut)\n      .delay(delay)\n      .attr(\"width\", dims.width * (data - fullCount));\n  };\n\n  return <ChartWrapper ref={divRef} />;\n};\n\nexport default PercentageChart;\n"]},"metadata":{},"sourceType":"module"}