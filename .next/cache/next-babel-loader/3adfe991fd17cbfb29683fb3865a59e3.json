{"ast":null,"code":"var _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport _ from 'lodash';\nimport { select } from \"d3-selection\";\nimport { easeCubicInOut } from \"d3-ease\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { colorGreen } from \"../styles\";\nimport \"d3-transition\";\nimport { createUpdateSvg } from \"../../../utils\";\nconst ChartWrapper = styled.div.withConfig({\n  displayName: \"PercentageChart__ChartWrapper\",\n  componentId: \"sc-18c8aar-0\"\n})([\"position:relative;height:100%;width:90%;border:1px solid \", \";border-radius:20px;overflow:hidden;svg{position:absolute;rect{fill:\", \";}}\"], colorGreen, colorGreen);\n\nconst PercentageChart = ({\n  data,\n  fullCount,\n  updateDuration = 1000,\n  resetDelay = 500\n}) => {\n  const divRef = useRef();\n  const storedValues = useRef();\n  const prevData = usePrevious(data);\n  const prevCount = usePrevious(fullCount);\n  const {\n    0: init,\n    1: setInit\n  } = useState(false);\n  let initVis, resetChart, updateRect, updateDims;\n  const dims = useSvgResize(divRef);\n  const prevDims = usePrevious(dims);\n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n  useEffect(() => {\n    if (init) {\n      !_.isEqual(dims !== prevDims);\n      updateDims();\n    }\n  });\n  useEffect(() => {\n    if (init && prevData !== data) {\n      prevCount < fullCount && resetChart('end');\n      fullCount < prevCount && resetChart('start');\n      fullCount === prevCount && updateRect();\n    }\n  }, [data, init, prevData, fullCount, prevCount, resetChart, updateDuration, resetDelay, updateRect, dims.width]);\n\n  initVis = () => {\n    const area = select(divRef.current);\n    const {\n      chartArea\n    } = createUpdateSvg({\n      area,\n      dims,\n      append: true\n    });\n    chartArea.append(\"rect\").attr(\"x\", 0).attr(\"y\", 0).attr(\"height\", dims.height).attr(\"width\", 0);\n    storedValues.current = {\n      area,\n      chartArea\n    };\n    updateRect();\n  };\n\n  updateDims = () => {\n    const {\n      chartArea\n    } = storedValues.current;\n    createUpdateSvg({\n      area: select(divRef.current),\n      dims,\n      update: true\n    });\n    chartArea.select(\"rect\").attr(\"height\", dims.height).attr(\"width\", dims.width * (data - fullCount));\n  };\n\n  resetChart = resetPoint => {\n    const {\n      chartArea\n    } = storedValues.current;\n    const toEnd = resetPoint === 'end';\n    chartArea.select(\"rect\").transition().duration(updateDuration / 2).ease(easeCubicInOut).attr(\"width\", toEnd ? dims.width : 0).transition().delay(resetDelay).duration(0).attr(\"width\", toEnd ? 0 : dims.width).transition().delay(updateDuration / 2).duration(updateDuration / 2).ease(easeCubicInOut).attr(\"width\", dims.width * (data - fullCount));\n  };\n\n  updateRect = () => {\n    const {\n      chartArea\n    } = storedValues.current;\n    console.log('running', updateDuration);\n    chartArea.select(\"rect\").transition(\"update\").duration(updateDuration).ease(easeCubicInOut).attr(\"width\", dims.width * (data - fullCount));\n  };\n\n  return __jsx(ChartWrapper, {\n    ref: divRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  });\n};\n\nexport default PercentageChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx"],"names":["React","useRef","useEffect","useState","styled","_","select","easeCubicInOut","useSvgResize","usePrevious","colorGreen","createUpdateSvg","ChartWrapper","div","PercentageChart","data","fullCount","updateDuration","resetDelay","divRef","storedValues","prevData","prevCount","init","setInit","initVis","resetChart","updateRect","updateDims","dims","prevDims","width","height","isEqual","area","current","chartArea","append","attr","update","resetPoint","toEnd","transition","duration","ease","delay","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,CAAP,MAAe,QAAf;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,cAAT,QAA+B,SAA/B;AAEA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,gBAA1C;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,OAAO,eAAP;AACA,SAASC,eAAT,QAAgC,gBAAhC;AAEA,MAAMC,YAAY,GAAGR,MAAM,CAACS,GAAV;AAAA;AAAA;AAAA,iJAKIH,UALJ,EAaJA,UAbI,CAAlB;;AAkBA,MAAMI,eAAe,GAAG,CAAC;AACvBC,EAAAA,IADuB;AAEvBC,EAAAA,SAFuB;AAGvBC,EAAAA,cAAc,GAAG,IAHM;AAIvBC,EAAAA,UAAU,GAAG;AAJU,CAAD,KAKlB;AACJ,QAAMC,MAAM,GAAGlB,MAAM,EAArB;AACA,QAAMmB,YAAY,GAAGnB,MAAM,EAA3B;AACA,QAAMoB,QAAQ,GAAGZ,WAAW,CAACM,IAAD,CAA5B;AACA,QAAMO,SAAS,GAAGb,WAAW,CAACO,SAAD,CAA7B;AACA,QAAM;AAAA,OAACO,IAAD;AAAA,OAAOC;AAAP,MAAkBrB,QAAQ,CAAC,KAAD,CAAhC;AACA,MAAIsB,OAAJ,EAAaC,UAAb,EAAyBC,UAAzB,EAAqCC,UAArC;AAEA,QAAMC,IAAI,GAAGrB,YAAY,CAACW,MAAD,CAAzB;AACA,QAAMW,QAAQ,GAAGrB,WAAW,CAACoB,IAAD,CAA5B;AAEA3B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI2B,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,MAAnB,IAA6BjB,IAA7B,IAAqC,CAACQ,IAA1C,EAAgD;AAC9CE,MAAAA,OAAO;AACPD,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,GALQ,EAKN,CAACT,IAAD,EAAOc,IAAI,CAACG,MAAZ,EAAoBH,IAAI,CAACE,KAAzB,EAAgCR,IAAhC,EAAsCE,OAAtC,CALM,CAAT;AAOAvB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqB,IAAJ,EAAS;AACP,OAAClB,CAAC,CAAC4B,OAAF,CAAUJ,IAAI,KAAKC,QAAnB,CAAD;AACAF,MAAAA,UAAU;AACX;AACF,GALQ,CAAT;AAOA1B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqB,IAAI,IAAIF,QAAQ,KAAKN,IAAzB,EAA+B;AAC7BO,MAAAA,SAAS,GAAGN,SAAZ,IAAyBU,UAAU,CAAC,KAAD,CAAnC;AACAV,MAAAA,SAAS,GAAGM,SAAZ,IAAyBI,UAAU,CAAC,OAAD,CAAnC;AACAV,MAAAA,SAAS,KAAKM,SAAd,IAA2BK,UAAU,EAArC;AACD;AACF,GANQ,EAMN,CAACZ,IAAD,EAAOQ,IAAP,EAAaF,QAAb,EAAuBL,SAAvB,EAAkCM,SAAlC,EAA6CI,UAA7C,EAAyDT,cAAzD,EAAyEC,UAAzE,EAAqFS,UAArF,EAAiGE,IAAI,CAACE,KAAtG,CANM,CAAT;;AAQAN,EAAAA,OAAO,GAAG,MAAM;AACd,UAAMS,IAAI,GAAG5B,MAAM,CAACa,MAAM,CAACgB,OAAR,CAAnB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAgBzB,eAAe,CAAC;AACpCuB,MAAAA,IADoC;AAEpCL,MAAAA,IAFoC;AAGpCQ,MAAAA,MAAM,EAAE;AAH4B,KAAD,CAArC;AAMAD,IAAAA,SAAS,CACNC,MADH,CACU,MADV,EAEGC,IAFH,CAEQ,GAFR,EAEa,CAFb,EAGGA,IAHH,CAGQ,GAHR,EAGa,CAHb,EAIGA,IAJH,CAIQ,QAJR,EAIkBT,IAAI,CAACG,MAJvB,EAKGM,IALH,CAKQ,OALR,EAKiB,CALjB;AAOAlB,IAAAA,YAAY,CAACe,OAAb,GAAuB;AACrBD,MAAAA,IADqB;AAErBE,MAAAA;AAFqB,KAAvB;AAKAT,IAAAA,UAAU;AACX,GArBD;;AAuBAC,EAAAA,UAAU,GAAG,MAAM;AACjB,UAAM;AAAEQ,MAAAA;AAAF,QAAgBhB,YAAY,CAACe,OAAnC;AACAxB,IAAAA,eAAe,CAAC;AAACuB,MAAAA,IAAI,EAAE5B,MAAM,CAACa,MAAM,CAACgB,OAAR,CAAb;AAA+BN,MAAAA,IAA/B;AAAqCU,MAAAA,MAAM,EAAE;AAA7C,KAAD,CAAf;AACAH,IAAAA,SAAS,CACN9B,MADH,CACU,MADV,EAEGgC,IAFH,CAEQ,QAFR,EAEkBT,IAAI,CAACG,MAFvB,EAGGM,IAHH,CAGQ,OAHR,EAGiBT,IAAI,CAACE,KAAL,IAAchB,IAAI,GAAGC,SAArB,CAHjB;AAID,GAPD;;AASAU,EAAAA,UAAU,GAAGc,UAAU,IAAI;AACzB,UAAM;AAAEJ,MAAAA;AAAF,QAAgBhB,YAAY,CAACe,OAAnC;AACA,UAAMM,KAAK,GAAGD,UAAU,KAAK,KAA7B;AACAJ,IAAAA,SAAS,CACN9B,MADH,CACU,MADV,EAEGoC,UAFH,GAGGC,QAHH,CAGY1B,cAAc,GAAC,CAH3B,EAIG2B,IAJH,CAIQrC,cAJR,EAKG+B,IALH,CAKQ,OALR,EAKiBG,KAAK,GAAGZ,IAAI,CAACE,KAAR,GAAgB,CALtC,EAMGW,UANH,GAOGG,KAPH,CAOS3B,UAPT,EAQGyB,QARH,CAQY,CARZ,EASGL,IATH,CASQ,OATR,EASiBG,KAAK,GAAG,CAAH,GAAOZ,IAAI,CAACE,KATlC,EAUGW,UAVH,GAWGG,KAXH,CAWS5B,cAAc,GAAC,CAXxB,EAYG0B,QAZH,CAYY1B,cAAc,GAAC,CAZ3B,EAaG2B,IAbH,CAaQrC,cAbR,EAcG+B,IAdH,CAcQ,OAdR,EAckBT,IAAI,CAACE,KAAL,IAAchB,IAAI,GAAGC,SAArB,CAdlB;AAeD,GAlBD;;AAoBAW,EAAAA,UAAU,GAAG,MAAM;AACjB,UAAM;AAAES,MAAAA;AAAF,QAAgBhB,YAAY,CAACe,OAAnC;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB9B,cAAvB;AAEAmB,IAAAA,SAAS,CACN9B,MADH,CACU,MADV,EAEGoC,UAFH,CAEc,QAFd,EAGGC,QAHH,CAGY1B,cAHZ,EAIG2B,IAJH,CAIQrC,cAJR,EAKG+B,IALH,CAKQ,OALR,EAKiBT,IAAI,CAACE,KAAL,IAAchB,IAAI,GAAGC,SAArB,CALjB;AAMD,GAVD;;AAYA,SAAO,MAAC,YAAD;AAAc,IAAA,GAAG,EAAEG,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAvGD;;AAyGA,eAAeL,eAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport _  from 'lodash'\nimport { select } from \"d3-selection\";\nimport { easeCubicInOut } from \"d3-ease\";\n\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { colorGreen } from \"../styles\";\nimport \"d3-transition\";\nimport { createUpdateSvg } from \"../../../utils\";\n\nconst ChartWrapper = styled.div`\n  position: relative;\n  height: 100%;\n  width: 90%;\n\n  border: 1px solid ${colorGreen};\n\n  border-radius: 20px;\n  overflow: hidden;\n\n  svg {\n    position: absolute;\n    rect {\n      fill: ${colorGreen};\n    }\n  }\n`;\n\nconst PercentageChart = ({\n  data,\n  fullCount,\n  updateDuration = 1000,\n  resetDelay = 500\n}) => {\n  const divRef = useRef();\n  const storedValues = useRef();\n  const prevData = usePrevious(data);\n  const prevCount = usePrevious(fullCount);\n  const [init, setInit] = useState(false);\n  let initVis, resetChart, updateRect, updateDims\n  \n  const dims = useSvgResize(divRef);\n  const prevDims = usePrevious(dims);\n\n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n\n  useEffect(() => {\n    if (init){\n      !_.isEqual(dims !== prevDims)\n      updateDims()\n    } \n  });\n\n  useEffect(() => {\n    if (init && prevData !== data) {\n      prevCount < fullCount && resetChart('end');\n      fullCount < prevCount && resetChart('start');\n      fullCount === prevCount && updateRect();\n    }\n  }, [data, init, prevData, fullCount, prevCount, resetChart, updateDuration, resetDelay, updateRect, dims.width]);\n\n  initVis = () => {\n    const area = select(divRef.current);\n    const { chartArea } = createUpdateSvg({\n      area,\n      dims,\n      append: true\n    });\n\n    chartArea\n      .append(\"rect\")\n      .attr(\"x\", 0)\n      .attr(\"y\", 0)\n      .attr(\"height\", dims.height)\n      .attr(\"width\", 0);\n\n    storedValues.current = {\n      area,\n      chartArea\n    };\n\n    updateRect();\n  };\n\n  updateDims = () => {\n    const { chartArea } = storedValues.current;\n    createUpdateSvg({area: select(divRef.current), dims, update: true})\n    chartArea\n      .select(\"rect\")\n      .attr(\"height\", dims.height)\n      .attr(\"width\", dims.width * (data - fullCount));\n  }\n\n  resetChart = resetPoint => {\n    const { chartArea } = storedValues.current;\n    const toEnd = resetPoint === 'end'\n    chartArea\n      .select(\"rect\")\n      .transition()\n      .duration(updateDuration/2)\n      .ease(easeCubicInOut)\n      .attr(\"width\", toEnd ? dims.width : 0 )\n      .transition()\n      .delay(resetDelay)\n      .duration(0)\n      .attr(\"width\", toEnd ? 0 : dims.width)\n      .transition()\n      .delay(updateDuration/2)\n      .duration(updateDuration/2)\n      .ease(easeCubicInOut)\n      .attr(\"width\",  dims.width * (data - fullCount));\n  };\n\n  updateRect = () => {\n    const { chartArea } = storedValues.current;\n    console.log('running', updateDuration);\n    \n    chartArea\n      .select(\"rect\")\n      .transition(\"update\")\n      .duration(updateDuration)\n      .ease(easeCubicInOut)\n      .attr(\"width\", dims.width * (data - fullCount));\n  }\n\n  return <ChartWrapper ref={divRef} />;\n};\n\nexport default PercentageChart;\n"]},"metadata":{},"sourceType":"module"}