{"ast":null,"code":"var _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/IconChart/IconChart.jsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport _ from 'lodash';\nimport { select } from 'd3-selection';\nimport { scaleBand, scaleLinear } from 'd3-scale';\nimport 'd3-transition';\nimport { Link } from 'react-router-dom';\nconst Wrapper = styled.div.withConfig({\n  displayName: \"IconChart__Wrapper\",\n  componentId: \"sc-1oa1hct-0\"\n})([\"svg{cursor:pointer;}\"]);\n\nclass IconChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: this.props.location,\n      data: [{\n        sortKey: 0,\n        yKey: 'A',\n        xKey: 250\n      }, {\n        sortKey: 1,\n        yKey: 'B',\n        xKey: 300\n      }, {\n        sortKey: 2,\n        yKey: 'C',\n        xKey: 200\n      }]\n    };\n  }\n\n  componentDidMount() {\n    this.initVis();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.location !== this.props.location) {\n      this.randomizeData();\n    }\n\n    if (this.props.fill !== prevProps.fill) {\n      this.updateFill();\n    }\n  }\n\n  getColor() {}\n\n  randomizeData() {\n    const randomXKey = () => _.random(50, 300);\n\n    const data = [{\n      sortKey: randomXKey(),\n      yKey: 'A',\n      xKey: randomXKey()\n    }, {\n      sortKey: randomXKey(),\n      yKey: 'B',\n      xKey: randomXKey()\n    }, {\n      sortKey: randomXKey(),\n      yKey: 'C',\n      xKey: randomXKey()\n    }];\n    this.updateVis(data.sort((a, b) => a.sortKey - b.sortKey), this.getColor());\n  }\n\n  initVis() {\n    const svg = select(this.svg);\n    const {\n      data\n    } = this.state;\n    svg.attr('height', 40).attr('width', 40);\n    svg.append('g').attr('class', 'chart-area').attr('transform', `translate(0,7)`);\n    this.yScale = scaleBand().range([0, 30]).domain(data.map(d => d.yKey)).padding(.3);\n    this.xScale = scaleLinear().range([0, 35]).domain([0, 300]);\n    this.chartArea = svg.select('.chart-area');\n    this.chartArea.append('line').attr('x1', 0).attr('x2', 0).attr('y1', 0).attr('y2', 30).attr('stroke', this.props.fill).attr('stroke-width', 1).attr(\"stroke-linejoin\", \"round\").attr(\"stroke-linecap\", \"round\");\n    const rects = this.chartArea.selectAll('rect').data(data, d => d.yKey);\n    rects.enter().append('rect').attr('x', this.xScale(0)).attr('y', d => this.yScale(d.yKey)).attr('height', this.yScale.bandwidth()).attr('width', this.xScale(0)).attr('fill', this.props.fill).merge(rects).transition('in').duration(1000).delay((_, i) => i * 250).attr('width', d => this.xScale(d.xKey));\n  }\n\n  updateVis(data) {\n    this.yScale.domain(data.map(d => d.yKey));\n    this.chartArea.selectAll('rect').data(data, d => d.yKey).transition('update-width').delay(d => d.sortKey).duration(1000).attr('width', d => this.xScale(d.xKey)).attr('fill', this.props.fill);\n  }\n\n  updateFill() {\n    this.chartArea.selectAll('rect').attr('fill', this.props.fill);\n    this.chartArea.select('line').attr('stroke', this.props.fill);\n  }\n\n  render() {\n    return __jsx(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, __jsx(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, __jsx(\"svg\", {\n      ref: svg => this.svg = svg,\n      onClick: () => this.randomizeData(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default IconChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/IconChart/IconChart.jsx"],"names":["React","Component","styled","_","select","scaleBand","scaleLinear","Link","Wrapper","div","IconChart","constructor","props","state","location","data","sortKey","yKey","xKey","componentDidMount","initVis","componentDidUpdate","prevProps","randomizeData","fill","updateFill","getColor","randomXKey","random","updateVis","sort","a","b","svg","attr","append","yScale","range","domain","map","d","padding","xScale","chartArea","rects","selectAll","enter","bandwidth","merge","transition","duration","delay","i","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,UAAvC;AACA,OAAO,eAAP;AAEA,SAASC,IAAT,QAAqB,kBAArB;AAGA,MAAMC,OAAO,GAAGN,MAAM,CAACO,GAAV;AAAA;AAAA;AAAA,4BAAb;;AAQA,MAAMC,SAAN,SAAwBT,SAAxB,CAAkC;AAC9BU,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWE,QADZ;AAETC,MAAAA,IAAI,EAAE,CAAE;AAAEC,QAAAA,OAAO,EAAE,CAAX;AAAcC,QAAAA,IAAI,EAAE,GAApB;AAAyBC,QAAAA,IAAI,EAAE;AAA/B,OAAF,EACE;AAAEF,QAAAA,OAAO,EAAE,CAAX;AAAcC,QAAAA,IAAI,EAAE,GAApB;AAAyBC,QAAAA,IAAI,EAAE;AAA/B,OADF,EAEE;AAAEF,QAAAA,OAAO,EAAE,CAAX;AAAcC,QAAAA,IAAI,EAAE,GAApB;AAAyBC,QAAAA,IAAI,EAAE;AAA/B,OAFF;AAFG,KAAb;AAMH;;AAEDC,EAAAA,iBAAiB,GAAG;AAEhB,SAAKC,OAAL;AAEH;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAE1B,QAAGA,SAAS,CAACR,QAAV,KAAuB,KAAKF,KAAL,CAAWE,QAArC,EAA8C;AAE3C,WAAKS,aAAL;AAEF;;AAED,QAAG,KAAKX,KAAL,CAAWY,IAAX,KAAoBF,SAAS,CAACE,IAAjC,EAAsC;AAClC,WAAKC,UAAL;AACH;AAEJ;;AAEDC,EAAAA,QAAQ,GAAE,CAET;;AAEDH,EAAAA,aAAa,GAAE;AAEX,UAAMI,UAAU,GAAG,MAAMxB,CAAC,CAACyB,MAAF,CAAS,EAAT,EAAa,GAAb,CAAzB;;AAGA,UAAMb,IAAI,GAAE,CAAE;AAAEC,MAAAA,OAAO,EAAEW,UAAU,EAArB;AAAyBV,MAAAA,IAAI,EAAE,GAA/B;AAAoCC,MAAAA,IAAI,EAAES,UAAU;AAApD,KAAF,EACC;AAAEX,MAAAA,OAAO,EAAEW,UAAU,EAArB;AAAyBV,MAAAA,IAAI,EAAE,GAA/B;AAAoCC,MAAAA,IAAI,EAAES,UAAU;AAApD,KADD,EAEC;AAAEX,MAAAA,OAAO,EAAEW,UAAU,EAArB;AAAyBV,MAAAA,IAAI,EAAE,GAA/B;AAAoCC,MAAAA,IAAI,EAAES,UAAU;AAApD,KAFD,CAAZ;AAIC,SAAKE,SAAL,CAAed,IAAI,CAACe,IAAL,CAAU,CAACC,CAAD,EAAGC,CAAH,KAASD,CAAC,CAACf,OAAF,GAAYgB,CAAC,CAAChB,OAAjC,CAAf,EAA0D,KAAKU,QAAL,EAA1D;AACJ;;AAEDN,EAAAA,OAAO,GAAE;AAEL,UAAMa,GAAG,GAAG7B,MAAM,CAAC,KAAK6B,GAAN,CAAlB;AACA,UAAM;AAAElB,MAAAA;AAAF,QAAW,KAAKF,KAAtB;AACAoB,IAAAA,GAAG,CAACC,IAAJ,CAAS,QAAT,EAAmB,EAAnB,EAAuBA,IAAvB,CAA4B,OAA5B,EAAqC,EAArC;AACAD,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB,OAArB,EAA8B,YAA9B,EAA4CA,IAA5C,CAAiD,WAAjD,EAA+D,gBAA/D;AAEA,SAAKE,MAAL,GAAc/B,SAAS,GAAGgC,KAAZ,CAAkB,CAAC,CAAD,EAAI,EAAJ,CAAlB,EAA2BC,MAA3B,CAAkCvB,IAAI,CAACwB,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACvB,IAAhB,CAAlC,EAAyDwB,OAAzD,CAAiE,EAAjE,CAAd;AACA,SAAKC,MAAL,GAAcpC,WAAW,GAAG+B,KAAd,CAAoB,CAAC,CAAD,EAAI,EAAJ,CAApB,EAA6BC,MAA7B,CAAoC,CAAC,CAAD,EAAI,GAAJ,CAApC,CAAd;AACA,SAAKK,SAAL,GAAiBV,GAAG,CAAC7B,MAAJ,CAAW,aAAX,CAAjB;AAEA,SAAKuC,SAAL,CAAeR,MAAf,CAAsB,MAAtB,EACKD,IADL,CACU,IADV,EACgB,CADhB,EAEKA,IAFL,CAEU,IAFV,EAEgB,CAFhB,EAGKA,IAHL,CAGU,IAHV,EAGgB,CAHhB,EAIKA,IAJL,CAIU,IAJV,EAIgB,EAJhB,EAKKA,IALL,CAKU,QALV,EAKoB,KAAKtB,KAAL,CAAWY,IAL/B,EAMKU,IANL,CAMU,cANV,EAM0B,CAN1B,EAOKA,IAPL,CAOU,iBAPV,EAO6B,OAP7B,EAQKA,IARL,CAQU,gBARV,EAQ4B,OAR5B;AAUA,UAAMU,KAAK,GAAG,KAAKD,SAAL,CAAeE,SAAf,CAAyB,MAAzB,EAAiC9B,IAAjC,CAAsCA,IAAtC,EAA4CyB,CAAC,IAAIA,CAAC,CAACvB,IAAnD,CAAd;AAEA2B,IAAAA,KAAK,CACAE,KADL,GAEKX,MAFL,CAEY,MAFZ,EAGKD,IAHL,CAGU,GAHV,EAGe,KAAKQ,MAAL,CAAY,CAAZ,CAHf,EAIKR,IAJL,CAIU,GAJV,EAIeM,CAAC,IAAI,KAAKJ,MAAL,CAAYI,CAAC,CAACvB,IAAd,CAJpB,EAKKiB,IALL,CAKU,QALV,EAKoB,KAAKE,MAAL,CAAYW,SAAZ,EALpB,EAMKb,IANL,CAMU,OANV,EAMmB,KAAKQ,MAAL,CAAY,CAAZ,CANnB,EAOKR,IAPL,CAOU,MAPV,EAOkB,KAAKtB,KAAL,CAAWY,IAP7B,EAQSwB,KART,CAQeJ,KARf,EASSK,UATT,CASoB,IATpB,EAUSC,QAVT,CAUkB,IAVlB,EAWSC,KAXT,CAWe,CAAChD,CAAD,EAAIiD,CAAJ,KAAUA,CAAC,GAAG,GAX7B,EAYSlB,IAZT,CAYc,OAZd,EAYuBM,CAAC,IAAI,KAAKE,MAAL,CAAYF,CAAC,CAACtB,IAAd,CAZ5B;AAeH;;AAEDW,EAAAA,SAAS,CAACd,IAAD,EAAM;AAEX,SAAKqB,MAAL,CAAYE,MAAZ,CAAmBvB,IAAI,CAACwB,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACvB,IAAhB,CAAnB;AAEA,SAAK0B,SAAL,CAAeE,SAAf,CAAyB,MAAzB,EAAiC9B,IAAjC,CAAsCA,IAAtC,EAA4CyB,CAAC,IAAIA,CAAC,CAACvB,IAAnD,EACSgC,UADT,CACoB,cADpB,EAESE,KAFT,CAEeX,CAAC,IAAIA,CAAC,CAACxB,OAFtB,EAGSkC,QAHT,CAGkB,IAHlB,EAIShB,IAJT,CAIc,OAJd,EAIuBM,CAAC,IAAI,KAAKE,MAAL,CAAYF,CAAC,CAACtB,IAAd,CAJ5B,EAKSgB,IALT,CAKc,MALd,EAKsB,KAAKtB,KAAL,CAAWY,IALjC;AAOH;;AAEDC,EAAAA,UAAU,GAAE;AACR,SAAKkB,SAAL,CAAeE,SAAf,CAAyB,MAAzB,EACKX,IADL,CACU,MADV,EACkB,KAAKtB,KAAL,CAAWY,IAD7B;AAGA,SAAKmB,SAAL,CAAevC,MAAf,CAAsB,MAAtB,EACK8B,IADL,CACU,QADV,EACoB,KAAKtB,KAAL,CAAWY,IAD/B;AAEH;;AAGD6B,EAAAA,MAAM,GAAG;AACL,WACI,MAAC,IAAD;AAAM,MAAA,EAAE,EAAC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,GAAG,EAAEpB,GAAG,IAAI,KAAKA,GAAL,GAAWA,GAA5B;AAAiC,MAAA,OAAO,EAAE,MAAM,KAAKV,aAAL,EAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CADJ;AAOH;;AArH6B;;AAwHlC,eAAeb,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components'\nimport _ from 'lodash'\nimport { select } from 'd3-selection'\nimport { scaleBand, scaleLinear } from 'd3-scale'\nimport 'd3-transition'\n\nimport { Link } from 'react-router-dom';\n\n\nconst Wrapper = styled.div`\n\n    svg {\n        cursor: pointer;\n    }\n\n`\n\nclass IconChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            location: this.props.location,\n            data: [ { sortKey: 0, yKey: 'A', xKey: 250 }, \n                    { sortKey: 1, yKey: 'B', xKey: 300 }, \n                    { sortKey: 2, yKey: 'C', xKey: 200 }]\n         }\n    }\n\n    componentDidMount() {\n\n        this.initVis()\n\n    }\n\n    componentDidUpdate(prevProps) {\n\n        if(prevProps.location !== this.props.location){\n\n           this.randomizeData()\n\n        }\n\n        if(this.props.fill !== prevProps.fill){\n            this.updateFill()\n        }\n\n    }\n\n    getColor(){\n        \n    }\n\n    randomizeData(){\n\n        const randomXKey = () => _.random(50, 300)\n\n\n        const data= [ { sortKey: randomXKey(), yKey: 'A', xKey: randomXKey() }, \n                     { sortKey: randomXKey(), yKey: 'B', xKey: randomXKey() }, \n                     { sortKey: randomXKey(), yKey: 'C', xKey: randomXKey() }]\n         \n         this.updateVis(data.sort((a,b) => a.sortKey - b.sortKey), this.getColor())\n    }\n\n    initVis(){\n\n        const svg = select(this.svg)\n        const { data } = this.state\n        svg.attr('height', 40).attr('width', 40)\n        svg.append('g').attr('class', 'chart-area').attr('transform', `translate(0,7)`)\n\n        this.yScale = scaleBand().range([0, 30]).domain(data.map(d => d.yKey)).padding(.3)\n        this.xScale = scaleLinear().range([0, 35]).domain([0, 300])\n        this.chartArea = svg.select('.chart-area')\n\n        this.chartArea.append('line')\n            .attr('x1', 0)\n            .attr('x2', 0)\n            .attr('y1', 0)\n            .attr('y2', 30)\n            .attr('stroke', this.props.fill)\n            .attr('stroke-width', 1)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-linecap\", \"round\")\n\n        const rects = this.chartArea.selectAll('rect').data(data, d => d.yKey)\n\n        rects\n            .enter()\n            .append('rect')\n            .attr('x', this.xScale(0))\n            .attr('y', d => this.yScale(d.yKey))\n            .attr('height', this.yScale.bandwidth())\n            .attr('width', this.xScale(0))\n            .attr('fill', this.props.fill)\n                .merge(rects)\n                .transition('in')\n                .duration(1000)\n                .delay((_, i) => i * 250)\n                .attr('width', d => this.xScale(d.xKey))\n\n\n    }\n\n    updateVis(data){\n\n        this.yScale.domain(data.map(d => d.yKey))\n\n        this.chartArea.selectAll('rect').data(data, d => d.yKey)\n                .transition('update-width')\n                .delay(d => d.sortKey)\n                .duration(1000)\n                .attr('width', d => this.xScale(d.xKey))\n                .attr('fill', this.props.fill)\n\n    }\n\n    updateFill(){\n        this.chartArea.selectAll('rect')\n            .attr('fill', this.props.fill)\n    \n        this.chartArea.select('line')\n            .attr('stroke', this.props.fill)\n    }\n\n\n    render() { \n        return ( \n            <Link to=\"/\">\n                <Wrapper >\n                    <svg ref={svg => this.svg = svg} onClick={() => this.randomizeData()}/>\n                </Wrapper>\n            </Link>\n         );\n    }\n}\n \nexport default IconChart;"]},"metadata":{},"sourceType":"module"}