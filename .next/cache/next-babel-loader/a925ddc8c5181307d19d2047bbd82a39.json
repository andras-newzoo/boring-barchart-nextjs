{"ast":null,"code":"var _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize } from \"../../../hooks\";\nimport { testBorder } from \"../../../styles\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyLight, colorGreyDark } from \"../styles\";\nimport chroma from 'chroma-js';\nconst ChartWrapper = styled.div`\n  position: relative;\n  height: 80%;\n  width: 90%;\n\n  border: 1px solid ${colorGreyLight};\n  /* background-color: ${chroma(colorGreyLight).brighten()}; */\n\n  border-radius: 20px;\n  overflow: hidden;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst PercentageChart = ({\n  data,\n  margin = {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  }\n}) => {\n  const svgRef = useRef();\n  const storedValues = useRef();\n  const {\n    0: init,\n    1: setInit\n  } = useState(false);\n  let initVis;\n  const dims = useSvgResize(svgRef);\n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n  useEffect(() => {//console.log('dims', dims)\n  }, [dims]);\n  useEffect(() => {//console.log('data', data)\n  }, [data]);\n\n  initVis = () => {\n    const svg = select(svgRef.current);\n    svg.append(\"g\").attr(\"class\", \"chart-area\").attr('transform', `translate(${margin.left}, ${margin.top})`);\n    const chartArea = select(\".chart-area\");\n    const chartWidth = dims.width - margin.right - margin.left;\n    const chartHeight = dims.height - margin.top - margin.bottom;\n    storedValues.current = {\n      chartArea,\n      chartWidth,\n      chartHeight\n    };\n  };\n\n  const updateData = () => {};\n\n  const resetChart = () => {};\n\n  const updateDims = () => {};\n\n  return __jsx(ChartWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, __jsx(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }));\n};\n\nexport default PercentageChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx"],"names":["React","useRef","useEffect","useState","styled","useSvgResize","testBorder","select","colorGreen","colorGreyLight","colorGreyDark","chroma","ChartWrapper","div","brighten","PercentageChart","data","margin","top","right","bottom","left","svgRef","storedValues","init","setInit","initVis","dims","width","height","svg","current","append","attr","chartArea","chartWidth","chartHeight","updateData","resetChart","updateDims"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize } from \"../../../hooks\";\nimport { testBorder } from \"../../../styles\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyLight, colorGreyDark } from \"../styles\";\nimport chroma from 'chroma-js'\n\nconst ChartWrapper = styled.div`\n  position: relative;\n  height: 80%;\n  width: 90%;\n\n  border: 1px solid ${colorGreyLight};\n  /* background-color: ${chroma(colorGreyLight).brighten()}; */\n\n  border-radius: 20px;\n  overflow: hidden;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst PercentageChart = ({ \n  data,\n  margin = {\n    top:1, right: 1, bottom: 1, left: 1\n  }\n\n}) => {\n  const svgRef = useRef();\n  const storedValues = useRef();\n  const [init, setInit] = useState(false);\n  let initVis\n\n  const dims = useSvgResize(svgRef);\n\n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n\n  useEffect(() => {\n    //console.log('dims', dims)\n  }, [dims]);\n\n  useEffect(() => {\n    //console.log('data', data)\n  }, [data]);\n\n  initVis = () => {\n    const svg = select(svgRef.current);\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"chart-area\")\n      .attr('transform', `translate(${margin.left}, ${margin.top})`)\n    const chartArea = select(\".chart-area\");\n    const chartWidth = dims.width - margin.right - margin.left\n    const chartHeight = dims.height - margin.top - margin.bottom\n\n    storedValues.current = {\n      chartArea,\n      chartWidth,\n      chartHeight\n    };\n  };\n\n  const updateData = () => {};\n\n  const resetChart = () => {};\n\n  const updateDims = () => {};\n\n  return (\n    <ChartWrapper>\n      <svg ref={svgRef} />\n    </ChartWrapper>\n  );\n};\n\nexport default PercentageChart;\n"]},"metadata":{},"sourceType":"module"}