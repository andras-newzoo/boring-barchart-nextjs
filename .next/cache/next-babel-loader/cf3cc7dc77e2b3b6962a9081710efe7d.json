{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Set from \"@babel/runtime-corejs2/core-js/set\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { createSelector } from \"reselect\";\nimport _ from \"lodash\";\n\nconst selectGroupList = state => state.furnitureBankReducer.groups;\n\nconst selectFurnitureList = state => state.furnitureBankReducer.productList;\n\nconst selectedAllSelected = state => state.furnitureBankReducer.selectedItems;\n\nconst selectAllDonation = state => state.furnitureBankReducer.donationsData;\n\nconst selectAllFamily = state => state.furnitureBankReducer.familyData;\n\nconst selectAllCoordinates = state => state.furnitureBankReducer.coordinatesData; //* Array of all selected items\n\n\nexport const selectAllSelected = createSelector(selectedAllSelected, selectedList => selectedList.map(el => el.name));\nexport const selectTotalQuantity = createSelector(selectedAllSelected, selectedList => selectedList.reduce((acc, curr) => acc + curr.quantity, 0));\nexport const selectAllUnselected = createSelector(selectFurnitureList, selectAllSelected, (totalList, allSelected) => totalList.filter(el => !allSelected.map(el => el.toLowerCase()).includes(el.product_name.toLowerCase())));\nexport const selectAllSelectedPrice = createSelector(selectFurnitureList, selectedAllSelected, (furnitureList, selectedItems) => selectedItems.map(el => +furnitureList.find(d => d.product_name === el.name).value * el.quantity).reduce((acc, curr) => acc + curr, 0)); //* Get relevant postal code list\n\nexport const selectFilteredDonationPostalCode = createSelector(selectAllDonation, selectAllSelected, (donations, selectedItems) => donations.filter(el => selectedItems.includes(el.product_name))); //* Get family data for postal codes\n\nexport const selectFilteredFamilies = createSelector(selectAllFamily, selectFilteredDonationPostalCode, (families, selectedPostalCodes) => families.filter(el => selectedPostalCodes.includes(el.postal_code))); //* Get coordinates for filtere items\n\nexport const selectFilteredCoordinates = createSelector(selectAllCoordinates, selectFilteredDonationPostalCode, (coordinates, selectedPostalCodes) => selectedPostalCodes.map(el => _objectSpread({}, el, {\n  coors: coordinates.find(d => d.postal_code === el.postal_code)\n}))); //* Get unique list of postal codes\n\nexport const selectUniqueCoordinates = createSelector(selectFilteredDonationPostalCode, filteredPostalCodes => [...new _Set(filteredPostalCodes.map(el => el.postal_code))]); //* Get families from filtered postal codes\n\nexport const selectPostalCodeFamilies = createSelector(selectUniqueCoordinates, selectAllFamily, (postalCodes, families) => families.filter(el => postalCodes.includes(el.postal_code))); //* Top Groups\n\nexport const selectGroups = createSelector(selectPostalCodeFamilies, families => _.groupBy(families, \"segment\"));\nexport const selectTopGroups = createSelector(selectGroups, selectGroupList, selectPostalCodeFamilies, (groups, groupList, total) => groupList.map(el => groups[el] ? {\n  group: el,\n  share: groups[el].length / total.length\n} : {\n  group: el,\n  share: 0\n})); //* Persons\n\nexport const selectAdults = createSelector(selectPostalCodeFamilies, families => _.mean(families.map(el => _parseInt(el.adults) || 0)));\nexport const selectChildren = createSelector(selectPostalCodeFamilies, families => _.mean(families.map(el => _parseInt(el.children) || 0)));","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/store/furnitureBankReducer/selectors.js"],"names":["createSelector","_","selectGroupList","state","furnitureBankReducer","groups","selectFurnitureList","productList","selectedAllSelected","selectedItems","selectAllDonation","donationsData","selectAllFamily","familyData","selectAllCoordinates","coordinatesData","selectAllSelected","selectedList","map","el","name","selectTotalQuantity","reduce","acc","curr","quantity","selectAllUnselected","totalList","allSelected","filter","toLowerCase","includes","product_name","selectAllSelectedPrice","furnitureList","find","d","value","selectFilteredDonationPostalCode","donations","selectFilteredFamilies","families","selectedPostalCodes","postal_code","selectFilteredCoordinates","coordinates","coors","selectUniqueCoordinates","filteredPostalCodes","selectPostalCodeFamilies","postalCodes","selectGroups","groupBy","selectTopGroups","groupList","total","group","share","length","selectAdults","mean","adults","selectChildren","children"],"mappings":"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","sourcesContent":["import { createSelector } from \"reselect\";\nimport _ from \"lodash\";\n\nconst selectGroupList = state => state.furnitureBankReducer.groups;\nconst selectFurnitureList = state => state.furnitureBankReducer.productList;\nconst selectedAllSelected = state => state.furnitureBankReducer.selectedItems;\nconst selectAllDonation = state => state.furnitureBankReducer.donationsData;\nconst selectAllFamily = state => state.furnitureBankReducer.familyData;\nconst selectAllCoordinates = state =>\n  state.furnitureBankReducer.coordinatesData;\n\n//* Array of all selected items\nexport const selectAllSelected = createSelector(\n  selectedAllSelected,\n  selectedList => selectedList.map(el => el.name)\n);\n\nexport const selectTotalQuantity = createSelector(\n  selectedAllSelected,\n  selectedList => selectedList.reduce((acc, curr) => acc + curr.quantity, 0)\n);\n\nexport const selectAllUnselected = createSelector(\n  selectFurnitureList,\n  selectAllSelected,\n  (totalList, allSelected) =>\n    totalList.filter(\n      el =>\n        !allSelected\n          .map(el => el.toLowerCase())\n          .includes(el.product_name.toLowerCase())\n    )\n);\n\nexport const selectAllSelectedPrice = createSelector(\n  selectFurnitureList,\n  selectedAllSelected,\n  (furnitureList, selectedItems) =>\n    selectedItems\n      .map(\n        el =>\n          +furnitureList.find(d => d.product_name === el.name).value *\n          el.quantity\n      )\n      .reduce((acc, curr) => acc + curr, 0)\n);\n\n//* Get relevant postal code list\nexport const selectFilteredDonationPostalCode = createSelector(\n  selectAllDonation,\n  selectAllSelected,\n  (donations, selectedItems) =>\n    donations.filter(el => selectedItems.includes(el.product_name))\n);\n\n//* Get family data for postal codes\nexport const selectFilteredFamilies = createSelector(\n  selectAllFamily,\n  selectFilteredDonationPostalCode,\n  (families, selectedPostalCodes) =>\n    families.filter(el => selectedPostalCodes.includes(el.postal_code))\n);\n\n//* Get coordinates for filtere items\nexport const selectFilteredCoordinates = createSelector(\n  selectAllCoordinates,\n  selectFilteredDonationPostalCode,\n  (coordinates, selectedPostalCodes) =>\n    selectedPostalCodes.map(el => ({\n      ...el,\n      coors: coordinates.find(d => d.postal_code === el.postal_code)\n    }))\n);\n\n//* Get unique list of postal codes\nexport const selectUniqueCoordinates = createSelector(\n  selectFilteredDonationPostalCode,\n  filteredPostalCodes => [\n    ...new Set(filteredPostalCodes.map(el => el.postal_code))\n  ]\n);\n\n//* Get families from filtered postal codes\nexport const selectPostalCodeFamilies = createSelector(\n  selectUniqueCoordinates,\n  selectAllFamily,\n  (postalCodes, families) =>\n    families.filter(el => postalCodes.includes(el.postal_code))\n);\n\n//* Top Groups\nexport const selectGroups = createSelector(\n  selectPostalCodeFamilies,\n  families => _.groupBy(families, \"segment\")\n);\nexport const selectTopGroups = createSelector(\n  selectGroups,\n  selectGroupList,\n  selectPostalCodeFamilies,\n  (groups, groupList, total) =>\n    groupList.map(el =>\n      groups[el]\n        ? { group: el, share: groups[el].length / total.length }\n        : { group: el, share: 0 }\n    )\n);\n\n//* Persons\nexport const selectAdults = createSelector(\n  selectPostalCodeFamilies,\n  families => _.mean(families.map(el => parseInt(el.adults) || 0))\n);\nexport const selectChildren = createSelector(\n  selectPostalCodeFamilies,\n  families => _.mean(families.map(el => parseInt(el.children) || 0))\n);\n"]},"metadata":{},"sourceType":"module"}