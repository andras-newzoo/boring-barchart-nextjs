{"ast":null,"code":"var _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/IconChart/IconChart.jsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport _ from \"lodash\";\nimport { select } from \"d3-selection\";\nimport { scaleBand, scaleLinear } from \"d3-scale\";\nimport \"d3-transition\";\nconst Wrapper = styled.div.withConfig({\n  displayName: \"IconChart__Wrapper\",\n  componentId: \"sc-1oa1hct-0\"\n})([\"svg{cursor:pointer;}\"]);\n\nclass IconChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: this.props.location,\n      data: [{\n        sortKey: 0,\n        yKey: \"A\",\n        xKey: 250\n      }, {\n        sortKey: 1,\n        yKey: \"B\",\n        xKey: 300\n      }, {\n        sortKey: 2,\n        yKey: \"C\",\n        xKey: 200\n      }]\n    };\n  }\n\n  componentDidMount() {\n    this.initVis();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.location !== this.props.location) {\n      this.randomizeData();\n    }\n\n    if (this.props.fill !== prevProps.fill) {\n      this.updateFill();\n    }\n  }\n\n  getColor() {}\n\n  randomizeData() {\n    const randomXKey = () => _.random(50, 300);\n\n    const data = [{\n      sortKey: randomXKey(),\n      yKey: \"A\",\n      xKey: randomXKey()\n    }, {\n      sortKey: randomXKey(),\n      yKey: \"B\",\n      xKey: randomXKey()\n    }, {\n      sortKey: randomXKey(),\n      yKey: \"C\",\n      xKey: randomXKey()\n    }];\n    this.updateVis(data.sort((a, b) => a.sortKey - b.sortKey), this.getColor());\n  }\n\n  initVis() {\n    const svg = select(this.svg);\n    const {\n      data\n    } = this.state;\n    svg.attr(\"height\", 40).attr(\"width\", 40);\n    svg.append(\"g\").attr(\"class\", \"chart-area\").attr(\"transform\", `translate(0,7)`);\n    this.yScale = scaleBand().range([0, 30]).domain(data.map(d => d.yKey)).padding(0.3);\n    this.xScale = scaleLinear().range([0, 35]).domain([0, 300]);\n    this.chartArea = svg.select(\".chart-area\");\n    this.chartArea.append(\"line\").attr(\"x1\", 0).attr(\"x2\", 0).attr(\"y1\", 0).attr(\"y2\", 30).attr(\"stroke\", this.props.fill).attr(\"stroke-width\", 1).attr(\"stroke-linejoin\", \"round\").attr(\"stroke-linecap\", \"round\");\n    const rects = this.chartArea.selectAll(\"rect\").data(data, d => d.yKey);\n    rects.enter().append(\"rect\").attr(\"x\", this.xScale(0)).attr(\"y\", d => this.yScale(d.yKey)).attr(\"height\", this.yScale.bandwidth()).attr(\"width\", this.xScale(0)).attr(\"fill\", this.props.fill).merge(rects).transition(\"in\").duration(1000).delay((_, i) => i * 250).attr(\"width\", d => this.xScale(d.xKey));\n  }\n\n  updateVis(data) {\n    this.yScale.domain(data.map(d => d.yKey));\n    this.chartArea.selectAll(\"rect\").data(data, d => d.yKey).transition(\"update-width\").delay(d => d.sortKey).duration(1000).attr(\"width\", d => this.xScale(d.xKey)).attr(\"fill\", this.props.fill);\n  }\n\n  updateFill() {\n    this.chartArea.selectAll(\"rect\").attr(\"fill\", this.props.fill);\n    this.chartArea.select(\"line\").attr(\"stroke\", this.props.fill);\n  }\n\n  render() {\n    return __jsx(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, __jsx(\"svg\", {\n      ref: svg => this.svg = svg,\n      onClick: () => this.randomizeData(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default IconChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/IconChart/IconChart.jsx"],"names":["React","Component","styled","_","select","scaleBand","scaleLinear","Wrapper","div","IconChart","constructor","props","state","location","data","sortKey","yKey","xKey","componentDidMount","initVis","componentDidUpdate","prevProps","randomizeData","fill","updateFill","getColor","randomXKey","random","updateVis","sort","a","b","svg","attr","append","yScale","range","domain","map","d","padding","xScale","chartArea","rects","selectAll","enter","bandwidth","merge","transition","duration","delay","i","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport _ from \"lodash\";\nimport { select } from \"d3-selection\";\nimport { scaleBand, scaleLinear } from \"d3-scale\";\nimport \"d3-transition\";\n\nconst Wrapper = styled.div`\n  svg {\n    cursor: pointer;\n  }\n`;\n\nclass IconChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: this.props.location,\n      data: [\n        { sortKey: 0, yKey: \"A\", xKey: 250 },\n        { sortKey: 1, yKey: \"B\", xKey: 300 },\n        { sortKey: 2, yKey: \"C\", xKey: 200 }\n      ]\n    };\n  }\n\n  componentDidMount() {\n    this.initVis();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.location !== this.props.location) {\n      this.randomizeData();\n    }\n\n    if (this.props.fill !== prevProps.fill) {\n      this.updateFill();\n    }\n  }\n\n  getColor() {}\n\n  randomizeData() {\n    const randomXKey = () => _.random(50, 300);\n\n    const data = [\n      { sortKey: randomXKey(), yKey: \"A\", xKey: randomXKey() },\n      { sortKey: randomXKey(), yKey: \"B\", xKey: randomXKey() },\n      { sortKey: randomXKey(), yKey: \"C\", xKey: randomXKey() }\n    ];\n\n    this.updateVis(data.sort((a, b) => a.sortKey - b.sortKey), this.getColor());\n  }\n\n  initVis() {\n    const svg = select(this.svg);\n    const { data } = this.state;\n    svg.attr(\"height\", 40).attr(\"width\", 40);\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"chart-area\")\n      .attr(\"transform\", `translate(0,7)`);\n\n    this.yScale = scaleBand()\n      .range([0, 30])\n      .domain(data.map(d => d.yKey))\n      .padding(0.3);\n    this.xScale = scaleLinear()\n      .range([0, 35])\n      .domain([0, 300]);\n    this.chartArea = svg.select(\".chart-area\");\n\n    this.chartArea\n      .append(\"line\")\n      .attr(\"x1\", 0)\n      .attr(\"x2\", 0)\n      .attr(\"y1\", 0)\n      .attr(\"y2\", 30)\n      .attr(\"stroke\", this.props.fill)\n      .attr(\"stroke-width\", 1)\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-linecap\", \"round\");\n\n    const rects = this.chartArea.selectAll(\"rect\").data(data, d => d.yKey);\n\n    rects\n      .enter()\n      .append(\"rect\")\n      .attr(\"x\", this.xScale(0))\n      .attr(\"y\", d => this.yScale(d.yKey))\n      .attr(\"height\", this.yScale.bandwidth())\n      .attr(\"width\", this.xScale(0))\n      .attr(\"fill\", this.props.fill)\n      .merge(rects)\n      .transition(\"in\")\n      .duration(1000)\n      .delay((_, i) => i * 250)\n      .attr(\"width\", d => this.xScale(d.xKey));\n  }\n\n  updateVis(data) {\n    this.yScale.domain(data.map(d => d.yKey));\n\n    this.chartArea\n      .selectAll(\"rect\")\n      .data(data, d => d.yKey)\n      .transition(\"update-width\")\n      .delay(d => d.sortKey)\n      .duration(1000)\n      .attr(\"width\", d => this.xScale(d.xKey))\n      .attr(\"fill\", this.props.fill);\n  }\n\n  updateFill() {\n    this.chartArea.selectAll(\"rect\").attr(\"fill\", this.props.fill);\n\n    this.chartArea.select(\"line\").attr(\"stroke\", this.props.fill);\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <svg\n          ref={svg => (this.svg = svg)}\n          onClick={() => this.randomizeData()}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nexport default IconChart;\n"]},"metadata":{},"sourceType":"module"}