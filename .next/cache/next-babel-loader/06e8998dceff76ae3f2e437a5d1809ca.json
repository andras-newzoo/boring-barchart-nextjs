{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position: relative;\\n  \", \";\\n  height: 100%;\\n  width: 100%;\\n\\n  svg {\\n    position: absolute;\\n    width: 100%;\\n    height: 100%;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useSvgResize } from '../../../hooks';\nimport { testBorder } from '../../../styles';\nimport { select } from 'd3-selection';\nvar ChartWrapper = styled.div(_templateObject(), testBorder);\n\nvar PercentageChart = function PercentageChart(_ref) {\n  var data = _ref.data;\n  var svgRef = useRef();\n\n  var _useState = useState(false),\n      init = _useState[0],\n      setInit = _useState[1];\n\n  var dims = useSvgResize(svgRef);\n  useEffect(function () {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init]);\n  useEffect(function () {//console.log('dims', dims)\n  }, [dims]);\n  useEffect(function () {//console.log('data', data)\n  }, [data]);\n\n  var initVis = function initVis() {\n    var svg = select(svgRef.current);\n    console.log(svg);\n  };\n\n  var updateData = function updateData() {};\n\n  var resetChart = function resetChart() {};\n\n  var updateDims = function updateDims() {};\n\n  return __jsx(ChartWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }));\n};\n\nexport default PercentageChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx"],"names":["React","useRef","useEffect","useState","styled","useSvgResize","testBorder","select","ChartWrapper","div","PercentageChart","data","svgRef","init","setInit","dims","width","height","initVis","svg","current","console","log","updateData","resetChart","updateDims"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA,IAAMC,YAAY,GAAGJ,MAAM,CAACK,GAAV,oBAEdH,UAFc,CAAlB;;AAaA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,OAElB;AAAA,MADJC,IACI,QADJA,IACI;AACJ,MAAMC,MAAM,GAAGX,MAAM,EAArB;;AADI,kBAEsBE,QAAQ,CAAC,KAAD,CAF9B;AAAA,MAEIU,IAFJ;AAAA,MAEUC,OAFV;;AAIJ,MAAMC,IAAI,GAAGV,YAAY,CAACO,MAAD,CAAzB;AAEAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAGa,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACE,MAAnB,IAA6BN,IAA7B,IAAqC,CAACE,IAAzC,EAA+C;AAC7CK,MAAAA,OAAO;AACPJ,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,GALQ,EAKP,CAACH,IAAD,EAAOI,IAAI,CAACE,MAAZ,EAAoBF,IAAI,CAACC,KAAzB,EAAgCH,IAAhC,CALO,CAAT;AAOAX,EAAAA,SAAS,CAAC,YAAM,CACd;AACD,GAFQ,EAEN,CAACa,IAAD,CAFM,CAAT;AAKAb,EAAAA,SAAS,CAAC,YAAM,CACd;AACD,GAFQ,EAEN,CAACS,IAAD,CAFM,CAAT;;AAIA,MAAMO,OAAO,GAAG,SAAVA,OAAU,GAAM;AAEpB,QAAMC,GAAG,GAAGZ,MAAM,CAACK,MAAM,CAACQ,OAAR,CAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AAGD,GAND;;AAQA,MAAMI,UAAU,GAAG,SAAbA,UAAa,GAAM,CAExB,CAFD;;AAIA,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM,CAExB,CAFD;;AAIA,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM,CAExB,CAFD;;AAMA,SACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,EAAEb,MADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAOD,CArDD;;AAuDA,eAAeF,eAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport styled from 'styled-components'\nimport { useSvgResize } from '../../../hooks';\nimport { testBorder } from '../../../styles';\nimport { select } from 'd3-selection'\n\nconst ChartWrapper = styled.div`\n  position: relative;\n  ${testBorder};\n  height: 100%;\n  width: 100%;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n`\n\nconst PercentageChart = ({\n  data\n}) => {\n  const svgRef = useRef() \n  const [ init, setInit ] = useState(false)\n\n  const dims = useSvgResize(svgRef)\n\n  useEffect(() => {\n    if(dims.width && dims.height && data && !init ){\n      initVis()\n      setInit(true)\n    }\n  },[data, dims.height, dims.width, init])\n\n  useEffect(() => {\n    //console.log('dims', dims)\n  }, [dims])\n\n\n  useEffect(() => {\n    //console.log('data', data)\n  }, [data])\n\n  const initVis = () => {\n\n    const svg = select(svgRef.current)\n    console.log(svg);\n    \n\n  }\n\n  const updateData = () => {\n\n  }\n\n  const resetChart = () => {\n\n  }\n\n  const updateDims = () => {\n\n  }\n\n\n  \n  return (\n    <ChartWrapper>\n      <svg\n        ref={svgRef}\n      />\n    </ChartWrapper>\n  )\n}\n\nexport default PercentageChart"]},"metadata":{},"sourceType":"module"}