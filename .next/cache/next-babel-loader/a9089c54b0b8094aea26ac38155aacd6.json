{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport deburr from \"lodash/deburr\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { fontWeightS, fontWeightL } from \"../../styles/sharedStyles\";\nimport { Grid } from \"@material-ui/core\";\nimport { useStyles, AddIcon } from \"./styles\";\n\nfunction renderInputComponent(inputProps) {\n  const {\n    classes,\n    inputRef = () => {},\n    ref\n  } = inputProps,\n        other = _objectWithoutProperties(inputProps, [\"classes\", \"inputRef\", \"ref\"]);\n\n  return __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"center\",\n    className: classes.grid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, __jsx(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, __jsx(AddIcon, {\n    color: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })), __jsx(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(TextField, _extends({\n    fullWidth: true,\n    InputProps: {\n      inputRef: node => {\n        ref(node);\n        inputRef(node);\n      },\n      classes: {\n        input: classes.input\n      }\n    }\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }))));\n}\n\nfunction getSuggestions(data, itemKey, value) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n  return inputLength === 0 ? [] : data.filter(item => {\n    const keep = count < 5 && item[itemKey].slice(0, inputLength).toLowerCase() === inputValue;\n\n    if (keep) {\n      count += 1;\n    }\n\n    return keep;\n  });\n}\n\nfunction AutoComplete({\n  data,\n  itemKey,\n  iconFill\n}) {\n  const classes = useStyles();\n  const [single, setSingle] = React.useState(\"\");\n  const {\n    0: stateSuggestions,\n    1: setSuggestions\n  } = useState([]);\n\n  const getSuggestionValue = item => item[itemKey];\n\n  const handleSuggestionsFetchRequested = ({\n    value\n  }) => setSuggestions(getSuggestions(data, itemKey, value));\n\n  const handleSuggestionsClearRequested = () => setSuggestions([]);\n\n  const handleChange = (_, {\n    newValue\n  }) => setSingle(newValue);\n\n  const renderSuggestion = (data, {\n    query,\n    isHighlighted\n  }) => {\n    const matches = match(data[itemKey], query);\n    const parts = parse(data[itemKey], matches);\n    return __jsx(MenuItem, {\n      selected: isHighlighted,\n      component: \"div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, parts.map(part => __jsx(\"span\", {\n      key: part.text,\n      style: {\n        fontWeight: part.highlight ? fontWeightL : fontWeightS\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, part.text))));\n  };\n\n  const autosuggestProps = {\n    suggestions: stateSuggestions,\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\n    getSuggestionValue,\n    renderSuggestion\n  };\n  return __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, __jsx(Autosuggest, _extends({}, autosuggestProps, {\n    inputProps: {\n      classes,\n      id: \"react-autosuggest-simple\",\n      placeholder: \"Add a new item\",\n      value: single,\n      onChange: handleChange\n    },\n    theme: {\n      container: classes.container,\n      suggestionsContainerOpen: classes.suggestionsContainerOpen,\n      suggestionsList: classes.suggestionsList,\n      suggestion: classes.suggestion\n    },\n    renderInputComponent: inputProps => renderInputComponent(inputProps, iconFill),\n    renderSuggestionsContainer: options => __jsx(Paper, _extends({}, options.containerProps, {\n      square: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), options.children),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  })));\n}\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx"],"names":["React","useState","deburr","Autosuggest","match","parse","TextField","Paper","MenuItem","fontWeightS","fontWeightL","Grid","useStyles","AddIcon","renderInputComponent","inputProps","classes","inputRef","ref","other","grid","node","input","getSuggestions","data","itemKey","value","inputValue","trim","toLowerCase","inputLength","length","count","filter","item","keep","slice","AutoComplete","iconFill","single","setSingle","stateSuggestions","setSuggestions","getSuggestionValue","handleSuggestionsFetchRequested","handleSuggestionsClearRequested","handleChange","_","newValue","renderSuggestion","query","isHighlighted","matches","parts","map","part","text","fontWeight","highlight","autosuggestProps","suggestions","onSuggestionsFetchRequested","onSuggestionsClearRequested","root","id","placeholder","onChange","container","suggestionsContainerOpen","suggestionsList","suggestion","options","containerProps","children"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport deburr from \"lodash/deburr\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { fontWeightS, fontWeightL } from \"../../styles/sharedStyles\";\nimport { Grid } from \"@material-ui/core\";\nimport { useStyles, AddIcon } from \"./styles\";\n\nfunction renderInputComponent(inputProps) {\n  const { classes, inputRef = () => {}, ref, ...other } = inputProps;\n  \n  return (\n    <Grid \n      container \n      spacing={1} \n      alignItems=\"center\"\n      className={classes.grid}\n    >\n      <Grid item>\n        <AddIcon color=\"\"/>\n      </Grid>\n      <Grid item>\n        <TextField\n          fullWidth\n          InputProps={{\n            inputRef: node => {\n              ref(node);\n              inputRef(node);\n            },\n            classes: {\n              input: classes.input\n            }\n          }}\n          {...other}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n\nfunction getSuggestions(data, itemKey, value) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n\n  return inputLength === 0\n    ? []\n    : data.filter(item => {\n        const keep =\n          count < 5 &&\n          item[itemKey].slice(0, inputLength).toLowerCase() === inputValue;\n        if (keep) {\n          count += 1;\n        }\n        return keep;\n      });\n}\n\nfunction AutoComplete({ data, itemKey, iconFill }) {\n  const classes = useStyles();\n\n  const [single, setSingle] = React.useState(\"\");\n\n  const [stateSuggestions, setSuggestions] = useState([]);\n\n  const getSuggestionValue = item => item[itemKey];\n\n  const handleSuggestionsFetchRequested = ({ value }) =>\n    setSuggestions(getSuggestions(data, itemKey, value));\n\n  const handleSuggestionsClearRequested = () => setSuggestions([]);\n\n  const handleChange = (_, { newValue }) => setSingle(newValue);\n\n  const renderSuggestion = (data, { query, isHighlighted }) => {\n    const matches = match(data[itemKey], query);\n    const parts = parse(data[itemKey], matches);\n\n    return (\n      <MenuItem selected={isHighlighted} component=\"div\">\n        <div>\n          {parts.map(part => (\n            <span\n              key={part.text}\n              style={{ fontWeight: part.highlight ? fontWeightL : fontWeightS }}\n            >\n              {part.text}\n            </span>\n          ))}\n        </div>\n      </MenuItem>\n    );\n  };\n\n  const autosuggestProps = {\n    suggestions: stateSuggestions,\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\n    getSuggestionValue,\n    renderSuggestion\n  };\n\n  return (\n    <div className={classes.root}>\n      <Autosuggest\n        {...autosuggestProps}\n        inputProps={{\n          classes,\n          id: \"react-autosuggest-simple\",\n          placeholder: \"Add a new item\",\n          value: single,\n          onChange: handleChange\n        }}\n        theme={{\n          container: classes.container,\n          suggestionsContainerOpen: classes.suggestionsContainerOpen,\n          suggestionsList: classes.suggestionsList,\n          suggestion: classes.suggestion\n        }}\n        renderInputComponent={inputProps => (\n          renderInputComponent(inputProps, iconFill)\n        )}\n        renderSuggestionsContainer={options => (\n          <Paper {...options.containerProps} square>\n            {options.children}\n          </Paper>\n        )}\n      />\n    </div>\n  );\n}\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}