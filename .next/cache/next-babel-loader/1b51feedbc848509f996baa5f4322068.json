{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport { Container } from \"./styles\";\nimport AddIcon from '@material-ui/icons/Add';\n\nconst escapeRegexCharacters = str => str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n\nconst getSuggestionValue = (suggestion, key) => suggestion[key];\n\nconst getSuggestions = (data, key, value) => {\n  const escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === \"\") {\n    return [];\n  }\n\n  const regex = new RegExp(\"\\\\b\" + escapedValue, \"i\");\n  return data.filter(el => regex.test(el[key]));\n};\n\nconst renderSuggestion = (suggestion, {\n  query\n}, key) => {\n  const suggestionText = suggestion[key];\n  const matches = match(suggestionText, query);\n  const parts = parse(suggestionText, matches);\n  return __jsx(\"span\", {\n    className: \"suggestion-content \" + suggestion.twitter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    className: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, parts.map((part, index) => {\n    const className = part.highlight ? \"highlight\" : null;\n    return __jsx(\"span\", {\n      className: className,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, part.text);\n  })));\n};\n\nconst AutoComplete = ({\n  data,\n  itemKey,\n  style,\n  handleSelected,\n  iconColor\n}) => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(\"\");\n  const {\n    0: suggestions,\n    1: setSuggestions\n  } = useState([]);\n\n  const handleOnChange = (_, {\n    newValue\n  }) => setValue(newValue);\n\n  const onSuggestionsFetchRequested = ({\n    value\n  }) => setSuggestions(getSuggestions(data, itemKey, value));\n\n  const onSuggestionsClearRequested = () => setSuggestions([]);\n\n  const inputProps = {\n    placeholder: \"Add new item\",\n    value,\n    onChange: handleOnChange\n  };\n  return __jsx(Container, _extends({}, style, {\n    searched: value.length,\n    color: iconColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), __jsx(AddIcon, {\n    className: \"icon\",\n    fontSize: \"medium\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), __jsx(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n    onSuggestionsClearRequested: onSuggestionsClearRequested,\n    onSuggestionSelected: (_, {\n      suggestionValue\n    }) => {\n      setValue('');\n      handleSelected(suggestionValue);\n    },\n    getSuggestionValue: suggestion => getSuggestionValue(suggestion, itemKey),\n    renderSuggestion: (suggestion, query) => renderSuggestion(suggestion, query, itemKey),\n    inputProps: inputProps,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }));\n};\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx"],"names":["React","useState","Autosuggest","match","parse","Container","AddIcon","escapeRegexCharacters","str","replace","getSuggestionValue","suggestion","key","getSuggestions","data","value","escapedValue","trim","regex","RegExp","filter","el","test","renderSuggestion","query","suggestionText","matches","parts","twitter","map","part","index","className","highlight","text","AutoComplete","itemKey","style","handleSelected","iconColor","setValue","suggestions","setSuggestions","handleOnChange","_","newValue","onSuggestionsFetchRequested","onSuggestionsClearRequested","inputProps","placeholder","onChange","length","suggestionValue"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport { Container } from \"./styles\";\nimport AddIcon from '@material-ui/icons/Add';\n\nconst escapeRegexCharacters = str => str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\nconst getSuggestionValue = (suggestion, key) => suggestion[key]\n\nconst getSuggestions = (data, key, value) => {\n  const escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === \"\") {\n    return [];\n  }\n\n  const regex = new RegExp(\"\\\\b\" + escapedValue, \"i\");\n  \n  return data.filter(el => regex.test(el[key]));\n}\n\nconst renderSuggestion = (suggestion, { query }, key) => {\n  \n  const suggestionText = suggestion[key]\n  const matches = match(suggestionText, query);\n  const parts = parse(suggestionText, matches);\n\n  return (\n    <span className={\"suggestion-content \" + suggestion.twitter}>\n      <span className=\"name\">\n        {parts.map((part, index) => {\n          const className = part.highlight ? \"highlight\" : null;\n          return (\n            <span className={className} key={index}>\n              {part.text}\n            </span>\n          );\n        })}\n      </span>\n    </span>\n  );\n}\n\nconst AutoComplete = ({\n  data, itemKey, style, handleSelected, iconColor\n}) => {\n  const [value, setValue] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n\n  const handleOnChange = (_, { newValue }) => setValue(newValue);\n  const onSuggestionsFetchRequested = ({ value }) => setSuggestions(getSuggestions(data, itemKey, value));\n  const onSuggestionsClearRequested = () => setSuggestions([]);\n\n  const inputProps = {\n    placeholder: \"Add new item\",\n    value,\n    onChange: handleOnChange\n  };\n  \n  return (\n    <Container\n      {...style}\n      searched={value.length}\n      color={iconColor}\n    >\n      <AddIcon className={\"icon\"} fontSize=\"medium\"/>\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={onSuggestionsClearRequested}\n        onSuggestionSelected={(_, { suggestionValue}) => {\n          setValue('')\n          handleSelected(suggestionValue)\n        }}\n        getSuggestionValue={suggestion => getSuggestionValue(suggestion, itemKey)}\n        renderSuggestion={(suggestion, query) => renderSuggestion(suggestion, query, itemKey)}\n        inputProps={inputProps}\n      />  \n    </Container>\n  );\n};\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}