{"ast":null,"code":"var _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport deburr from 'lodash/deburr';\nimport Autosuggest from 'react-autosuggest';\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles'; // https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\nfunction getSuggestions(value) {\n  const escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === \"\") {\n    return [];\n  }\n\n  const regex = new RegExp(\"\\\\b\" + escapedValue, \"i\");\n  return people.filter(person => regex.test(getSuggestionValue(person)));\n}\n\nfunction getSuggestionValue(suggestion) {\n  return `${suggestion.first} ${suggestion.last}`;\n}\n\nfunction renderSuggestion(suggestion, {\n  query\n}) {\n  const suggestionText = `${suggestion.first} ${suggestion.last}`;\n  const matches = AutosuggestHighlightMatch(suggestionText, query);\n  const parts = AutosuggestHighlightParse(suggestionText, matches);\n  return __jsx(\"span\", {\n    className: \"suggestion-content \" + suggestion.twitter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    className: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, parts.map((part, index) => {\n    const className = part.highlight ? \"highlight\" : null;\n    return __jsx(\"span\", {\n      className: className,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, part.text);\n  })));\n}\n\nconst AutoComplete = () => {\n  const [value, setValue] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n\n  const handleOnChange = (_, {\n    newValue\n  }) => setValue(newValue);\n\n  const onSuggestionsFetchRequested = ({\n    value\n  }) => setSuggestions(value);\n\n  const onSuggestionsClearRequested = () => setSuggestions([]);\n\n  const inputProps = {\n    placeholder: \"Add new item\",\n    value,\n    onChange: handleOnChange\n  };\n  return __jsx(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n    onSuggestionsClearRequested: onSuggestionsClearRequested,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    inputProps: inputProps,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  });\n};\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx"],"names":["React","deburr","Autosuggest","match","parse","TextField","Paper","MenuItem","makeStyles","escapeRegexCharacters","str","replace","getSuggestions","value","escapedValue","trim","regex","RegExp","people","filter","person","test","getSuggestionValue","suggestion","first","last","renderSuggestion","query","suggestionText","matches","AutosuggestHighlightMatch","parts","AutosuggestHighlightParse","twitter","map","part","index","className","highlight","text","AutoComplete","setValue","useState","suggestions","setSuggestions","handleOnChange","_","newValue","onSuggestionsFetchRequested","onSuggestionsClearRequested","inputProps","placeholder","onChange"],"mappings":"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","sourcesContent":["import React from 'react';\nimport deburr from 'lodash/deburr';\nimport Autosuggest from 'react-autosuggest';\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\n\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\nfunction getSuggestions(value) {\n  const escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === \"\") {\n    return [];\n  }\n\n  const regex = new RegExp(\"\\\\b\" + escapedValue, \"i\");\n\n  return people.filter(person => regex.test(getSuggestionValue(person)));\n}\n\nfunction getSuggestionValue(suggestion) {\n  return `${suggestion.first} ${suggestion.last}`;\n}\n\nfunction renderSuggestion(suggestion, { query }) {\n  const suggestionText = `${suggestion.first} ${suggestion.last}`;\n  const matches = AutosuggestHighlightMatch(suggestionText, query);\n  const parts = AutosuggestHighlightParse(suggestionText, matches);\n\n  return (\n    <span className={\"suggestion-content \" + suggestion.twitter}>\n      <span className=\"name\">\n        {parts.map((part, index) => {\n          const className = part.highlight ? \"highlight\" : null;\n\n          return (\n            <span className={className} key={index}>\n              {part.text}\n            </span>\n          );\n        })}\n      </span>\n    </span>\n  );\n}\n\nconst AutoComplete = () => {\n  const [value, setValue] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n\n  const handleOnChange = (_, { newValue }) => setValue(newValue);\n  const onSuggestionsFetchRequested = ({ value }) => setSuggestions(value);\n  const onSuggestionsClearRequested = () => setSuggestions([]);\n\n  const inputProps = {\n    placeholder: \"Add new item\",\n    value,\n    onChange: handleOnChange\n  };\n  return (\n    <Autosuggest\n      suggestions={suggestions}\n      onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n      onSuggestionsClearRequested={onSuggestionsClearRequested}\n      getSuggestionValue={getSuggestionValue}\n      renderSuggestion={renderSuggestion}\n      inputProps={inputProps}\n    />\n  );\n};\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}