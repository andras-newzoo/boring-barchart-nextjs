{"ast":null,"code":"var _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyDark } from \"../styles\";\nimport { easeCubicInOut } from 'd3-ease';\nimport 'd3-transition';\nimport { createUpdateSvg } from \"../../../utils\";\nconst ChartWrapper = styled.div.withConfig({\n  displayName: \"PercentageChart__ChartWrapper\",\n  componentId: \"sc-18c8aar-0\"\n})([\"position:relative;height:70%;width:90%;border:1px solid \", \";border-radius:20px;overflow:hidden;svg{position:absolute;rect{fill:\", \";}}\"], colorGreyDark, colorGreen);\n\nconst PercentageChart = ({\n  data,\n  updateDuration = 1000\n}) => {\n  // const svgRef = useRef();\n  const divRef = useRef();\n  const storedValues = useRef();\n  const prevData = usePrevious(data);\n  const {\n    0: init,\n    1: setInit\n  } = useState(false);\n  let initVis, updateData;\n  const dims = useSvgResize(divRef);\n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n  useEffect(() => {//console.log('dims', dims)\n  }, [dims]);\n  useEffect(() => {\n    if (init && prevData !== data) {\n      if (data > 1) {} else {// updateData()\n      }\n    }\n  }, [data, init, prevData, updateData]);\n\n  initVis = () => {\n    const area = select(divRef.current);\n    const {\n      chartArea\n    } = createUpdateSvg({\n      area,\n      dims,\n      append: true\n    });\n    chartArea.append('rect').attr('x', 0).attr('y', 0).attr('height', dims.height + 1).attr('width', 0);\n    storedValues.current = {\n      area,\n      chartArea\n    };\n    updateRect(updateDuration);\n  };\n\n  updateData = () => {\n    updateRect(updateDuration);\n  };\n\n  const resetChart = () => {\n    const {\n      chartArea\n    } = storedValues.current;\n    chartArea.select('rect').attr('width', 0);\n  };\n\n  const updateDims = () => {};\n\n  const updateRect = duration => {\n    const {\n      chartArea\n    } = storedValues.current;\n    chartArea.select('rect').transition().duration(duration).ease(easeCubicInOut).attr('width', dims.width * data);\n  };\n\n  return __jsx(ChartWrapper, {\n    ref: divRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  });\n};\n\nexport default PercentageChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx"],"names":["React","useRef","useEffect","useState","styled","useSvgResize","usePrevious","select","colorGreen","colorGreyDark","easeCubicInOut","createUpdateSvg","ChartWrapper","div","PercentageChart","data","updateDuration","divRef","storedValues","prevData","init","setInit","initVis","updateData","dims","width","height","area","current","chartArea","append","attr","updateRect","resetChart","updateDims","duration","transition","ease"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyDark } from \"../styles\";\nimport { easeCubicInOut } from 'd3-ease'\nimport 'd3-transition'\nimport { createUpdateSvg } from \"../../../utils\";\n\nconst ChartWrapper = styled.div`\n  position: relative;\n  height: 70%;\n  width: 90%;\n\n  border: 1px solid ${colorGreyDark};\n\n  border-radius: 20px;\n  overflow: hidden;\n\n  svg {\n    position: absolute;\n\n    rect {\n      fill: ${colorGreen};\n    }\n  }\n`;\n\nconst PercentageChart = ({ \n  data,\n  updateDuration=1000\n}) => {\n  // const svgRef = useRef();\n  const divRef = useRef();\n  const storedValues = useRef();\n  const prevData = usePrevious(data);\n  const [init, setInit] = useState(false);\n  let initVis, updateData\n\n  const dims = useSvgResize(divRef);\n  \n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init,   initVis]);\n\n  useEffect(() => {\n    //console.log('dims', dims)\n  }, [dims]);\n\n  useEffect(() => {\n    if(init && (prevData !== data)){\n      if(data > 1){\n\n      } else {   \n        // updateData()\n      }\n    }\n  }, [data, init, prevData, updateData]);\n\n  initVis = () => {\n    const area = select(divRef.current)\n    const { chartArea } = createUpdateSvg({\n      area,\n      dims,\n      append: true\n    })\n\n    chartArea\n      .append('rect')\n      .attr('x', 0)\n      .attr('y', 0)\n      .attr('height', dims.height + 1)\n      .attr('width', 0)\n\n    storedValues.current = {\n      area,\n      chartArea\n    };\n    updateRect(updateDuration)\n\n  };\n\n  updateData = () => {\n    updateRect(updateDuration)\n  };\n\n  const resetChart = () => {\n    const { chartArea } = storedValues.current\n    chartArea.select('rect')\n      .attr('width', 0)\n  };\n\n  const updateDims = () => {};\n\n  const updateRect = duration => {\n    const { chartArea } = storedValues.current\n\n    chartArea.select('rect')\n      .transition()\n      .duration(duration)\n      .ease(easeCubicInOut)\n      .attr('width', dims.width * data)\n  }\n\n  return <ChartWrapper ref={divRef}/>\n};\n\nexport default PercentageChart;\n"]},"metadata":{},"sourceType":"module"}