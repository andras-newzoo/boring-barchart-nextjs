{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position: relative;\\n  \", \";\\n  height: 100%;\\n  width: 100%;\\n\\n  svg {\\n    position: absolute;\\n    width: 100%;\\n    height: 100%;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize } from \"../../../hooks\";\nimport { testBorder } from \"../../../styles\";\nimport { select } from \"d3-selection\";\nvar ChartWrapper = styled.div(_templateObject(), testBorder);\n\nvar PercentageChart = function PercentageChart(_ref) {\n  var data = _ref.data,\n      _ref$margin = _ref.margin,\n      margin = _ref$margin === void 0 ? {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  } : _ref$margin;\n  var svgRef = useRef();\n  var storedValues = useRef();\n\n  var _useState = useState(false),\n      init = _useState[0],\n      setInit = _useState[1];\n\n  var initVis;\n  var dims = useSvgResize(svgRef);\n  useEffect(function () {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n  useEffect(function () {//console.log('dims', dims)\n  }, [dims]);\n  useEffect(function () {//console.log('data', data)\n  }, [data]);\n\n  initVis = function initVis() {\n    var svg = select(svgRef.current);\n    svg.append(\"g\").attr(\"class\", \"chart-area\").attr('transform', \"translate(\".concat(margin.left, \", \").concat(margin.top, \")\"));\n    var chartArea = select(\".chart-area\");\n    var chartWidth = dims.width - margin.right - margin.left;\n    var chartHeight = dims.height - margin.top - margin.bottom;\n    storedValues.current = {\n      chartArea: chartArea,\n      chartWidth: chartWidth,\n      chartHeight: chartHeight\n    };\n  };\n\n  var updateData = function updateData() {};\n\n  var resetChart = function resetChart() {};\n\n  var updateDims = function updateDims() {};\n\n  return __jsx(ChartWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, __jsx(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }));\n};\n\nexport default PercentageChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx"],"names":["React","useRef","useEffect","useState","styled","useSvgResize","testBorder","select","ChartWrapper","div","PercentageChart","data","margin","top","right","bottom","left","svgRef","storedValues","init","setInit","initVis","dims","width","height","svg","current","append","attr","chartArea","chartWidth","chartHeight","updateData","resetChart","updateDims"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA,IAAMC,YAAY,GAAGJ,MAAM,CAACK,GAAV,oBAEdH,UAFc,CAAlB;;AAaA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,OAMlB;AAAA,MALJC,IAKI,QALJA,IAKI;AAAA,yBAJJC,MAII;AAAA,MAJJA,MAII,4BAJK;AACPC,IAAAA,GAAG,EAAC,CADG;AACAC,IAAAA,KAAK,EAAE,CADP;AACUC,IAAAA,MAAM,EAAE,CADlB;AACqBC,IAAAA,IAAI,EAAE;AAD3B,GAIL;AACJ,MAAMC,MAAM,GAAGhB,MAAM,EAArB;AACA,MAAMiB,YAAY,GAAGjB,MAAM,EAA3B;;AAFI,kBAGoBE,QAAQ,CAAC,KAAD,CAH5B;AAAA,MAGGgB,IAHH;AAAA,MAGSC,OAHT;;AAIJ,MAAIC,OAAJ;AAEA,MAAMC,IAAI,GAAGjB,YAAY,CAACY,MAAD,CAAzB;AAEAf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIoB,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACE,MAAnB,IAA6Bb,IAA7B,IAAqC,CAACQ,IAA1C,EAAgD;AAC9CE,MAAAA,OAAO;AACPD,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,GALQ,EAKN,CAACT,IAAD,EAAOW,IAAI,CAACE,MAAZ,EAAoBF,IAAI,CAACC,KAAzB,EAAgCJ,IAAhC,EAAsCE,OAAtC,CALM,CAAT;AAOAnB,EAAAA,SAAS,CAAC,YAAM,CACd;AACD,GAFQ,EAEN,CAACoB,IAAD,CAFM,CAAT;AAIApB,EAAAA,SAAS,CAAC,YAAM,CACd;AACD,GAFQ,EAEN,CAACS,IAAD,CAFM,CAAT;;AAIAU,EAAAA,OAAO,GAAG,mBAAM;AACd,QAAMI,GAAG,GAAGlB,MAAM,CAACU,MAAM,CAACS,OAAR,CAAlB;AACAD,IAAAA,GAAG,CACAE,MADH,CACU,GADV,EAEGC,IAFH,CAEQ,OAFR,EAEiB,YAFjB,EAGGA,IAHH,CAGQ,WAHR,sBAGkChB,MAAM,CAACI,IAHzC,eAGkDJ,MAAM,CAACC,GAHzD;AAIA,QAAMgB,SAAS,GAAGtB,MAAM,CAAC,aAAD,CAAxB;AACA,QAAMuB,UAAU,GAAGR,IAAI,CAACC,KAAL,GAAaX,MAAM,CAACE,KAApB,GAA4BF,MAAM,CAACI,IAAtD;AACA,QAAMe,WAAW,GAAGT,IAAI,CAACE,MAAL,GAAcZ,MAAM,CAACC,GAArB,GAA2BD,MAAM,CAACG,MAAtD;AAEAG,IAAAA,YAAY,CAACQ,OAAb,GAAuB;AACrBG,MAAAA,SAAS,EAATA,SADqB;AAErBC,MAAAA,UAAU,EAAVA,UAFqB;AAGrBC,MAAAA,WAAW,EAAXA;AAHqB,KAAvB;AAKD,GAfD;;AAiBA,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM,CAAE,CAA3B;;AAEA,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM,CAAE,CAA3B;;AAEA,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM,CAAE,CAA3B;;AAEA,SACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAEjB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAzDD;;AA2DA,eAAeP,eAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize } from \"../../../hooks\";\nimport { testBorder } from \"../../../styles\";\nimport { select } from \"d3-selection\";\n\nconst ChartWrapper = styled.div`\n  position: relative;\n  ${testBorder};\n  height: 100%;\n  width: 100%;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst PercentageChart = ({ \n  data,\n  margin = {\n    top:1, right: 1, bottom: 1, left: 1\n  }\n\n}) => {\n  const svgRef = useRef();\n  const storedValues = useRef();\n  const [init, setInit] = useState(false);\n  let initVis\n\n  const dims = useSvgResize(svgRef);\n\n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n\n  useEffect(() => {\n    //console.log('dims', dims)\n  }, [dims]);\n\n  useEffect(() => {\n    //console.log('data', data)\n  }, [data]);\n\n  initVis = () => {\n    const svg = select(svgRef.current);\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"chart-area\")\n      .attr('transform', `translate(${margin.left}, ${margin.top})`)\n    const chartArea = select(\".chart-area\");\n    const chartWidth = dims.width - margin.right - margin.left\n    const chartHeight = dims.height - margin.top - margin.bottom\n\n    storedValues.current = {\n      chartArea,\n      chartWidth,\n      chartHeight\n    };\n  };\n\n  const updateData = () => {};\n\n  const resetChart = () => {};\n\n  const updateDims = () => {};\n\n  return (\n    <ChartWrapper>\n      <svg ref={svgRef} />\n    </ChartWrapper>\n  );\n};\n\nexport default PercentageChart;\n"]},"metadata":{},"sourceType":"module"}