{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport deburr from \"lodash/deburr\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { fontWeightS, fontWeightL } from \"../../styles/sharedStyles\";\nimport { Grid } from \"@material-ui/core\";\nimport { useStyles, AddIcon } from \"./styles\";\nimport { getSuggestions, getSuggestionValue } from './helperFunctions';\n\nfunction _renderInputComponent(inputProps) {\n  var classes = inputProps.classes,\n      _inputProps$inputRef = inputProps.inputRef,\n      _inputRef = _inputProps$inputRef === void 0 ? function () {} : _inputProps$inputRef,\n      ref = inputProps.ref,\n      other = _objectWithoutProperties(inputProps, [\"classes\", \"inputRef\", \"ref\"]);\n\n  return __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"center\",\n    justify: \"center\",\n    className: classes.grid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, __jsx(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, __jsx(AddIcon, {\n    color: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  })), __jsx(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, __jsx(TextField, _extends({\n    fullWidth: true,\n    InputProps: {\n      inputRef: function inputRef(node) {\n        ref(node);\n\n        _inputRef(node);\n      },\n      classes: {\n        input: classes.input\n      }\n    }\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }))));\n} // function getSuggestions(data, itemKey, value) {\n//   const inputValue = deburr(value.trim()).toLowerCase();\n//   const inputLength = inputValue.length;\n//   let count = 0;\n//   return inputLength === 0\n//     ? []\n//     : data.filter(item => {\n//         const keep =\n//           count < 5 &&\n//           item[itemKey].slice(0, inputLength).toLowerCase() === inputValue;\n//         if (keep) {\n//           count += 1;\n//         }\n//         return keep;\n//       });\n// }\n\n\nfunction AutoComplete(_ref) {\n  var data = _ref.data,\n      itemKey = _ref.itemKey,\n      iconFill = _ref.iconFill;\n  var classes = useStyles();\n\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      single = _React$useState2[0],\n      setSingle = _React$useState2[1];\n\n  var _useState = useState([]),\n      stateSuggestions = _useState[0],\n      setSuggestions = _useState[1]; // const getSuggestionValue = item => item[itemKey];\n\n\n  var handleSuggestionsFetchRequested = function handleSuggestionsFetchRequested(_ref2) {\n    var value = _ref2.value;\n    return setSuggestions(getSuggestions(data, itemKey, value));\n  };\n\n  var handleSuggestionsClearRequested = function handleSuggestionsClearRequested() {\n    return setSuggestions([]);\n  };\n\n  var handleChange = function handleChange(_, _ref3) {\n    var newValue = _ref3.newValue;\n    return setSingle(newValue);\n  };\n\n  var renderSuggestion = function renderSuggestion(data, _ref4) {\n    var query = _ref4.query,\n        isHighlighted = _ref4.isHighlighted;\n    var matches = match(data[itemKey], query);\n    var parts = parse(data[itemKey], matches);\n    return __jsx(MenuItem, {\n      selected: isHighlighted,\n      component: \"div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, parts.map(function (part) {\n      return __jsx(\"span\", {\n        key: part.text,\n        style: {\n          fontWeight: part.highlight ? fontWeightL : fontWeightS\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, part.text);\n    })));\n  };\n\n  var autosuggestProps = {\n    suggestions: stateSuggestions,\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion\n  };\n  return __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, __jsx(Autosuggest, _extends({}, autosuggestProps, {\n    inputProps: {\n      classes: classes,\n      id: \"react-autosuggest-simple\",\n      placeholder: \"Add a new item\",\n      value: single,\n      onChange: handleChange\n    },\n    theme: {\n      container: classes.container,\n      suggestionsContainerOpen: classes.suggestionsContainerOpen,\n      suggestionsList: classes.suggestionsList,\n      suggestion: classes.suggestion\n    },\n    renderInputComponent: function renderInputComponent(inputProps) {\n      return _renderInputComponent(inputProps, iconFill);\n    },\n    renderSuggestionsContainer: function renderSuggestionsContainer(options) {\n      return __jsx(Paper, _extends({}, options.containerProps, {\n        square: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), options.children);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })));\n}\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx"],"names":["React","useState","deburr","Autosuggest","match","parse","TextField","Paper","MenuItem","fontWeightS","fontWeightL","Grid","useStyles","AddIcon","getSuggestions","getSuggestionValue","renderInputComponent","inputProps","classes","inputRef","ref","other","grid","node","input","AutoComplete","data","itemKey","iconFill","single","setSingle","stateSuggestions","setSuggestions","handleSuggestionsFetchRequested","value","handleSuggestionsClearRequested","handleChange","_","newValue","renderSuggestion","query","isHighlighted","matches","parts","map","part","text","fontWeight","highlight","autosuggestProps","suggestions","onSuggestionsFetchRequested","onSuggestionsClearRequested","root","id","placeholder","onChange","container","suggestionsContainerOpen","suggestionsList","suggestion","options","containerProps","children"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport deburr from \"lodash/deburr\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { fontWeightS, fontWeightL } from \"../../styles/sharedStyles\";\nimport { Grid } from \"@material-ui/core\";\nimport { useStyles, AddIcon } from \"./styles\";\nimport { getSuggestions, getSuggestionValue } from './helperFunctions'\n \nfunction renderInputComponent(inputProps) {\n  const { classes, inputRef = () => {}, ref, ...other } = inputProps;\n  \n  return (\n    <Grid \n      container \n      spacing={1} \n      alignItems=\"center\"\n      justify=\"center\"\n      className={classes.grid}\n    >\n      <Grid item>\n        <AddIcon color=\"\"/>\n      </Grid>\n      <Grid item>\n        <TextField\n          fullWidth\n          InputProps={{\n            inputRef: node => {\n              ref(node);\n              inputRef(node);\n            },\n            classes: {\n              input: classes.input\n            }\n          }}\n          {...other}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n\n\n// function getSuggestions(data, itemKey, value) {\n//   const inputValue = deburr(value.trim()).toLowerCase();\n//   const inputLength = inputValue.length;\n//   let count = 0;\n\n//   return inputLength === 0\n//     ? []\n//     : data.filter(item => {\n//         const keep =\n//           count < 5 &&\n//           item[itemKey].slice(0, inputLength).toLowerCase() === inputValue;\n//         if (keep) {\n//           count += 1;\n//         }\n//         return keep;\n//       });\n// }\n\nfunction AutoComplete({ data, itemKey, iconFill }) {\n  const classes = useStyles();\n\n  const [single, setSingle] = React.useState(\"\");\n\n  const [stateSuggestions, setSuggestions] = useState([]);\n\n  // const getSuggestionValue = item => item[itemKey];\n\n  const handleSuggestionsFetchRequested = ({ value }) =>\n    setSuggestions(getSuggestions(data, itemKey, value));\n\n  const handleSuggestionsClearRequested = () => setSuggestions([]);\n\n  const handleChange = (_, { newValue }) => setSingle(newValue);\n\n  const renderSuggestion = (data, { query, isHighlighted }) => {\n    const matches = match(data[itemKey], query);\n    const parts = parse(data[itemKey], matches);\n    \n    return (\n      <MenuItem selected={isHighlighted} component=\"div\">\n        <div>\n          {parts.map(part => (\n            <span\n              key={part.text}\n              style={{ fontWeight: part.highlight ? fontWeightL : fontWeightS }}\n            >\n              {part.text}\n            </span>\n          ))}\n        </div>\n      </MenuItem>\n    );\n  };\n\n  const autosuggestProps = {\n    suggestions: stateSuggestions,\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\n    getSuggestionValue,\n    renderSuggestion\n  };\n\n  return (\n    <div className={classes.root}>\n      <Autosuggest\n        {...autosuggestProps}\n        inputProps={{\n          classes,\n          id: \"react-autosuggest-simple\",\n          placeholder: \"Add a new item\",\n          value: single,\n          onChange: handleChange\n        }}\n        theme={{\n          container: classes.container,\n          suggestionsContainerOpen: classes.suggestionsContainerOpen,\n          suggestionsList: classes.suggestionsList,\n          suggestion: classes.suggestion\n        }}\n        renderInputComponent={inputProps => (\n          renderInputComponent(inputProps, iconFill)\n        )}\n        renderSuggestionsContainer={options => (\n          <Paper {...options.containerProps} square>\n            {options.children}\n          </Paper>\n        )}\n      />\n    </div>\n  );\n}\n\nexport default AutoComplete;"]},"metadata":{},"sourceType":"module"}