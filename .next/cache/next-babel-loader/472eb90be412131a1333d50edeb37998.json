{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport deburr from \"lodash/deburr\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { fontWeightS, fontWeightL } from \"../../styles/sharedStyles\";\nimport { Grid } from \"@material-ui/core\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: 250,\n    width: '100%',\n    border: '1px solid black',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'stretch'\n  },\n  grid: {\n    border: '1px solid black',\n    width: '100%'\n  },\n  container: {\n    position: \"relative\"\n  },\n  suggestionsContainerOpen: {\n    position: \"absolute\",\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0\n  },\n  suggestion: {\n    display: \"block\"\n  },\n  suggestionsList: {\n    margin: 0,\n    padding: 0,\n    listStyleType: \"none\"\n  },\n  divider: {\n    height: theme.spacing(2)\n  }\n}));\n\nfunction renderInputComponent(inputProps) {\n  const {\n    classes,\n    inputRef = () => {},\n    ref\n  } = inputProps,\n        other = _objectWithoutProperties(inputProps, [\"classes\", \"inputRef\", \"ref\"]);\n\n  return __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"center\",\n    className: classes.grid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, __jsx(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(AccountCircle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })), __jsx(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, __jsx(TextField, _extends({\n    fullWidth: true,\n    InputProps: {\n      inputRef: node => {\n        ref(node);\n        inputRef(node);\n      },\n      classes: {\n        input: classes.input\n      }\n    }\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }))));\n}\n\nfunction getSuggestions(data, itemKey, value) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n  return inputLength === 0 ? [] : data.filter(item => {\n    const keep = count < 5 && item[itemKey].slice(0, inputLength).toLowerCase() === inputValue;\n\n    if (keep) {\n      count += 1;\n    }\n\n    return keep;\n  });\n}\n\nfunction AutoComplete({\n  data,\n  itemKey\n}) {\n  const classes = useStyles();\n  const [single, setSingle] = React.useState(\"\");\n  const {\n    0: stateSuggestions,\n    1: setSuggestions\n  } = useState([]);\n\n  const getSuggestionValue = item => item[itemKey];\n\n  const handleSuggestionsFetchRequested = ({\n    value\n  }) => setSuggestions(getSuggestions(data, itemKey, value));\n\n  const handleSuggestionsClearRequested = () => setSuggestions([]);\n\n  const handleChange = (_, {\n    newValue\n  }) => setSingle(newValue);\n\n  const renderSuggestion = (data, {\n    query,\n    isHighlighted\n  }) => {\n    const matches = match(data[itemKey], query);\n    const parts = parse(data[itemKey], matches);\n    return __jsx(MenuItem, {\n      selected: isHighlighted,\n      component: \"div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, parts.map(part => __jsx(\"span\", {\n      key: part.text,\n      style: {\n        fontWeight: part.highlight ? fontWeightL : fontWeightS\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, part.text))));\n  };\n\n  const autosuggestProps = {\n    renderInputComponent,\n    suggestions: stateSuggestions,\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\n    getSuggestionValue,\n    renderSuggestion\n  };\n  return __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, __jsx(Autosuggest, _extends({}, autosuggestProps, {\n    inputProps: {\n      classes,\n      id: \"react-autosuggest-simple\",\n      placeholder: \"Add a new item\",\n      value: single,\n      onChange: handleChange\n    },\n    theme: {\n      container: classes.container,\n      suggestionsContainerOpen: classes.suggestionsContainerOpen,\n      suggestionsList: classes.suggestionsList,\n      suggestion: classes.suggestion\n    },\n    renderSuggestionsContainer: options => __jsx(Paper, _extends({}, options.containerProps, {\n      square: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), options.children),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  })));\n}\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx"],"names":["React","useState","deburr","Autosuggest","match","parse","TextField","Paper","MenuItem","AccountCircle","makeStyles","fontWeightS","fontWeightL","Grid","useStyles","theme","root","height","width","border","display","alignItems","justifyContent","grid","container","position","suggestionsContainerOpen","zIndex","marginTop","spacing","left","right","suggestion","suggestionsList","margin","padding","listStyleType","divider","renderInputComponent","inputProps","classes","inputRef","ref","other","node","input","getSuggestions","data","itemKey","value","inputValue","trim","toLowerCase","inputLength","length","count","filter","item","keep","slice","AutoComplete","single","setSingle","stateSuggestions","setSuggestions","getSuggestionValue","handleSuggestionsFetchRequested","handleSuggestionsClearRequested","handleChange","_","newValue","renderSuggestion","query","isHighlighted","matches","parts","map","part","text","fontWeight","highlight","autosuggestProps","suggestions","onSuggestionsFetchRequested","onSuggestionsClearRequested","id","placeholder","onChange","options","containerProps","children"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport deburr from \"lodash/deburr\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { fontWeightS, fontWeightL } from \"../../styles/sharedStyles\";\nimport { Grid } from \"@material-ui/core\";\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: 250,\n    width: '100%',\n    border:  '1px solid black',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'stretch'\n  },\n  grid: {\n    border:  '1px solid black',\n    width: '100%'\n  },\n  container: {\n    position: \"relative\"\n  },\n  suggestionsContainerOpen: {\n    position: \"absolute\",\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0\n  },\n  suggestion: {\n    display: \"block\"\n  },\n  suggestionsList: {\n    margin: 0,\n    padding: 0,\n    listStyleType: \"none\"\n  },\n  divider: {\n    height: theme.spacing(2)\n  }\n}));\n\nfunction renderInputComponent(inputProps) {\n  const { classes, inputRef = () => {}, ref, ...other } = inputProps;\n\n  return (\n    <Grid \n      container \n      spacing={1} \n      alignItems=\"center\"\n      className={classes.grid}\n    >\n      <Grid item>\n        <AccountCircle />\n      </Grid>\n      <Grid item>\n        <TextField\n          fullWidth\n          InputProps={{\n            inputRef: node => {\n              ref(node);\n              inputRef(node);\n            },\n            classes: {\n              input: classes.input\n            }\n          }}\n          {...other}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n\nfunction getSuggestions(data, itemKey, value) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n\n  return inputLength === 0\n    ? []\n    : data.filter(item => {\n        const keep =\n          count < 5 &&\n          item[itemKey].slice(0, inputLength).toLowerCase() === inputValue;\n\n        if (keep) {\n          count += 1;\n        }\n\n        return keep;\n      });\n}\n\nfunction AutoComplete({ data, itemKey }) {\n  const classes = useStyles();\n\n  const [single, setSingle] = React.useState(\"\");\n\n  const [stateSuggestions, setSuggestions] = useState([]);\n\n  const getSuggestionValue = item => item[itemKey];\n\n  const handleSuggestionsFetchRequested = ({ value }) =>\n    setSuggestions(getSuggestions(data, itemKey, value));\n\n  const handleSuggestionsClearRequested = () => setSuggestions([]);\n\n  const handleChange = (_, { newValue }) => setSingle(newValue);\n\n  const renderSuggestion = (data, { query, isHighlighted }) => {\n    const matches = match(data[itemKey], query);\n    const parts = parse(data[itemKey], matches);\n\n    return (\n      <MenuItem selected={isHighlighted} component=\"div\">\n        <div>\n          {parts.map(part => (\n            <span\n              key={part.text}\n              style={{ fontWeight: part.highlight ? fontWeightL : fontWeightS }}\n            >\n              {part.text}\n            </span>\n          ))}\n        </div>\n      </MenuItem>\n    );\n  };\n\n  const autosuggestProps = {\n    renderInputComponent,\n    suggestions: stateSuggestions,\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\n    getSuggestionValue,\n    renderSuggestion\n  };\n\n  return (\n    <div className={classes.root}>\n      <Autosuggest\n        {...autosuggestProps}\n        inputProps={{\n          classes,\n          id: \"react-autosuggest-simple\",\n          placeholder: \"Add a new item\",\n          value: single,\n          onChange: handleChange\n        }}\n        theme={{\n          container: classes.container,\n          suggestionsContainerOpen: classes.suggestionsContainerOpen,\n          suggestionsList: classes.suggestionsList,\n          suggestion: classes.suggestion\n        }}\n        renderSuggestionsContainer={options => (\n          <Paper {...options.containerProps} square>\n            {options.children}\n          </Paper>\n        )}\n      />\n    </div>\n  );\n}\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}