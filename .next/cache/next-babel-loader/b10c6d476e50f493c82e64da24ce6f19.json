{"ast":null,"code":"import { useEffect, useState, useCallback } from \"react\";\n\nfunction useWindowSize() {\n  var isClient = true;\n  var getSize = useCallback(function () {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }, [isClient]);\n\n  var _useState = useState(getSize),\n      windowSize = _useState[0],\n      setWindowSize = _useState[1];\n\n  useEffect(function () {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return function () {\n      return window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [getSize, isClient]); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}\n\nexport default useWindowSize;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/hooks/useWindowSize.js"],"names":["useEffect","useState","useCallback","useWindowSize","isClient","getSize","width","window","innerWidth","undefined","height","innerHeight","windowSize","setWindowSize","handleResize","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,WAA9B,QAAiD,OAAjD;;AAEA,SAASC,aAAT,GAAyB;AACvB,MAAMC,QAAQ,OAAd;AAEA,MAAMC,OAAO,GAAGH,WAAW,CACzB;AAAA,WAAO;AACLI,MAAAA,KAAK,EAAEF,QAAQ,GAAGG,MAAM,CAACC,UAAV,GAAuBC,SADjC;AAELC,MAAAA,MAAM,EAAEN,QAAQ,GAAGG,MAAM,CAACI,WAAV,GAAwBF;AAFnC,KAAP;AAAA,GADyB,EAKzB,CAACL,QAAD,CALyB,CAA3B;;AAHuB,kBAWaH,QAAQ,CAACI,OAAD,CAXrB;AAAA,MAWhBO,UAXgB;AAAA,MAWJC,aAXI;;AAavBb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACI,QAAL,EAAe;AACb,aAAO,KAAP;AACD;;AAED,aAASU,YAAT,GAAwB;AACtBD,MAAAA,aAAa,CAACR,OAAO,EAAR,CAAb;AACD;;AAEDE,IAAAA,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,WAAO;AAAA,aAAMP,MAAM,CAACS,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAN;AAAA,KAAP;AACD,GAXQ,EAWN,CAACT,OAAD,EAAUD,QAAV,CAXM,CAAT,CAbuB,CAwBE;;AAEzB,SAAOQ,UAAP;AACD;;AAED,eAAeT,aAAf","sourcesContent":["import { useEffect, useState, useCallback } from \"react\";\n\nfunction useWindowSize() {\n  const isClient = typeof window === \"object\";\n\n  const getSize = useCallback(\n    () => ({\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    }),\n    [isClient]\n  );\n\n  const [windowSize, setWindowSize] = useState(getSize);\n\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [getSize, isClient]); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}\n\nexport default useWindowSize;\n"]},"metadata":{},"sourceType":"module"}