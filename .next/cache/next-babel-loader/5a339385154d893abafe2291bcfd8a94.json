{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport { Container } from \"./styles\";\nimport AddIcon from '@material-ui/icons/Add';\n\nvar escapeRegexCharacters = function escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n};\n\nvar _getSuggestionValue = function getSuggestionValue(suggestion, key) {\n  return suggestion[key];\n};\n\nvar getSuggestions = function getSuggestions(data, key, value) {\n  var escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === \"\") {\n    return [];\n  }\n\n  var regex = new RegExp(\"\\\\b\" + escapedValue, \"i\");\n  return data.filter(function (el) {\n    return regex.test(el[key]);\n  });\n};\n\nvar _renderSuggestion = function renderSuggestion(suggestion, _ref, key) {\n  var query = _ref.query;\n  var suggestionText = suggestion[key];\n  var matches = match(suggestionText, query);\n  var parts = parse(suggestionText, matches);\n  return __jsx(\"span\", {\n    className: \"suggestion-content \" + suggestion.twitter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    className: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, parts.map(function (part, index) {\n    var className = part.highlight ? \"highlight\" : null;\n    return __jsx(\"span\", {\n      className: className,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, part.text);\n  })));\n};\n\nvar AutoComplete = function AutoComplete(_ref2) {\n  var data = _ref2.data,\n      itemKey = _ref2.itemKey,\n      style = _ref2.style,\n      handleSelected = _ref2.handleSelected;\n\n  var _useState = useState(\"\"),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _useState2 = useState([]),\n      suggestions = _useState2[0],\n      setSuggestions = _useState2[1];\n\n  var handleOnChange = function handleOnChange(_, _ref3) {\n    var newValue = _ref3.newValue;\n    return setValue(newValue);\n  };\n\n  var onSuggestionsFetchRequested = function onSuggestionsFetchRequested(_ref4) {\n    var value = _ref4.value;\n    return setSuggestions(getSuggestions(data, itemKey, value));\n  };\n\n  var onSuggestionsClearRequested = function onSuggestionsClearRequested() {\n    return setSuggestions([]);\n  };\n\n  var inputProps = {\n    placeholder: \"Add new item\",\n    value: value,\n    onChange: handleOnChange\n  };\n  return __jsx(Container, _extends({}, style, {\n    searched: value.length,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), __jsx(AddIcon, {\n    className: \"icon\",\n    fontSize: \"medium\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), __jsx(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n    onSuggestionsClearRequested: onSuggestionsClearRequested,\n    onSuggestionSelected: function onSuggestionSelected(_, _ref5) {\n      var suggestionValue = _ref5.suggestionValue;\n      return handleSelected(suggestionValue);\n    },\n    getSuggestionValue: function getSuggestionValue(suggestion) {\n      return _getSuggestionValue(suggestion, itemKey);\n    },\n    renderSuggestion: function renderSuggestion(suggestion, query) {\n      return _renderSuggestion(suggestion, query, itemKey);\n    },\n    inputProps: inputProps,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }));\n};\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx"],"names":["React","useState","Autosuggest","match","parse","Container","AddIcon","escapeRegexCharacters","str","replace","getSuggestionValue","suggestion","key","getSuggestions","data","value","escapedValue","trim","regex","RegExp","filter","el","test","renderSuggestion","query","suggestionText","matches","parts","twitter","map","part","index","className","highlight","text","AutoComplete","itemKey","style","handleSelected","setValue","suggestions","setSuggestions","handleOnChange","_","newValue","onSuggestionsFetchRequested","onSuggestionsClearRequested","inputProps","placeholder","onChange","length","suggestionValue"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport { Container } from \"./styles\";\nimport AddIcon from '@material-ui/icons/Add';\n\nconst escapeRegexCharacters = str => str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\nconst getSuggestionValue = (suggestion, key) => suggestion[key]\n\nconst getSuggestions = (data, key, value) => {\n  const escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === \"\") {\n    return [];\n  }\n\n  const regex = new RegExp(\"\\\\b\" + escapedValue, \"i\");\n  \n  return data.filter(el => regex.test(el[key]));\n}\n\nconst renderSuggestion = (suggestion, { query }, key) => {\n  \n  const suggestionText = suggestion[key]\n  const matches = match(suggestionText, query);\n  const parts = parse(suggestionText, matches);\n\n  return (\n    <span className={\"suggestion-content \" + suggestion.twitter}>\n      <span className=\"name\">\n        {parts.map((part, index) => {\n          const className = part.highlight ? \"highlight\" : null;\n          return (\n            <span className={className} key={index}>\n              {part.text}\n            </span>\n          );\n        })}\n      </span>\n    </span>\n  );\n}\n\nconst AutoComplete = ({\n  data, itemKey, style, handleSelected\n}) => {\n  const [value, setValue] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n\n  const handleOnChange = (_, { newValue }) => setValue(newValue);\n  const onSuggestionsFetchRequested = ({ value }) => setSuggestions(getSuggestions(data, itemKey, value));\n  const onSuggestionsClearRequested = () => setSuggestions([]);\n\n  const inputProps = {\n    placeholder: \"Add new item\",\n    value,\n    onChange: handleOnChange\n  };\n\n\n  \n  return (\n    <Container\n      {...style}\n      searched={value.length}\n    >\n      <AddIcon className={\"icon\"} fontSize=\"medium\"/>\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={onSuggestionsClearRequested}\n        onSuggestionSelected={(_, { suggestionValue}) => handleSelected(suggestionValue)}\n        getSuggestionValue={suggestion => getSuggestionValue(suggestion, itemKey)}\n        renderSuggestion={(suggestion, query) => renderSuggestion(suggestion, query, itemKey)}\n        inputProps={inputProps}\n      />  \n    </Container>\n  );\n};\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}