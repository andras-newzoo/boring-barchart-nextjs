{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position: relative;\\n  height: 80%;\\n  width: 90%;\\n\\n  border: 1px solid \", \";\\n\\n  border-radius: 20px;\\n  overflow: hidden;\\n\\n  svg {\\n    position: absolute;\\n    width: 100%;\\n    height: 100%;\\n\\n    rect {\\n      fill: \", \";\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyLight } from \"../styles\";\nvar ChartWrapper = styled.div(_templateObject(), colorGreyLight, colorGreen);\n\nvar PercentageChart = function PercentageChart(_ref) {\n  var data = _ref.data;\n  var svgRef = useRef();\n  var storedValues = useRef();\n  var prevData = usePrevious(data);\n\n  var _useState = useState(false),\n      init = _useState[0],\n      setInit = _useState[1];\n\n  var initVis;\n  var dims = useSvgResize(svgRef);\n  useEffect(function () {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n  useEffect(function () {//console.log('dims', dims)\n  }, [dims]);\n  useEffect(function () {\n    if (init && !prevData !== data) {\n      updateData();\n    }\n  }, [data, init, prevData]);\n\n  initVis = function initVis() {\n    var svg = select(svgRef.current);\n    svg.append(\"g\").attr(\"class\", \"chart-area\");\n    var chartArea = select(\".chart-area\");\n    chartArea.append('rect').attr('x', 0).attr('y', 0).attr('height', dims.height).attr('width', dims.width * data);\n    storedValues.current = {\n      chartArea: chartArea\n    };\n  };\n\n  var updateData = function updateData() {};\n\n  var resetChart = function resetChart() {};\n\n  var updateDims = function updateDims() {};\n\n  var createUpdateRect = function createUpdateRect() {\n    var chartArea = storedValues.current.chartArea;\n    chartArea.select('rect').transition('update').duration(1000).attr('width', dims.width * data);\n  };\n\n  return __jsx(ChartWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, __jsx(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }));\n};\n\nexport default PercentageChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx"],"names":["React","useRef","useEffect","useState","styled","useSvgResize","usePrevious","select","colorGreen","colorGreyLight","ChartWrapper","div","PercentageChart","data","svgRef","storedValues","prevData","init","setInit","initVis","dims","width","height","updateData","svg","current","append","attr","chartArea","resetChart","updateDims","createUpdateRect","transition","duration"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyLight } from \"../styles\";\n\nconst ChartWrapper = styled.div`\n  position: relative;\n  height: 80%;\n  width: 90%;\n\n  border: 1px solid ${colorGreyLight};\n\n  border-radius: 20px;\n  overflow: hidden;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n\n    rect {\n      fill: ${colorGreen};\n    }\n  }\n`;\n\nconst PercentageChart = ({ \n  data\n}) => {\n  const svgRef = useRef();\n  const storedValues = useRef();\n  const prevData = usePrevious(data);\n  const [init, setInit] = useState(false);\n  let initVis\n\n  const dims = useSvgResize(svgRef);\n\n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n\n  useEffect(() => {\n    //console.log('dims', dims)\n  }, [dims]);\n\n  useEffect(() => {\n    if(init && (!prevData !== data)){\n      updateData()\n    }\n  }, [data, init, prevData]);\n\n  initVis = () => {\n    const svg = select(svgRef.current);\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"chart-area\")\n    const chartArea = select(\".chart-area\");\n    chartArea\n      .append('rect')\n      .attr('x', 0)\n      .attr('y', 0)\n      .attr('height', dims.height)\n      .attr('width', dims.width * data)\n\n    storedValues.current = {\n      chartArea\n    };\n  };\n\n  const updateData = () => {};\n\n  const resetChart = () => {};\n\n  const updateDims = () => {};\n\n  const createUpdateRect = () => {\n    const { chartArea } = storedValues.current\n    chartArea.select('rect')\n      .transition('update')\n      .duration(1000)\n      .attr('width', dims.width * data)\n  }\n\n  return (\n    <ChartWrapper>\n      <svg ref={svgRef} />\n    </ChartWrapper>\n  );\n};\n\nexport default PercentageChart;\n"]},"metadata":{},"sourceType":"module"}