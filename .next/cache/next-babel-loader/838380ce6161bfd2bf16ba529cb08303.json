{"ast":null,"code":"var _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/BarChart.jsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport _ from 'lodash';\nimport { colorGreen } from \"../styles\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { createUpdateSvg } from \"../../../utils\";\nconst ChartWrapper = styled.div.withConfig({\n  displayName: \"BarChart__ChartWrapper\",\n  componentId: \"sc-1lmwodk-0\"\n})([\"height:100%;width:100%;border:1px solid red;rect{fill:\", \";}\"], colorGreen);\n\nconst BarChart = ({\n  data\n}) => {\n  const divRef = useRef();\n  const storedValues = useRef();\n  const prevData = usePrevious(data);\n  const {\n    0: init,\n    1: setInit\n  } = useState(false);\n  let initVis, updateData, updateDims;\n  const dims = useSvgResize(divRef);\n  const prevDims = usePrevious(dims);\n  useEffect(() => {\n    console.log(_.isEqual(prevData, data));\n\n    if (data && dims && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims, init, initVis, prevData]);\n  useEffect(() => {}, [dims]);\n\n  initVis = () => {\n    const area = select(divRef.current);\n    const {\n      chartArea\n    } = createUpdateSvg({\n      area,\n      dims,\n      append: true\n    });\n  };\n\n  return __jsx(ChartWrapper, {\n    ref: divRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  });\n};\n\nexport default BarChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/BarChart.jsx"],"names":["React","useRef","useState","useEffect","styled","_","colorGreen","useSvgResize","usePrevious","createUpdateSvg","ChartWrapper","div","BarChart","data","divRef","storedValues","prevData","init","setInit","initVis","updateData","updateDims","dims","prevDims","console","log","isEqual","area","select","current","chartArea","append"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,SAASC,UAAT,QAA2B,WAA3B;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,gBAA1C;AACA,SAASC,eAAT,QAAgC,gBAAhC;AAEA,MAAMC,YAAY,GAAGN,MAAM,CAACO,GAAV;AAAA;AAAA;AAAA,qEAONL,UAPM,CAAlB;;AAWA,MAAMM,QAAQ,GAAG,CAAC;AAChBC,EAAAA;AADgB,CAAD,KAEX;AACJ,QAAMC,MAAM,GAAGb,MAAM,EAArB;AACA,QAAMc,YAAY,GAAGd,MAAM,EAA3B;AACA,QAAMe,QAAQ,GAAGR,WAAW,CAACK,IAAD,CAA5B;AACA,QAAM;AAAA,OAAEI,IAAF;AAAA,OAAQC;AAAR,MAAoBhB,QAAQ,CAAC,KAAD,CAAlC;AACA,MAAIiB,OAAJ,EAAaC,UAAb,EAAyBC,UAAzB;AAEA,QAAMC,IAAI,GAAGf,YAAY,CAACO,MAAD,CAAzB;AACA,QAAMS,QAAQ,GAAGf,WAAW,CAACc,IAAD,CAA5B;AAEAnB,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,OAAO,CAACC,GAAR,CAAYpB,CAAC,CAACqB,OAAF,CAAUV,QAAV,EAAoBH,IAApB,CAAZ;;AACA,QAAGA,IAAI,IAAIS,IAAR,IAAgB,CAACL,IAApB,EAAyB;AACvBE,MAAAA,OAAO;AACPD,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,GANQ,EAMN,CAACL,IAAD,EAAOS,IAAP,EAAaL,IAAb,EAAmBE,OAAnB,EAA4BH,QAA5B,CANM,CAAT;AAQAb,EAAAA,SAAS,CAAC,MAAM,CAEf,CAFQ,EAEN,CAACmB,IAAD,CAFM,CAAT;;AAIAH,EAAAA,OAAO,GAAG,MAAM;AACd,UAAMQ,IAAI,GAAGC,MAAM,CAACd,MAAM,CAACe,OAAR,CAAnB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAgBrB,eAAe,CAAC;AACpCkB,MAAAA,IADoC;AAEpCL,MAAAA,IAFoC;AAGpCS,MAAAA,MAAM,EAAE;AAH4B,KAAD,CAArC;AAMD,GARD;;AAWA,SAAO,MAAC,YAAD;AAAc,IAAA,GAAG,EAAEjB,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CApCD;;AAsCA,eAAeF,QAAf","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport _ from 'lodash'\n\nimport { colorGreen } from \"../styles\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { createUpdateSvg } from \"../../../utils\";\n\nconst ChartWrapper = styled.div`\n  height: 100%;\n  width: 100%;\n\n  border: 1px solid red;\n\n  rect {\n    fill: ${colorGreen};\n  }\n`;\n\nconst BarChart = ({\n  data\n}) => {\n  const divRef = useRef()\n  const storedValues = useRef()\n  const prevData = usePrevious(data)\n  const [ init, setInit ] = useState(false)\n  let initVis, updateData, updateDims\n\n  const dims = useSvgResize(divRef)\n  const prevDims = usePrevious(dims)\n\n  useEffect(() => {\n    console.log(_.isEqual(prevData, data));\n    if(data && dims && !init){\n      initVis()\n      setInit(true)\n    }\n  }, [data, dims, init, initVis, prevData])\n\n  useEffect(() => {\n\n  }, [dims])\n\n  initVis = () => {\n    const area = select(divRef.current)\n    const { chartArea } = createUpdateSvg({\n      area,\n      dims,\n      append: true\n    });\n    \n  }\n\n\n  return <ChartWrapper ref={divRef} />;\n};\n\nexport default BarChart;\n"]},"metadata":{},"sourceType":"module"}