{"ast":null,"code":"var _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyDark } from \"../styles\";\nimport { easeCubicInOut } from 'd3-ease';\nimport 'd3-transition';\nvar ChartWrapper = styled.div.withConfig({\n  displayName: \"PercentageChart__ChartWrapper\",\n  componentId: \"sc-18c8aar-0\"\n})([\"position:relative;height:70%;width:90%;border:1px solid \", \";border-radius:20px;overflow:hidden;svg{position:absolute;width:0px !important;height:0px !important;rect{fill:\", \";}}\"], colorGreyDark, colorGreen);\n\nvar PercentageChart = function PercentageChart(_ref) {\n  var data = _ref.data;\n  // const svgRef = useRef();\n  var divRef = useRef();\n  var storedValues = useRef();\n  var prevData = usePrevious(data);\n\n  var _useState = useState(false),\n      init = _useState[0],\n      setInit = _useState[1];\n\n  var initVis, updateData;\n  var dims = useSvgResize(divRef);\n  useEffect(function () {\n    console.log(data);\n    console.log(dims.width);\n    console.log(dims.height);\n    console.log(!init);\n\n    if (dims.width && dims.height && data && !init) {// initVis();\n      // setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n  useEffect(function () {//console.log('dims', dims)\n  }, [dims]);\n  useEffect(function () {\n    if (init && prevData !== data) {\n      if (data > 1) {} else {// updateData()\n      }\n    }\n  }, [data, init, prevData, updateData]);\n\n  initVis = function initVis() {\n    var svg = select(divRef.current);\n    svg.append(\"g\").attr(\"class\", \"chart-area\");\n    var chartArea = select(\".chart-area\");\n    chartArea.append('rect').attr('x', 0).attr('y', 0).attr('height', dims.height + 1).attr('width', dims.width * data);\n    storedValues.current = {\n      chartArea: chartArea\n    };\n  };\n\n  updateData = function updateData() {\n    var chartArea = storedValues.current.chartArea;\n    chartArea.select('rect').transition().duration(1000).ease(easeCubicInOut).attr('width', dims.width * data);\n  };\n\n  var resetChart = function resetChart() {\n    var chartArea = storedValues.current.chartArea;\n    chartArea.select('rect').attr('width', 0);\n  };\n\n  var updateDims = function updateDims() {};\n\n  return __jsx(ChartWrapper, {\n    ref: divRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  });\n};\n\nexport default PercentageChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx"],"names":["React","useRef","useEffect","useState","styled","useSvgResize","usePrevious","select","colorGreen","colorGreyDark","easeCubicInOut","ChartWrapper","div","PercentageChart","data","divRef","storedValues","prevData","init","setInit","initVis","updateData","dims","console","log","width","height","svg","current","append","attr","chartArea","transition","duration","ease","resetChart","updateDims"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyDark } from \"../styles\";\nimport { easeCubicInOut } from 'd3-ease'\nimport 'd3-transition'\n\nconst ChartWrapper = styled.div`\n  position: relative;\n  height: 70%;\n  width: 90%;\n\n  border: 1px solid ${colorGreyDark};\n\n  border-radius: 20px;\n  overflow: hidden;\n\n  svg {\n    position: absolute;\n    width: 0px !important;\n    height: 0px !important;\n\n    rect {\n      fill: ${colorGreen};\n    }\n  }\n`;\n\nconst PercentageChart = ({ \n  data\n}) => {\n  // const svgRef = useRef();\n  const divRef = useRef();\n  const storedValues = useRef();\n  const prevData = usePrevious(data);\n  const [init, setInit] = useState(false);\n  let initVis, updateData\n\n  const dims = useSvgResize(divRef);\n  \n  useEffect(() => {\n    console.log(data);\n    console.log(dims.width );\n    console.log(dims.height );\n    console.log(!init);\n    if (dims.width && dims.height && data && !init) {\n      // initVis();\n      // setInit(true);\n    }\n  }, [data, dims.height, dims.width, init,   initVis]);\n\n  useEffect(() => {\n    //console.log('dims', dims)\n  }, [dims]);\n\n  useEffect(() => {\n    if(init && (prevData !== data)){\n      if(data > 1){\n\n      } else {   \n        // updateData()\n      }\n    }\n  }, [data, init, prevData, updateData]);\n\n  initVis = () => {\n    const svg = select(divRef.current);\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"chart-area\")\n    const chartArea = select(\".chart-area\");\n    chartArea\n      .append('rect')\n      .attr('x', 0)\n      .attr('y', 0)\n      .attr('height', dims.height + 1)\n      .attr('width', dims.width * data)\n\n    storedValues.current = {\n      chartArea\n    };\n  };\n\n  updateData = () => {\n    const { chartArea } = storedValues.current\n    chartArea.select('rect')\n      .transition()\n      .duration(1000)\n      .ease(easeCubicInOut)\n      .attr('width', dims.width * data)\n  };\n\n  const resetChart = () => {\n    const { chartArea } = storedValues.current\n    chartArea.select('rect')\n      .attr('width', 0)\n  };\n\n  const updateDims = () => {};\n\n  return <ChartWrapper ref={divRef}/>\n};\n\nexport default PercentageChart;\n"]},"metadata":{},"sourceType":"module"}