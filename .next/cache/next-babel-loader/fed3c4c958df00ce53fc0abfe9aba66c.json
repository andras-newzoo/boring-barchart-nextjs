{"ast":null,"code":"var _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/BarChart.jsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport _ from 'lodash';\nimport { scaleBand, scaleLinear } from 'd3-scale';\nimport { select } from \"d3-selection\";\nimport { max } from 'd3-array';\nimport { colorGreen } from \"../styles\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { createUpdateSvg } from \"../../../utils\";\nimport { colorGrey } from \"../../../styles\";\nimport { easeCubicInOut } from \"d3-ease\";\nvar ChartWrapper = styled.div.withConfig({\n  displayName: \"BarChart__ChartWrapper\",\n  componentId: \"sc-1lmwodk-0\"\n})([\"height:100%;width:100%;border-left:1px solid \", \";rect{fill:\", \";}\"], colorGrey, colorGreen);\n\nvar BarChart = function BarChart(_ref) {\n  var data = _ref.data,\n      _ref$updateDuration = _ref.updateDuration,\n      updateDuration = _ref$updateDuration === void 0 ? 1000 : _ref$updateDuration;\n  var divRef = useRef();\n  var storedValues = useRef();\n  var prevData = usePrevious(data);\n\n  var _useState = useState(false),\n      init = _useState[0],\n      setInit = _useState[1];\n\n  var initVis, updateData, updateDims;\n  var dims = useSvgResize(divRef);\n  var prevDims = usePrevious(dims);\n  useEffect(function () {\n    if (data && dims.height && dims.width && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims, init, initVis, prevData]);\n  useEffect(function () {}, [dims]);\n\n  initVis = function initVis() {\n    var area = select(divRef.current);\n\n    var _createUpdateSvg = createUpdateSvg({\n      area: area,\n      dims: dims,\n      append: true\n    }),\n        chartArea = _createUpdateSvg.chartArea;\n\n    var yScale = scaleBand().domain(data.map(function (d) {\n      return d.group;\n    })).range([0, dims.height]).paddingOuter(.3).paddingInner(.4);\n    var xScale = scaleLinear().domain([0, max(data, function (d) {\n      return d.share;\n    })]).range([0, dims.width]);\n    storedValues.current = {\n      chartArea: chartArea,\n      yScale: yScale,\n      xScale: xScale\n    };\n    updateData();\n  };\n\n  updateData = function updateData() {\n    createUpdateRects();\n    createUpdateValueText();\n    createUpdateVariableText();\n  };\n\n  var createUpdateRects = function createUpdateRects() {\n    var _storedValues$current = storedValues.current,\n        chartArea = _storedValues$current.chartArea,\n        yScale = _storedValues$current.yScale,\n        xScale = _storedValues$current.xScale;\n    var rects = chartArea.selectAll('rect').data(data, function (d) {\n      return d.group;\n    });\n    rects.exit().transition().duration(updateDuration).ease(easeCubicInOut).attr('y', dims.height * 2).remove();\n    rects.enter().append('rect').attr('x', 0).attr('y', function (d) {\n      return yScale(d.group);\n    }).attr('height', yScale.bandwidth()).attr('width', 0).transition().duration(updateDuration).ease(easeCubicInOut).attr('width', function (d) {\n      return xScale(d.share);\n    });\n  };\n\n  var createUpdateValueText = function createUpdateValueText() {};\n\n  var createUpdateVariableText = function createUpdateVariableText() {};\n\n  return __jsx(ChartWrapper, {\n    ref: divRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  });\n};\n\nexport default BarChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/BarChart.jsx"],"names":["React","useRef","useState","useEffect","styled","_","scaleBand","scaleLinear","select","max","colorGreen","useSvgResize","usePrevious","createUpdateSvg","colorGrey","easeCubicInOut","ChartWrapper","div","BarChart","data","updateDuration","divRef","storedValues","prevData","init","setInit","initVis","updateData","updateDims","dims","prevDims","height","width","area","current","append","chartArea","yScale","domain","map","d","group","range","paddingOuter","paddingInner","xScale","share","createUpdateRects","createUpdateValueText","createUpdateVariableText","rects","selectAll","exit","transition","duration","ease","attr","remove","enter","bandwidth"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport _ from 'lodash'\nimport { scaleBand, scaleLinear } from 'd3-scale'\nimport { select } from \"d3-selection\";\nimport { max } from 'd3-array'\n\nimport { colorGreen } from \"../styles\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { createUpdateSvg } from \"../../../utils\";\nimport { colorGrey } from \"../../../styles\";\nimport { easeCubicInOut } from \"d3-ease\";\n\nconst ChartWrapper = styled.div`\n  height: 100%;\n  width: 100%;\n\n  border-left: 1px solid ${colorGrey};\n\n  rect {\n    fill: ${colorGreen};\n  }\n`;\n\nconst BarChart = ({\n  data,\n  updateDuration = 1000,\n}) => {\n  const divRef = useRef()\n  const storedValues = useRef()\n  const prevData = usePrevious(data)\n  const [ init, setInit ] = useState(false)\n  let initVis, updateData, updateDims\n\n  const dims = useSvgResize(divRef)\n  const prevDims = usePrevious(dims)\n\n  useEffect(() => {\n    if(data && dims.height && dims.width && !init){\n      initVis()\n      setInit(true)\n    }\n  }, [data, dims, init, initVis, prevData])\n\n  useEffect(() => {\n\n  }, [dims])\n\n  initVis = () => {\n    const area = select(divRef.current)\n    const { chartArea } = createUpdateSvg({\n      area,\n      dims,\n      append: true\n    });\n\n    const yScale = scaleBand()\n      .domain(data.map(d => d.group))\n      .range([0, dims.height])\n      .paddingOuter(.3)\n      .paddingInner(.4)\n\n    const xScale = scaleLinear()\n      .domain([0, max(data, d => d.share)])\n      .range([0, dims.width])\n    \n    storedValues.current = {\n      chartArea,\n      yScale,\n      xScale\n    }\n    updateData()\n  }\n\n  updateData = () => {\n    createUpdateRects()\n    createUpdateValueText()\n    createUpdateVariableText()\n  }\n\n  const createUpdateRects = () => {\n    const { chartArea, yScale, xScale } = storedValues.current\n\n    const rects = chartArea.selectAll('rect').data(data, d => d.group)\n\n    rects.exit()\n      .transition()\n      .duration(updateDuration)\n      .ease(easeCubicInOut)\n      .attr('y', dims.height * 2)\n      .remove()\n\n    rects.enter()\n      .append('rect')\n      .attr('x', 0)\n      .attr('y', d => yScale(d.group))\n      .attr('height', yScale.bandwidth())\n      .attr('width', 0)\n        .transition()\n        .duration(updateDuration)\n        .ease(easeCubicInOut)\n        .attr('width', d => xScale(d.share))\n\n  }\n\n  const createUpdateValueText = () => {\n\n  }\n\n  const createUpdateVariableText = () => {\n    \n  }\n\n\n  return <ChartWrapper ref={divRef} />;\n};\n\nexport default BarChart;\n"]},"metadata":{},"sourceType":"module"}