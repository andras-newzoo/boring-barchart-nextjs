{"ast":null,"code":"var _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { fontWeightS, fontWeightL } from \"../../styles/sharedStyles\";\nimport { Grid } from \"@material-ui/core\";\nimport { useStyles, AddIcon } from \"./styles\";\n\nconst escapeRegexCharacters = str => str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n\nconst getSuggestionValue = (suggestion, key) => `${suggestion[key]}`;\n\nconst getSuggestions = (data, key, value) => {\n  const escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === \"\") {\n    return [];\n  }\n\n  const regex = new RegExp(\"\\\\b\" + escapedValue, \"i\");\n  console.log(data, key);\n  return data.filter(el => regex.test(getSuggestionValue(el[key], key)));\n};\n\nconst renderSuggestion = (suggestion, {\n  query\n}) => {\n  console.log(suggestion); // const suggestionText = `${suggestion.first} ${suggestion.last}`;\n  // const matches = match(suggestionText, query);\n  // const parts = parse(suggestionText, matches);\n  // return (\n  //   <span className={\"suggestion-content \" + suggestion.twitter}>\n  //     <span className=\"name\">\n  //       {parts.map((part, index) => {\n  //         const className = part.highlight ? \"highlight\" : null;\n  //         return (\n  //           <span className={className} key={index}>\n  //             {part.text}\n  //           </span>\n  //         );\n  //       })}\n  //     </span>\n  //   </span>\n  // );\n};\n\nconst AutoComplete = ({\n  data,\n  itemKey\n}) => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(\"\");\n  const {\n    0: suggestions,\n    1: setSuggestions\n  } = useState([]);\n\n  const handleOnChange = (_, {\n    newValue\n  }) => setValue(newValue);\n\n  const onSuggestionsFetchRequested = ({\n    value\n  }) => setSuggestions(getSuggestions(data, itemKey, value));\n\n  const onSuggestionsClearRequested = () => setSuggestions([]);\n\n  const inputProps = {\n    placeholder: \"Add new item\",\n    value,\n    onChange: handleOnChange\n  };\n  return __jsx(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n    onSuggestionsClearRequested: onSuggestionsClearRequested,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    inputProps: inputProps,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  });\n};\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/components/AutoComplete/index.jsx"],"names":["React","useState","Autosuggest","match","parse","TextField","Paper","MenuItem","fontWeightS","fontWeightL","Grid","useStyles","AddIcon","escapeRegexCharacters","str","replace","getSuggestionValue","suggestion","key","getSuggestions","data","value","escapedValue","trim","regex","RegExp","console","log","filter","el","test","renderSuggestion","query","AutoComplete","itemKey","setValue","suggestions","setSuggestions","handleOnChange","_","newValue","onSuggestionsFetchRequested","onSuggestionsClearRequested","inputProps","placeholder","onChange"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,2BAAzC;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,UAAnC;;AAGA,MAAMC,qBAAqB,GAAGC,GAAG,IAAIA,GAAG,CAACC,OAAJ,CAAY,qBAAZ,EAAmC,MAAnC,CAArC;;AACA,MAAMC,kBAAkB,GAAG,CAACC,UAAD,EAAaC,GAAb,KAAsB,GAAED,UAAU,CAACC,GAAD,CAAM,EAAnE;;AAEA,MAAMC,cAAc,GAAG,CAACC,IAAD,EAAOF,GAAP,EAAYG,KAAZ,KAAsB;AAC3C,QAAMC,YAAY,GAAGT,qBAAqB,CAACQ,KAAK,CAACE,IAAN,EAAD,CAA1C;;AAEA,MAAID,YAAY,KAAK,EAArB,EAAyB;AACvB,WAAO,EAAP;AACD;;AAED,QAAME,KAAK,GAAG,IAAIC,MAAJ,CAAW,QAAQH,YAAnB,EAAiC,GAAjC,CAAd;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ,EAAkBF,GAAlB;AAEA,SAAOE,IAAI,CAACQ,MAAL,CAAYC,EAAE,IAAIL,KAAK,CAACM,IAAN,CAAWd,kBAAkB,CAACa,EAAE,CAACX,GAAD,CAAH,EAAUA,GAAV,CAA7B,CAAlB,CAAP;AACD,CAXD;;AAcA,MAAMa,gBAAgB,GAAG,CAACd,UAAD,EAAa;AAAEe,EAAAA;AAAF,CAAb,KAA2B;AAClDN,EAAAA,OAAO,CAACC,GAAR,CAAYV,UAAZ,EADkD,CAGlD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CArBD;;AAuBA,MAAMgB,YAAY,GAAG,CAAC;AACpBb,EAAAA,IADoB;AACdc,EAAAA;AADc,CAAD,KAEf;AACJ,QAAM;AAAA,OAACb,KAAD;AAAA,OAAQc;AAAR,MAAoBlC,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACmC,WAAD;AAAA,OAAcC;AAAd,MAAgCpC,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMqC,cAAc,GAAG,CAACC,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAqBL,QAAQ,CAACK,QAAD,CAApD;;AACA,QAAMC,2BAA2B,GAAG,CAAC;AAAEpB,IAAAA;AAAF,GAAD,KAAegB,cAAc,CAAClB,cAAc,CAACC,IAAD,EAAOc,OAAP,EAAgBb,KAAhB,CAAf,CAAjE;;AACA,QAAMqB,2BAA2B,GAAG,MAAML,cAAc,CAAC,EAAD,CAAxD;;AAEA,QAAMM,UAAU,GAAG;AACjBC,IAAAA,WAAW,EAAE,cADI;AAEjBvB,IAAAA,KAFiB;AAGjBwB,IAAAA,QAAQ,EAAEP;AAHO,GAAnB;AAKA,SACE,MAAC,WAAD;AACE,IAAA,WAAW,EAAEF,WADf;AAEE,IAAA,2BAA2B,EAAEK,2BAF/B;AAGE,IAAA,2BAA2B,EAAEC,2BAH/B;AAIE,IAAA,kBAAkB,EAAE1B,kBAJtB;AAKE,IAAA,gBAAgB,EAAEe,gBALpB;AAME,IAAA,UAAU,EAAEY,UANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAUD,CAzBD;;AA2BA,eAAeV,YAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Autosuggest from \"react-autosuggest\";\nimport match from \"autosuggest-highlight/match\";\nimport parse from \"autosuggest-highlight/parse\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { fontWeightS, fontWeightL } from \"../../styles/sharedStyles\";\nimport { Grid } from \"@material-ui/core\";\nimport { useStyles, AddIcon } from \"./styles\";\n\n\nconst escapeRegexCharacters = str => str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\nconst getSuggestionValue = (suggestion, key) => `${suggestion[key]}`\n\nconst getSuggestions = (data, key, value) => {\n  const escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === \"\") {\n    return [];\n  }\n\n  const regex = new RegExp(\"\\\\b\" + escapedValue, \"i\");\n  console.log(data, key);\n  \n  return data.filter(el => regex.test(getSuggestionValue(el[key], key)));\n}\n\n\nconst renderSuggestion = (suggestion, { query }) => {\n  console.log(suggestion);\n  \n  // const suggestionText = `${suggestion.first} ${suggestion.last}`;\n  // const matches = match(suggestionText, query);\n  // const parts = parse(suggestionText, matches);\n\n  // return (\n  //   <span className={\"suggestion-content \" + suggestion.twitter}>\n  //     <span className=\"name\">\n  //       {parts.map((part, index) => {\n  //         const className = part.highlight ? \"highlight\" : null;\n  //         return (\n  //           <span className={className} key={index}>\n  //             {part.text}\n  //           </span>\n  //         );\n  //       })}\n  //     </span>\n  //   </span>\n  // );\n}\n\nconst AutoComplete = ({\n  data, itemKey\n}) => {\n  const [value, setValue] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n\n  const handleOnChange = (_, { newValue }) => setValue(newValue);\n  const onSuggestionsFetchRequested = ({ value }) => setSuggestions(getSuggestions(data, itemKey, value));\n  const onSuggestionsClearRequested = () => setSuggestions([]);\n\n  const inputProps = {\n    placeholder: \"Add new item\",\n    value,\n    onChange: handleOnChange\n  };\n  return (\n    <Autosuggest\n      suggestions={suggestions}\n      onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n      onSuggestionsClearRequested={onSuggestionsClearRequested}\n      getSuggestionValue={getSuggestionValue}\n      renderSuggestion={renderSuggestion}\n      inputProps={inputProps}\n    />\n  );\n};\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}