{"ast":null,"code":"import { select } from \"d3-selection\";\nimport { interpolateNumber } from \"d3-interpolate\";\nimport numeral from \"numeral\";\nexport const numberTween = (d, i, n, format) => {\n  const that = select(n[i]),\n        num = +that.text().substring(0, that.text().length - 1) * 0.01,\n        newNum = d[0][1] - d[0][0],\n        index = interpolateNumber(num, newNum);\n  return function (t) {\n    that.text(`${numeral(index(t)).format(format)}`);\n  };\n};\nexport const createUpdateSvg = ({\n  area,\n  dims,\n  margin = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  },\n  append\n}) => {\n  let chartArea;\n\n  const setDims = svg => svg.attr(\"width\", dims.width).attr(\"height\", dims.height);\n\n  const chartWidth = dims.width - margin.left - margin.right;\n  const chartHeight = dims.height - margin.top - margin.bottom;\n\n  if (append) {\n    area.append(\"svg\");\n    const svg = area.select(\"svg\");\n    setDims(svg);\n    svg.append(\"g\").attr(\"class\", \"chart-area\").attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n    chartArea = select(\".chart-area\");\n  }\n\n  ;\n\n  if (!append) {\n    setDims(area.select(\"svg\"));\n  }\n\n  return {\n    chartArea,\n    chartWidth,\n    chartHeight\n  };\n};","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/utils/chartHelpers.js"],"names":["select","interpolateNumber","numeral","numberTween","d","i","n","format","that","num","text","substring","length","newNum","index","t","createUpdateSvg","area","dims","margin","top","right","bottom","left","append","chartArea","setDims","svg","attr","width","height","chartWidth","chartHeight"],"mappings":"AAAA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,iBAAT,QAAkC,gBAAlC;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,MAAV,KAAqB;AAC9C,QAAMC,IAAI,GAAGR,MAAM,CAACM,CAAC,CAACD,CAAD,CAAF,CAAnB;AAAA,QACEI,GAAG,GAAG,CAACD,IAAI,CAACE,IAAL,GAAYC,SAAZ,CAAsB,CAAtB,EAAyBH,IAAI,CAACE,IAAL,GAAYE,MAAZ,GAAqB,CAA9C,CAAD,GAAoD,IAD5D;AAAA,QAEEC,MAAM,GAAGT,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,IAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAFrB;AAAA,QAGEU,KAAK,GAAGb,iBAAiB,CAACQ,GAAD,EAAMI,MAAN,CAH3B;AAIA,SAAO,UAASE,CAAT,EAAY;AACjBP,IAAAA,IAAI,CAACE,IAAL,CAAW,GAAER,OAAO,CAACY,KAAK,CAACC,CAAD,CAAN,CAAP,CAAkBR,MAAlB,CAAyBA,MAAzB,CAAiC,EAA9C;AACD,GAFD;AAGD,CARM;AAUP,OAAO,MAAMS,eAAe,GAAG,CAAC;AAC9BC,EAAAA,IAD8B;AAE9BC,EAAAA,IAF8B;AAG9BC,EAAAA,MAAM,GAAG;AAAEC,IAAAA,GAAG,EAAE,CAAP;AAAUC,IAAAA,KAAK,EAAE,CAAjB;AAAoBC,IAAAA,MAAM,EAAE,CAA5B;AAA+BC,IAAAA,IAAI,EAAE;AAArC,GAHqB;AAI9BC,EAAAA;AAJ8B,CAAD,KAKzB;AACJ,MAAIC,SAAJ;;AACA,QAAMC,OAAO,GAAGC,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAAS,OAAT,EAAkBV,IAAI,CAACW,KAAvB,EAA8BD,IAA9B,CAAmC,QAAnC,EAA6CV,IAAI,CAACY,MAAlD,CAAvB;;AACA,QAAMC,UAAU,GAAGb,IAAI,CAACW,KAAL,GAAaV,MAAM,CAACI,IAApB,GAA2BJ,MAAM,CAACE,KAArD;AACA,QAAMW,WAAW,GAAGd,IAAI,CAACY,MAAL,GAAcX,MAAM,CAACC,GAArB,GAA2BD,MAAM,CAACG,MAAtD;;AACA,MAAGE,MAAH,EAAU;AACRP,IAAAA,IAAI,CAACO,MAAL,CAAY,KAAZ;AACA,UAAMG,GAAG,GAAGV,IAAI,CAACjB,MAAL,CAAY,KAAZ,CAAZ;AACA0B,IAAAA,OAAO,CAACC,GAAD,CAAP;AACAA,IAAAA,GAAG,CACAH,MADH,CACU,GADV,EAEGI,IAFH,CAEQ,OAFR,EAEiB,YAFjB,EAGGA,IAHH,CAGQ,WAHR,EAGsB,aAAYT,MAAM,CAACI,IAAK,KAAIJ,MAAM,CAACC,GAAI,GAH7D;AAIAK,IAAAA,SAAS,GAAGzB,MAAM,CAAC,aAAD,CAAlB;AACD;;AAAA;;AACD,MAAG,CAACwB,MAAJ,EAAW;AACTE,IAAAA,OAAO,CAACT,IAAI,CAACjB,MAAL,CAAY,KAAZ,CAAD,CAAP;AACD;;AACD,SAAO;AAAEyB,IAAAA,SAAF;AAAaM,IAAAA,UAAb;AAAyBC,IAAAA;AAAzB,GAAP;AACC,CAxBI","sourcesContent":["import { select } from \"d3-selection\";\nimport { interpolateNumber } from \"d3-interpolate\";\nimport numeral from \"numeral\";\n\nexport const numberTween = (d, i, n, format) => {\n  const that = select(n[i]),\n    num = +that.text().substring(0, that.text().length - 1) * 0.01,\n    newNum = d[0][1] - d[0][0],\n    index = interpolateNumber(num, newNum);\n  return function(t) {\n    that.text(`${numeral(index(t)).format(format)}`);\n  };\n};\n\nexport const createUpdateSvg = ({\n  area,\n  dims,\n  margin = { top: 0, right: 0, bottom: 0, left: 0 },\n  append\n}) => {\n  let chartArea\n  const setDims = svg => svg.attr(\"width\", dims.width).attr(\"height\", dims.height);\n  const chartWidth = dims.width - margin.left - margin.right\n  const chartHeight = dims.height - margin.top - margin.bottom\n  if(append){\n    area.append(\"svg\");\n    const svg = area.select(\"svg\")\n    setDims(svg)\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"chart-area\")\n      .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n    chartArea = select(\".chart-area\");\n  };\n  if(!append){\n    setDims(area.select(\"svg\"))\n  }\n  return { chartArea, chartWidth, chartHeight }\n  }\n"]},"metadata":{},"sourceType":"module"}