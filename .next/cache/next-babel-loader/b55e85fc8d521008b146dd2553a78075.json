{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position: relative;\\n  height: 80%;\\n  width: 90%;\\n\\n  border: 1px solid \", \";\\n\\n  border-radius: 20px;\\n  overflow: hidden;\\n\\n  svg {\\n    position: absolute;\\n    width: 100%;\\n    height: 100%;\\n\\n    rect {\\n      fill: \", \";\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyLight } from \"../styles\";\nimport { scaleLinear } from 'd3-scale';\nvar ChartWrapper = styled.div(_templateObject(), colorGreyLight, colorGreen);\n\nvar PercentageChart = function PercentageChart(_ref) {\n  var data = _ref.data;\n  var svgRef = useRef();\n  var storedValues = useRef();\n\n  var _useState = useState(false),\n      init = _useState[0],\n      setInit = _useState[1];\n\n  var initVis;\n  var dims = useSvgResize(svgRef);\n  useEffect(function () {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n  useEffect(function () {//console.log('dims', dims)\n  }, [dims]);\n  useEffect(function () {//console.log('data', data)\n  }, [data]);\n\n  initVis = function initVis() {\n    var svg = select(svgRef.current);\n    svg.append(\"g\").attr(\"class\", \"chart-area\");\n    var chartArea = select(\".chart-area\");\n    chartArea.append('rect').attr('x', 0).attr('y', 0).attr('height', dims.height).attr('width', dims.width * .9);\n    var xScale = scaleLinear().range([0, dims.width]).domain([0, 1]);\n    storedValues.current = {\n      chartArea: chartArea\n    };\n  };\n\n  var updateData = function updateData() {};\n\n  var resetChart = function resetChart() {};\n\n  var updateDims = function updateDims() {};\n\n  var createUpdateRect = function createUpdateRect() {\n    var chartArea = storedValues.current.chartArea;\n  };\n\n  return __jsx(ChartWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, __jsx(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }));\n};\n\nexport default PercentageChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx"],"names":["React","useRef","useEffect","useState","styled","useSvgResize","select","colorGreen","colorGreyLight","scaleLinear","ChartWrapper","div","PercentageChart","data","svgRef","storedValues","init","setInit","initVis","dims","width","height","svg","current","append","attr","chartArea","xScale","range","domain","updateData","resetChart","updateDims","createUpdateRect"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyLight } from \"../styles\";\nimport { scaleLinear } from 'd3-scale'\n\nconst ChartWrapper = styled.div`\n  position: relative;\n  height: 80%;\n  width: 90%;\n\n  border: 1px solid ${colorGreyLight};\n\n  border-radius: 20px;\n  overflow: hidden;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n\n    rect {\n      fill: ${colorGreen};\n    }\n  }\n`;\n\nconst PercentageChart = ({ \n  data\n}) => {\n  const svgRef = useRef();\n  const storedValues = useRef();\n  const [init, setInit] = useState(false);\n  let initVis\n\n  const dims = useSvgResize(svgRef);\n\n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n\n  useEffect(() => {\n    //console.log('dims', dims)\n  }, [dims]);\n\n  useEffect(() => {\n    //console.log('data', data)\n  }, [data]);\n\n  initVis = () => {\n    const svg = select(svgRef.current);\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"chart-area\")\n    const chartArea = select(\".chart-area\");\n    chartArea\n      .append('rect')\n      .attr('x', 0)\n      .attr('y', 0)\n      .attr('height', dims.height)\n      .attr('width', dims.width * .9)\n    const xScale = scaleLinear().range([0, dims.width]).domain([0, 1])\n\n    storedValues.current = {\n      chartArea\n    };\n  };\n\n  const updateData = () => {};\n\n  const resetChart = () => {};\n\n  const updateDims = () => {};\n\n  const createUpdateRect = () => {\n    const { chartArea } = storedValues.current\n    \n  }\n\n  return (\n    <ChartWrapper>\n      <svg ref={svgRef} />\n    </ChartWrapper>\n  );\n};\n\nexport default PercentageChart;\n"]},"metadata":{},"sourceType":"module"}