{"ast":null,"code":"var _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyLight } from \"../styles\";\nimport { scaleLinear } from 'd3-scale';\nconst ChartWrapper = styled.div`\n  position: relative;\n  height: 80%;\n  width: 90%;\n\n  border: 1px solid ${colorGreyLight};\n\n  border-radius: 20px;\n  overflow: hidden;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n\n    rect {\n      fill: ${colorGreen};\n    }\n  }\n`;\n\nconst PercentageChart = ({\n  data,\n  margin = {\n    top: 1,\n    right: 1,\n    bottom: 1,\n    left: 1\n  }\n}) => {\n  const svgRef = useRef();\n  const storedValues = useRef();\n  const {\n    0: init,\n    1: setInit\n  } = useState(false);\n  let initVis;\n  const dims = useSvgResize(svgRef);\n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n  useEffect(() => {//console.log('dims', dims)\n  }, [dims]);\n  useEffect(() => {//console.log('data', data)\n  }, [data]);\n\n  initVis = () => {\n    const svg = select(svgRef.current);\n    svg.append(\"g\").attr(\"class\", \"chart-area\").attr('transform', `translate(${margin.left}, ${margin.top})`);\n    const chartArea = select(\".chart-area\");\n    chartArea.append('rect').attr('x', 0).attr('y', 0).attr('height', dims.height).attr('width', dims.width / 2);\n    const xScale = scaleLinear().range([0, dims.width]).domain([0, 1]);\n    storedValues.current = {\n      chartArea\n    };\n  };\n\n  const updateData = () => {};\n\n  const resetChart = () => {};\n\n  const updateDims = () => {};\n\n  const createUpdateRect = () => {\n    const {\n      chartArea\n    } = storedValues.current;\n  };\n\n  return __jsx(ChartWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, __jsx(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }));\n};\n\nexport default PercentageChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/PercentageChart.jsx"],"names":["React","useRef","useEffect","useState","styled","useSvgResize","select","colorGreen","colorGreyLight","scaleLinear","ChartWrapper","div","PercentageChart","data","margin","top","right","bottom","left","svgRef","storedValues","init","setInit","initVis","dims","width","height","svg","current","append","attr","chartArea","xScale","range","domain","updateData","resetChart","updateDims","createUpdateRect"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSvgResize } from \"../../../hooks\";\nimport { select } from \"d3-selection\";\nimport { colorGreen, colorGreyLight } from \"../styles\";\nimport { scaleLinear } from 'd3-scale'\n\nconst ChartWrapper = styled.div`\n  position: relative;\n  height: 80%;\n  width: 90%;\n\n  border: 1px solid ${colorGreyLight};\n\n  border-radius: 20px;\n  overflow: hidden;\n\n  svg {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n\n    rect {\n      fill: ${colorGreen};\n    }\n  }\n`;\n\nconst PercentageChart = ({ \n  data,\n  margin = {\n    top:1, right: 1, bottom: 1, left: 1\n  }\n\n}) => {\n  const svgRef = useRef();\n  const storedValues = useRef();\n  const [init, setInit] = useState(false);\n  let initVis\n\n  const dims = useSvgResize(svgRef);\n\n  useEffect(() => {\n    if (dims.width && dims.height && data && !init) {\n      initVis();\n      setInit(true);\n    }\n  }, [data, dims.height, dims.width, init, initVis]);\n\n  useEffect(() => {\n    //console.log('dims', dims)\n  }, [dims]);\n\n  useEffect(() => {\n    //console.log('data', data)\n  }, [data]);\n\n  initVis = () => {\n    const svg = select(svgRef.current);\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"chart-area\")\n      .attr('transform', `translate(${margin.left}, ${margin.top})`)\n    const chartArea = select(\".chart-area\");\n    chartArea\n      .append('rect')\n      .attr('x', 0)\n      .attr('y', 0)\n      .attr('height', dims.height)\n      .attr('width', dims.width/2)\n    const xScale = scaleLinear().range([0, dims.width]).domain([0, 1])\n\n    storedValues.current = {\n      chartArea\n    };\n  };\n\n  const updateData = () => {};\n\n  const resetChart = () => {};\n\n  const updateDims = () => {};\n\n  const createUpdateRect = () => {\n    const { chartArea } = storedValues.current\n    \n  }\n\n  return (\n    <ChartWrapper>\n      <svg ref={svgRef} />\n    </ChartWrapper>\n  );\n};\n\nexport default PercentageChart;\n"]},"metadata":{},"sourceType":"module"}