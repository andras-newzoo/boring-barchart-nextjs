{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/BarChart.jsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport _ from 'lodash';\nimport { scaleBand, scaleLinear } from 'd3-scale';\nimport { select } from \"d3-selection\";\nimport { max } from 'd3-array';\nimport { colorGreen } from \"../styles\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { createUpdateSvg, numberTween } from \"../../../utils\";\nimport { colorGrey, fontSizeM, fontWeightL } from \"../../../styles\";\nimport { easeCubicInOut } from \"d3-ease\";\nconst ChartWrapper = styled.div.withConfig({\n  displayName: \"BarChart__ChartWrapper\",\n  componentId: \"sc-1lmwodk-0\"\n})([\"height:100%;width:100%;border-left:1px solid \", \";rect{fill:\", \";}.variable{fill:\", \";font-size:1rem;}.value{fill:#fff;font-size:\", \";font-weight:\", \";text-anchor:end;}\"], colorGrey, colorGreen, colorGrey, fontSizeM, fontWeightL);\n\nconst BarChart = ({\n  data,\n  updateDuration = 1000\n}) => {\n  const divRef = useRef();\n  const storedValues = useRef();\n  const prevData = usePrevious(data);\n  const {\n    0: init,\n    1: setInit\n  } = useState(false);\n  let initVis, updateData, updateDims;\n  const dims = useSvgResize(divRef);\n  const prevDims = usePrevious(dims);\n  useEffect(() => {\n    if (data && dims.height && dims.width && !init) {\n      initVis();\n      setInit(true);\n    }\n\n    if (init && !_.isEqual(data, prevData)) {\n      updateData();\n    }\n  }, [data, dims, init, initVis, prevData, updateData]);\n  useEffect(() => {\n    if (init) {\n      !_.isEqual(dims, prevDims) && updateDims();\n    }\n  }, [dims, init, prevDims, updateDims]);\n\n  initVis = () => {\n    const area = select(divRef.current);\n    const {\n      chartArea\n    } = createUpdateSvg({\n      area,\n      dims,\n      append: true\n    });\n    const yScale = scaleBand().range([0, dims.height]).paddingOuter(.3).paddingInner(.4);\n    const xScale = scaleLinear().range([0, dims.width]);\n    storedValues.current = {\n      area,\n      chartArea,\n      yScale,\n      xScale\n    };\n    updateData();\n  };\n\n  updateData = () => {\n    const {\n      yScale,\n      xScale\n    } = storedValues.current;\n    yScale.domain(data.map(d => d.group));\n    xScale.domain([0, max(data, d => d.share)]);\n    storedValues.current = _objectSpread({}, storedValues.current, {\n      yScale,\n      xScale\n    });\n    createUpdateRects();\n    createUpdateValueText();\n    createUpdateVariableText();\n  };\n\n  const createUpdateRects = () => {\n    const {\n      chartArea,\n      yScale,\n      xScale\n    } = storedValues.current;\n    const rects = chartArea.selectAll('rect').data(data, d => d.group);\n    removeElement(rects);\n    rects.enter().append('rect').attr('x', 0).attr('y', d => yScale(d.group)).attr('height', yScale.bandwidth()).attr('width', 0).merge(rects).transition().duration(updateDuration).ease(easeCubicInOut).attr('width', d => xScale(d.share));\n  };\n\n  updateDims = () => {\n    const {\n      area,\n      chartArea,\n      yScale,\n      xScale,\n      centerText,\n      yPos\n    } = storedValues.current;\n    yScale.range([0, dims.height]);\n    xScale.range([0, dims.width]);\n    createUpdateSvg({\n      area,\n      dims,\n      update: true\n    });\n    chartArea.selectAll('rect').attr('width', d => xScale(d.share)).attr('y', d => yScale(d.group)).attr('height', yScale.bandwidth());\n    chartArea.selectAll('.value').attr('x', d => xScale(d.share) - 2).attr('y', centerText);\n    chartArea.selectAll('.variable').attr('y', yPos);\n    storedValues.current = _objectSpread({}, storedValues.current, {\n      yScale,\n      xScale\n    });\n  };\n\n  const createUpdateValueText = () => {\n    const {\n      chartArea,\n      yScale,\n      xScale\n    } = storedValues.current;\n    const texts = chartArea.selectAll('.value').data(data, d => d.group);\n\n    const centerText = d => yScale(d.group) + yScale.bandwidth() / 2 + 4;\n\n    removeElement(texts);\n    texts.enter().append('text').attr('class', 'value').attr('x', 0).attr('y', centerText).attr('opacity', 0).text(0).merge(texts).transition().duration(updateDuration).ease(easeCubicInOut).attr('x', d => xScale(d.share) - 2).tween('text', (d, i, n) => numberTween(d, i, n, 'share', '.1%')).attr('opacity', 1);\n    storedValues.current = _objectSpread({}, storedValues.current, {\n      centerText\n    });\n  };\n\n  const createUpdateVariableText = () => {\n    const {\n      chartArea,\n      yScale\n    } = storedValues.current;\n    const texts = chartArea.selectAll('.variable').data(data, d => d.group);\n\n    const yPos = d => yScale(d.group) - 3;\n\n    removeElement(texts);\n    texts.enter().append('text').attr('class', 'variable').attr('x', 1).attr('y', yPos).attr('opacity', 0).text(d => d.group).merge(texts).transition().duration(updateDuration).ease(easeCubicInOut).attr('y', yPos).attr('opacity', 1);\n    storedValues.current = _objectSpread({}, storedValues.current, {\n      yPos\n    });\n  };\n\n  const removeElement = el => el.exit().transition().duration(updateDuration).ease(easeCubicInOut).attr('y', dims.height * 2).remove();\n\n  return __jsx(ChartWrapper, {\n    ref: divRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  });\n};\n\nexport default BarChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/BarChart.jsx"],"names":["React","useRef","useState","useEffect","styled","_","scaleBand","scaleLinear","select","max","colorGreen","useSvgResize","usePrevious","createUpdateSvg","numberTween","colorGrey","fontSizeM","fontWeightL","easeCubicInOut","ChartWrapper","div","BarChart","data","updateDuration","divRef","storedValues","prevData","init","setInit","initVis","updateData","updateDims","dims","prevDims","height","width","isEqual","area","current","chartArea","append","yScale","range","paddingOuter","paddingInner","xScale","domain","map","d","group","share","createUpdateRects","createUpdateValueText","createUpdateVariableText","rects","selectAll","removeElement","enter","attr","bandwidth","merge","transition","duration","ease","centerText","yPos","update","texts","text","tween","i","n","el","exit","remove"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport _ from 'lodash'\nimport { scaleBand, scaleLinear } from 'd3-scale'\nimport { select } from \"d3-selection\";\nimport { max } from 'd3-array'\n\nimport { colorGreen } from \"../styles\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { createUpdateSvg, numberTween } from \"../../../utils\";\nimport { colorGrey, fontSizeM, fontWeightL } from \"../../../styles\";\nimport { easeCubicInOut } from \"d3-ease\";\n\nconst ChartWrapper = styled.div`\n  height: 100%;\n  width: 100%;\n\n  border-left: 1px solid ${colorGrey};\n\n  rect {\n    fill: ${colorGreen};\n  }\n\n  .variable {\n    fill: ${colorGrey};\n    font-size: 1rem;\n  }\n\n  .value {\n    fill: #fff;\n    font-size: ${fontSizeM};\n    font-weight: ${fontWeightL};\n    text-anchor: end;\n  }\n`;\n\nconst BarChart = ({\n  data,\n  updateDuration = 1000,\n}) => {\n  const divRef = useRef()\n  const storedValues = useRef()\n  const prevData = usePrevious(data)\n  const [ init, setInit ] = useState(false)\n  let initVis, updateData, updateDims\n\n  const dims = useSvgResize(divRef)\n  const prevDims = usePrevious(dims)\n\n  useEffect(() => {\n    if(data && dims.height && dims.width && !init){\n      initVis()\n      setInit(true)\n    }\n    if(init && !_.isEqual(data, prevData)){\n      updateData()\n    }\n  }, [data, dims, init, initVis, prevData, updateData])\n\n  useEffect(() => {\n    if(init){\n      !_.isEqual(dims, prevDims) && updateDims();\n    }\n  }, [dims, init, prevDims, updateDims])\n\n  initVis = () => {\n    const area = select(divRef.current)\n    const { chartArea } = createUpdateSvg({\n      area,\n      dims,\n      append: true\n    });\n\n    const yScale = scaleBand().range([0, dims.height])\n      .paddingOuter(.3)\n      .paddingInner(.4)\n\n    const xScale = scaleLinear().range([0, dims.width])\n    \n    storedValues.current = {\n      area,\n      chartArea,\n      yScale,\n      xScale\n    }\n    updateData()\n  }\n\n  updateData = () => {\n    const { yScale, xScale } = storedValues.current\n    yScale.domain(data.map(d => d.group))\n    xScale.domain([0, max(data, d => d.share)])\n    storedValues.current = { ...storedValues.current, yScale, xScale }\n    createUpdateRects()\n    createUpdateValueText()\n    createUpdateVariableText()\n  }\n\n  const createUpdateRects = () => {\n    const { chartArea, yScale, xScale } = storedValues.current\n\n    const rects = chartArea.selectAll('rect').data(data, d => d.group)\n    \n    removeElement(rects)\n\n    rects.enter()\n      .append('rect')\n      .attr('x', 0)\n      .attr('y', d => yScale(d.group))\n      .attr('height', yScale.bandwidth())\n      .attr('width', 0)\n        .merge(rects)\n        .transition()\n        .duration(updateDuration)\n        .ease(easeCubicInOut)\n        .attr('width', d => xScale(d.share))\n\n  }\n\n  updateDims = () => {\n    const { area, chartArea, yScale, xScale, centerText, yPos } = storedValues.current\n    yScale.range([0, dims.height])\n    xScale.range([0, dims.width])\n    createUpdateSvg({ area, dims, update: true })\n    chartArea.selectAll('rect')\n      .attr('width', d => xScale(d.share))\n      .attr('y', d => yScale(d.group))\n      .attr('height', yScale.bandwidth())\n    chartArea.selectAll('.value')\n      .attr('x', d => xScale(d.share) - 2)\n      .attr('y', centerText)\n    chartArea.selectAll('.variable')\n      .attr('y', yPos)\n    storedValues.current = { ...storedValues.current, yScale, xScale }\n  }\n\n  const createUpdateValueText = () => {\n    const { chartArea, yScale, xScale } = storedValues.current\n\n    const texts = chartArea.selectAll('.value').data(data, d => d.group)\n    const centerText = d => yScale(d.group) + yScale.bandwidth()/2 + 4\n\n    removeElement(texts)\n\n    texts.enter()\n      .append('text')\n      .attr('class', 'value')\n      .attr('x', 0)\n      .attr('y', centerText)\n      .attr('opacity', 0)\n      .text(0)\n        .merge(texts)\n        .transition()\n        .duration(updateDuration)\n        .ease(easeCubicInOut)\n        .attr('x', d => xScale(d.share) - 2)\n        .tween('text', (d, i, n) => numberTween(d, i, n, 'share', '.1%'))\n        .attr('opacity', 1)\n    storedValues.current = { ...storedValues.current, centerText }\n  }\n\n  const createUpdateVariableText = () => {\n    const { chartArea, yScale } = storedValues.current\n\n    const texts = chartArea.selectAll('.variable').data(data, d => d.group)\n    const yPos = d => yScale(d.group) - 3\n\n    removeElement(texts)\n\n    texts.enter()\n      .append('text')\n      .attr('class', 'variable')\n      .attr('x', 1)\n      .attr('y', yPos)\n      .attr('opacity', 0)\n      .text(d => d.group)\n        .merge(texts)\n        .transition()\n        .duration(updateDuration)\n        .ease(easeCubicInOut)\n        .attr('y', yPos)\n        .attr('opacity', 1)\n    storedValues.current = { ...storedValues.current, yPos }\n  }\n\n  const removeElement = el => \n    el.exit()\n      .transition()\n      .duration(updateDuration)\n      .ease(easeCubicInOut)\n      .attr('y', dims.height * 2)\n      .remove()\n\n\n  return <ChartWrapper ref={divRef} />;\n};\n\nexport default BarChart;\n"]},"metadata":{},"sourceType":"module"}