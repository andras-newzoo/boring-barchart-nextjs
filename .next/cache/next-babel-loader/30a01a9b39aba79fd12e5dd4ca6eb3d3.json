{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/BarChart.jsx\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport _ from 'lodash';\nimport { scaleBand, scaleLinear } from 'd3-scale';\nimport { select } from \"d3-selection\";\nimport { max } from 'd3-array';\nimport { colorGreen } from \"../styles\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { createUpdateSvg, numberTween } from \"../../../utils\";\nimport { colorGrey, fontSizeS, fontSizeM, fontWeightL } from \"../../../styles\";\nimport { easeCubicInOut } from \"d3-ease\";\nimport { format } from \"d3-format\";\nvar ChartWrapper = styled.div.withConfig({\n  displayName: \"BarChart__ChartWrapper\",\n  componentId: \"sc-1lmwodk-0\"\n})([\"height:100%;width:100%;border-left:1px solid \", \";rect{fill:\", \";}.variable{fill:\", \";font-size:1rem;}.value{fill:#fff;font-size:\", \";font-weight:\", \";text-anchor:end;}\"], colorGrey, colorGreen, colorGrey, fontSizeM, fontWeightL);\n\nvar BarChart = function BarChart(_ref) {\n  var data = _ref.data,\n      _ref$updateDuration = _ref.updateDuration,\n      updateDuration = _ref$updateDuration === void 0 ? 1000 : _ref$updateDuration;\n  var divRef = useRef();\n  var storedValues = useRef();\n  var prevData = usePrevious(data);\n\n  var _useState = useState(false),\n      init = _useState[0],\n      setInit = _useState[1];\n\n  var initVis, updateData, updateDims;\n  var dims = useSvgResize(divRef);\n  var prevDims = usePrevious(dims);\n  useEffect(function () {\n    if (data && dims.height && dims.width && !init) {\n      initVis();\n      setInit(true);\n    }\n\n    if (init && !_.isEqual(data, prevData)) {\n      updateData();\n    }\n  }, [data, dims, init, initVis, prevData, updateData]);\n  useEffect(function () {\n    if (init) {\n      !_.isEqual(dims, prevDims) && updateDims();\n    }\n  }, [dims, init, prevDims, updateDims]);\n\n  initVis = function initVis() {\n    var area = select(divRef.current);\n\n    var _createUpdateSvg = createUpdateSvg({\n      area: area,\n      dims: dims,\n      append: true\n    }),\n        chartArea = _createUpdateSvg.chartArea;\n\n    var yScale = scaleBand().range([0, dims.height]).paddingOuter(.3).paddingInner(.4);\n    var xScale = scaleLinear().range([0, dims.width]);\n    storedValues.current = {\n      chartArea: chartArea,\n      yScale: yScale,\n      xScale: xScale\n    };\n    updateData();\n  };\n\n  updateData = function updateData() {\n    var _storedValues$current = storedValues.current,\n        yScale = _storedValues$current.yScale,\n        xScale = _storedValues$current.xScale;\n    yScale.domain(data.map(function (d) {\n      return d.group;\n    }));\n    xScale.domain([0, max(data, function (d) {\n      return d.share;\n    })]);\n    storedValues.current = _objectSpread({}, storedValues.current, {\n      yScale: yScale,\n      xScale: xScale\n    });\n    createUpdateRects();\n    createUpdateValueText();\n    createUpdateVariableText();\n  };\n\n  var createUpdateRects = function createUpdateRects() {\n    var _storedValues$current2 = storedValues.current,\n        chartArea = _storedValues$current2.chartArea,\n        yScale = _storedValues$current2.yScale,\n        xScale = _storedValues$current2.xScale;\n    var rects = chartArea.selectAll('rect').data(data, function (d) {\n      return d.group;\n    });\n    removeElement(rects);\n    rects.enter().append('rect').attr('x', 0).attr('y', function (d) {\n      return yScale(d.group);\n    }).attr('height', yScale.bandwidth()).attr('width', 0).merge(rects).transition().duration(updateDuration).ease(easeCubicInOut).attr('width', function (d) {\n      return xScale(d.share);\n    });\n  };\n\n  updateDims = function updateDims() {\n    console.log('updatig dims'); // TODO\n  };\n\n  var createUpdateValueText = function createUpdateValueText() {\n    var _storedValues$current3 = storedValues.current,\n        chartArea = _storedValues$current3.chartArea,\n        yScale = _storedValues$current3.yScale,\n        xScale = _storedValues$current3.xScale;\n    var texts = chartArea.selectAll('.value').data(data, function (d) {\n      return d.group;\n    });\n\n    var centerText = function centerText(d) {\n      return yScale(d.group) + yScale.bandwidth() / 2 + 4;\n    };\n\n    removeElement(texts);\n    texts.enter().append('text').attr('class', 'value').attr('x', 0).attr('y', centerText).attr('opacity', 0).text(0).merge(texts).transition().duration(updateDuration).ease(easeCubicInOut).attr('x', function (d) {\n      return xScale(d.share) - 2;\n    }).tween('text', function (d, i, n) {\n      return numberTween(d, i, n, 'share', '.1%');\n    }).attr('opacity', 1);\n  };\n\n  var createUpdateVariableText = function createUpdateVariableText() {\n    var _storedValues$current4 = storedValues.current,\n        chartArea = _storedValues$current4.chartArea,\n        yScale = _storedValues$current4.yScale;\n    var texts = chartArea.selectAll('.variable').data(data, function (d) {\n      return d.group;\n    });\n\n    var yPos = function yPos(d) {\n      return yScale(d.group) - 3;\n    };\n\n    removeElement(texts);\n    texts.enter().append('text').attr('class', 'variable').attr('x', 1).attr('y', yPos).attr('opacity', 0).text(function (d) {\n      return d.group;\n    }).merge(texts).transition().duration(updateDuration).ease(easeCubicInOut).attr('y', yPos).attr('opacity', 1);\n  };\n\n  var removeElement = function removeElement(el) {\n    return el.exit().transition().duration(updateDuration).ease(easeCubicInOut).attr('y', dims.height * 2).remove();\n  };\n\n  return __jsx(ChartWrapper, {\n    ref: divRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  });\n};\n\nexport default BarChart;","map":{"version":3,"sources":["/Users/andrasszesztai/Desktop/boring-barchart-nextjs/containers/FurnitureBank2019/components/BarChart.jsx"],"names":["React","useRef","useState","useEffect","styled","_","scaleBand","scaleLinear","select","max","colorGreen","useSvgResize","usePrevious","createUpdateSvg","numberTween","colorGrey","fontSizeS","fontSizeM","fontWeightL","easeCubicInOut","format","ChartWrapper","div","BarChart","data","updateDuration","divRef","storedValues","prevData","init","setInit","initVis","updateData","updateDims","dims","prevDims","height","width","isEqual","area","current","append","chartArea","yScale","range","paddingOuter","paddingInner","xScale","domain","map","d","group","share","createUpdateRects","createUpdateValueText","createUpdateVariableText","rects","selectAll","removeElement","enter","attr","bandwidth","merge","transition","duration","ease","console","log","texts","centerText","text","tween","i","n","yPos","el","exit","remove"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport _ from 'lodash'\nimport { scaleBand, scaleLinear } from 'd3-scale'\nimport { select } from \"d3-selection\";\nimport { max } from 'd3-array'\n\nimport { colorGreen } from \"../styles\";\nimport { useSvgResize, usePrevious } from \"../../../hooks\";\nimport { createUpdateSvg, numberTween } from \"../../../utils\";\nimport { colorGrey, fontSizeS, fontSizeM, fontWeightL } from \"../../../styles\";\nimport { easeCubicInOut } from \"d3-ease\";\nimport { format } from \"d3-format\";\n\nconst ChartWrapper = styled.div`\n  height: 100%;\n  width: 100%;\n\n  border-left: 1px solid ${colorGrey};\n\n  rect {\n    fill: ${colorGreen};\n  }\n\n  .variable {\n    fill: ${colorGrey};\n    font-size: 1rem;\n  }\n\n  .value {\n    fill: #fff;\n    font-size: ${fontSizeM};\n    font-weight: ${fontWeightL};\n    text-anchor: end;\n  }\n`;\n\nconst BarChart = ({\n  data,\n  updateDuration = 1000,\n}) => {\n  const divRef = useRef()\n  const storedValues = useRef()\n  const prevData = usePrevious(data)\n  const [ init, setInit ] = useState(false)\n  let initVis, updateData, updateDims\n\n  const dims = useSvgResize(divRef)\n  const prevDims = usePrevious(dims)\n\n  useEffect(() => {\n    if(data && dims.height && dims.width && !init){\n      initVis()\n      setInit(true)\n    }\n    if(init && !_.isEqual(data, prevData)){\n      updateData()\n    }\n  }, [data, dims, init, initVis, prevData, updateData])\n\n  useEffect(() => {\n    if(init){\n      !_.isEqual(dims, prevDims) && updateDims();\n    }\n  }, [dims, init, prevDims, updateDims])\n\n  initVis = () => {\n    const area = select(divRef.current)\n    const { chartArea } = createUpdateSvg({\n      area,\n      dims,\n      append: true\n    });\n\n    const yScale = scaleBand().range([0, dims.height])\n      .paddingOuter(.3)\n      .paddingInner(.4)\n\n    const xScale = scaleLinear().range([0, dims.width])\n    \n    storedValues.current = {\n      chartArea,\n      yScale,\n      xScale\n    }\n    updateData()\n  }\n\n  updateData = () => {\n    const { yScale, xScale } = storedValues.current\n    yScale.domain(data.map(d => d.group))\n    xScale.domain([0, max(data, d => d.share)])\n    storedValues.current = { ...storedValues.current, yScale, xScale }\n    createUpdateRects()\n    createUpdateValueText()\n    createUpdateVariableText()\n  }\n\n  const createUpdateRects = () => {\n    const { chartArea, yScale, xScale } = storedValues.current\n\n    const rects = chartArea.selectAll('rect').data(data, d => d.group)\n    \n    removeElement(rects)\n\n    rects.enter()\n      .append('rect')\n      .attr('x', 0)\n      .attr('y', d => yScale(d.group))\n      .attr('height', yScale.bandwidth())\n      .attr('width', 0)\n        .merge(rects)\n        .transition()\n        .duration(updateDuration)\n        .ease(easeCubicInOut)\n        .attr('width', d => xScale(d.share))\n\n  }\n\n  updateDims = () => {\n    console.log('updatig dims');\n    \n    // TODO\n  }\n\n  const createUpdateValueText = () => {\n    const { chartArea, yScale, xScale } = storedValues.current\n\n    const texts = chartArea.selectAll('.value').data(data, d => d.group)\n    const centerText = d => yScale(d.group) + yScale.bandwidth()/2 + 4\n\n    removeElement(texts)\n\n    texts.enter()\n      .append('text')\n      .attr('class', 'value')\n      .attr('x', 0)\n      .attr('y', centerText)\n      .attr('opacity', 0)\n      .text(0)\n        .merge(texts)\n        .transition()\n        .duration(updateDuration)\n        .ease(easeCubicInOut)\n        .attr('x', d => xScale(d.share) - 2)\n        .tween('text', (d, i, n) => numberTween(d, i, n, 'share', '.1%'))\n        .attr('opacity', 1)\n  }\n\n  const createUpdateVariableText = () => {\n    const { chartArea, yScale } = storedValues.current\n\n    const texts = chartArea.selectAll('.variable').data(data, d => d.group)\n    const yPos = d => yScale(d.group) - 3\n\n    removeElement(texts)\n\n    texts.enter()\n      .append('text')\n      .attr('class', 'variable')\n      .attr('x', 1)\n      .attr('y', yPos)\n      .attr('opacity', 0)\n      .text(d => d.group)\n        .merge(texts)\n        .transition()\n        .duration(updateDuration)\n        .ease(easeCubicInOut)\n        .attr('y', yPos)\n        .attr('opacity', 1)\n\n  }\n\n  const removeElement = el => \n    el.exit()\n      .transition()\n      .duration(updateDuration)\n      .ease(easeCubicInOut)\n      .attr('y', dims.height * 2)\n      .remove()\n\n\n  return <ChartWrapper ref={divRef} />;\n};\n\nexport default BarChart;\n"]},"metadata":{},"sourceType":"module"}